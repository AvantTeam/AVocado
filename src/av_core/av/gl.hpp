/**
 * Loader generated by glad 2.0.0-beta on Sat Jul  9 13:23:44 2022
 *
 * Generator: C/C++
 * Specification: gl
 * Extensions: 105
 *
 * APIs:
 *  - gl:core=3.2
 *  - gles2=3.2
 *
 * Options:
 *  - ALIAS = True
 *  - DEBUG = False
 *  - HEADER_ONLY = True
 *  - LOADER = False
 *  - MX = True
 *  - MX_GLOBAL = False
 *  - ON_DEMAND = False
 *
 * Commandline:
 *    --merge --api='gl:core=3.2,gles2=3.2' --extensions='GL_APPLE_flush_buffer_range,GL_APPLE_vertex_array_object,GL_ARB_color_buffer_float,GL_ARB_copy_buffer,GL_ARB_draw_buffers,GL_ARB_draw_elements_base_vertex,GL_ARB_draw_instanced,GL_ARB_framebuffer_object,GL_ARB_geometry_shader4,GL_ARB_imaging,GL_ARB_map_buffer_range,GL_ARB_multisample,GL_ARB_multitexture,GL_ARB_occlusion_query,GL_ARB_point_parameters,GL_ARB_provoking_vertex,GL_ARB_shader_objects,GL_ARB_sync,GL_ARB_texture_buffer_object,GL_ARB_texture_compression,GL_ARB_texture_multisample,GL_ARB_uniform_buffer_object,GL_ARB_vertex_array_object,GL_ARB_vertex_buffer_object,GL_ARB_vertex_program,GL_ARB_vertex_shader,GL_ATI_draw_buffers,GL_ATI_separate_stencil,GL_EXT_blend_color,GL_EXT_blend_equation_separate,GL_EXT_blend_func_separate,GL_EXT_blend_minmax,GL_EXT_copy_texture,GL_EXT_direct_state_access,GL_EXT_draw_buffers2,GL_EXT_draw_instanced,GL_EXT_draw_range_elements,GL_EXT_framebuffer_blit,GL_EXT_framebuffer_multisample,GL_EXT_framebuffer_object,GL_EXT_gpu_shader4,GL_EXT_multi_draw_arrays,GL_EXT_point_parameters,GL_EXT_provoking_vertex,GL_EXT_subtexture,GL_EXT_texture3D,GL_EXT_texture_array,GL_EXT_texture_buffer_object,GL_EXT_texture_integer,GL_EXT_texture_object,GL_EXT_transform_feedback,GL_EXT_vertex_array,GL_INGR_blend_func_separate,GL_NVX_conditional_render,GL_NV_conditional_render,GL_NV_explicit_multisample,GL_NV_geometry_program4,GL_NV_point_sprite,GL_NV_transform_feedback,GL_NV_vertex_program,GL_NV_vertex_program4,GL_SGIS_point_parameters,GL_ANGLE_instanced_arrays,GL_APPLE_sync,GL_EXT_copy_image,GL_EXT_disjoint_timer_query,GL_EXT_draw_buffers,GL_EXT_draw_buffers_indexed,GL_EXT_draw_elements_base_vertex,GL_EXT_geometry_shader,GL_EXT_instanced_arrays,GL_EXT_map_buffer_range,GL_EXT_multisampled_render_to_texture,GL_EXT_primitive_bounding_box,GL_EXT_robustness,GL_EXT_separate_shader_objects,GL_EXT_tessellation_shader,GL_EXT_texture_border_clamp,GL_EXT_texture_buffer,GL_EXT_texture_storage,GL_KHR_blend_equation_advanced,GL_KHR_debug,GL_KHR_robustness,GL_NV_blend_equation_advanced,GL_NV_copy_buffer,GL_NV_draw_instanced,GL_NV_framebuffer_blit,GL_NV_framebuffer_multisample,GL_NV_instanced_arrays,GL_NV_non_square_matrices,GL_NV_viewport_array,GL_OES_copy_image,GL_OES_draw_buffers_indexed,GL_OES_draw_elements_base_vertex,GL_OES_geometry_shader,GL_OES_get_program_binary,GL_OES_mapbuffer,GL_OES_primitive_bounding_box,GL_OES_sample_shading,GL_OES_tessellation_shader,GL_OES_texture_border_clamp,GL_OES_texture_buffer,GL_OES_texture_storage_multisample_2d_array,GL_OES_vertex_array_object,GL_OES_viewport_array' c --alias --header-only --mx
 *
 * Online:
 *    http://glad.sh/#api=gl%3Acore%3D3.2%2Cgles2%3D3.2&generator=c&options=MERGE%2CALIAS%2CHEADER_ONLY%2CMX
 *
 */

#ifndef GLAD_GL_H_
#define GLAD_GL_H_

#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifdef __gl_h_
  #error OpenGL (gl.h) header already included (API: gl), remove previous include!
#endif
#define __gl_h_ 1
#ifdef __gl3_h_
  #error OpenGL (gl3.h) header already included (API: gl), remove previous include!
#endif
#define __gl3_h_ 1
#ifdef __glext_h_
  #error OpenGL (glext.h) header already included (API: gl), remove previous include!
#endif
#define __glext_h_ 1
#ifdef __gl3ext_h_
  #error OpenGL (gl3ext.h) header already included (API: gl), remove previous include!
#endif
#define __gl3ext_h_ 1
#ifdef __gl2_h_
  #error OpenGL ES 2 header already included (API: gles2), remove previous include!
#endif
#define __gl2_h_ 1
#ifdef __clang__
#pragma clang diagnostic pop
#endif

#define GLAD_GL
#define GLAD_OPTION_GL_ALIAS
#define GLAD_OPTION_GL_HEADER_ONLY
#define GLAD_OPTION_GL_MX

namespace av {

#ifndef GLAD_PLATFORM_H_
#define GLAD_PLATFORM_H_

#ifndef GLAD_PLATFORM_WIN32
  #if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__MINGW32__)
    #define GLAD_PLATFORM_WIN32 1
  #else
    #define GLAD_PLATFORM_WIN32 0
  #endif
#endif

#ifndef GLAD_PLATFORM_APPLE
  #ifdef __APPLE__
    #define GLAD_PLATFORM_APPLE 1
  #else
    #define GLAD_PLATFORM_APPLE 0
  #endif
#endif

#ifndef GLAD_PLATFORM_EMSCRIPTEN
  #ifdef __EMSCRIPTEN__
    #define GLAD_PLATFORM_EMSCRIPTEN 1
  #else
    #define GLAD_PLATFORM_EMSCRIPTEN 0
  #endif
#endif

#ifndef GLAD_PLATFORM_UWP
  #if defined(_MSC_VER) && !defined(GLAD_INTERNAL_HAVE_WINAPIFAMILY)
    #ifdef __has_include
      #if __has_include(<winapifamily.h>)
        #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
      #endif
    #elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
      #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
    #endif
  #endif

  #ifdef GLAD_INTERNAL_HAVE_WINAPIFAMILY
    #include <winapifamily.h>
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
      #define GLAD_PLATFORM_UWP 1
    #endif
  #endif

  #ifndef GLAD_PLATFORM_UWP
    #define GLAD_PLATFORM_UWP 0
  #endif
#endif

#ifdef __GNUC__
  #define GLAD_GNUC_EXTENSION __extension__
#else
  #define GLAD_GNUC_EXTENSION
#endif

#ifndef GLAD_API_CALL
  #if defined(GLAD_API_CALL_EXPORT)
    #if GLAD_PLATFORM_WIN32 || defined(__CYGWIN__)
      #if defined(GLAD_API_CALL_EXPORT_BUILD)
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllexport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllexport) extern
        #endif
      #else
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllimport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllimport) extern
        #endif
      #endif
    #elif defined(__GNUC__) && defined(GLAD_API_CALL_EXPORT_BUILD)
      #define GLAD_API_CALL __attribute__ ((visibility ("default"))) extern
    #else
      #define GLAD_API_CALL extern
    #endif
  #else
    #define GLAD_API_CALL extern
  #endif
#endif

#ifdef APIENTRY
  #define GLAD_API_PTR APIENTRY
#elif GLAD_PLATFORM_WIN32
  #define GLAD_API_PTR __stdcall
#else
  #define GLAD_API_PTR
#endif

#ifndef GLAPI
#define GLAPI GLAD_API_CALL
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY GLAD_API_PTR
#endif

#define GLAD_MAKE_VERSION(major, minor) (major * 10000 + minor)
#define GLAD_VERSION_MAJOR(version) (version / 10000)
#define GLAD_VERSION_MINOR(version) (version % 10000)

#define GLAD_GENERATOR_VERSION "2.0.0-beta"

typedef void (*GLADapiproc)(void);

typedef GLADapiproc (*GLADloadfunc)(const char *name);
typedef GLADapiproc (*GLADuserptrloadfunc)(void *userptr, const char *name);

typedef void (*GLADprecallback)(const char *name, GLADapiproc apiproc, int len_args, ...);
typedef void (*GLADpostcallback)(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...);

#endif /* GLAD_PLATFORM_H_ */

#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_ACTIVE_TEXTURE_ARB 0x84E0
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_ACTIVE_VARYINGS_NV 0x8C81
#define GL_ACTIVE_VARYING_MAX_LENGTH_NV 0x8C82
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_ALPHA 0x1906
#define GL_ALPHA16I_EXT 0x8D8A
#define GL_ALPHA16UI_EXT 0x8D78
#define GL_ALPHA32I_EXT 0x8D84
#define GL_ALPHA32UI_EXT 0x8D72
#define GL_ALPHA8I_EXT 0x8D90
#define GL_ALPHA8UI_EXT 0x8D7E
#define GL_ALPHA_INTEGER_EXT 0x8D97
#define GL_ALREADY_SIGNALED 0x911A
#define GL_ALWAYS 0x0207
#define GL_AND 0x1501
#define GL_AND_INVERTED 0x1504
#define GL_AND_REVERSE 0x1502
#define GL_ARRAY_BUFFER 0x8892
#define GL_ARRAY_BUFFER_ARB 0x8892
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ARRAY_BUFFER_BINDING_ARB 0x8894
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_ATTRIB_ARRAY_POINTER_NV 0x8645
#define GL_ATTRIB_ARRAY_SIZE_NV 0x8623
#define GL_ATTRIB_ARRAY_STRIDE_NV 0x8624
#define GL_ATTRIB_ARRAY_TYPE_NV 0x8625
#define GL_BACK 0x0405
#define GL_BACK_LEFT 0x0402
#define GL_BACK_PRIMARY_COLOR_NV 0x8C77
#define GL_BACK_RIGHT 0x0403
#define GL_BACK_SECONDARY_COLOR_NV 0x8C78
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_BGRA_INTEGER 0x8D9B
#define GL_BGRA_INTEGER_EXT 0x8D9B
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGR_INTEGER_EXT 0x8D9A
#define GL_BLEND 0x0BE2
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_COLOR_EXT 0x8005
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_DST_ALPHA_EXT 0x80CA
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_DST_RGB_EXT 0x80C8
#define GL_BLEND_EQUATION 0x8009
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_BLEND_EQUATION_ALPHA_EXT 0x883D
#define GL_BLEND_EQUATION_EXT 0x8009
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_BLEND_EQUATION_RGB_EXT 0x8009
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_BLEND_SRC_ALPHA_EXT 0x80CB
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_SRC_RGB_EXT 0x80C9
#define GL_BLUE 0x1905
#define GL_BLUE_INTEGER 0x8D96
#define GL_BLUE_INTEGER_EXT 0x8D96
#define GL_BOOL 0x8B56
#define GL_BOOL_ARB 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC2_ARB 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC3_ARB 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_BOOL_VEC4_ARB 0x8B59
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_ACCESS_ARB 0x88BB
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_FLUSHING_UNMAP_APPLE 0x8A13
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAPPED_ARB 0x88BC
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_BUFFER_MAP_POINTER_ARB 0x88BD
#define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_SIZE_ARB 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_BUFFER_USAGE_ARB 0x8765
#define GL_BYTE 0x1400
#define GL_CCW 0x0901
#define GL_CLAMP_FRAGMENT_COLOR_ARB 0x891B
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_CLAMP_READ_COLOR_ARB 0x891C
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_CLAMP_VERTEX_COLOR_ARB 0x891A
#define GL_CLEAR 0x1500
#define GL_CLIENT_ACTIVE_TEXTURE_ARB 0x84E1
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_CLIP_DISTANCE_NV 0x8C7A
#define GL_COLOR 0x1800
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
#define GL_COLOR_ARRAY_COUNT_EXT 0x8084
#define GL_COLOR_ARRAY_EXT 0x8076
#define GL_COLOR_ARRAY_POINTER_EXT 0x8090
#define GL_COLOR_ARRAY_SIZE_EXT 0x8081
#define GL_COLOR_ARRAY_STRIDE_EXT 0x8083
#define GL_COLOR_ARRAY_TYPE_EXT 0x8082
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT0_EXT 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT10_EXT 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT11_EXT 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT12_EXT 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT13_EXT 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT14_EXT 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT15_EXT 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT1_EXT 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT2_EXT 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_COLOR_ATTACHMENT3_EXT 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT4_EXT 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT5_EXT 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT6_EXT 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT7_EXT 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT8_EXT 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT9_EXT 0x8CE9
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_COLOR_SUM_ARB 0x8458
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_COMPILE_STATUS 0x8B81
#define GL_COMPRESSED_ALPHA_ARB 0x84E9
#define GL_COMPRESSED_INTENSITY_ARB 0x84EC
#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
#define GL_COMPRESSED_LUMINANCE_ARB 0x84EA
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_RG 0x8226
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_COMPRESSED_RGBA_ARB 0x84EE
#define GL_COMPRESSED_RGB_ARB 0x84ED
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
#define GL_CONDITION_SATISFIED 0x911C
#define GL_CONSTANT_ALPHA 0x8003
#define GL_CONSTANT_ALPHA_EXT 0x8003
#define GL_CONSTANT_COLOR 0x8001
#define GL_CONSTANT_COLOR_EXT 0x8001
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_FLAGS 0x821E
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_COORD_REPLACE_NV 0x8862
#define GL_COPY 0x1503
#define GL_COPY_INVERTED 0x150C
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_CURRENT_ATTRIB_NV 0x8626
#define GL_CURRENT_MATRIX_ARB 0x8641
#define GL_CURRENT_MATRIX_NV 0x8641
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
#define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0x8640
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_CURRENT_QUERY 0x8865
#define GL_CURRENT_QUERY_ARB 0x8865
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
#define GL_CW 0x0900
#define GL_DECR 0x1E03
#define GL_DECR_WRAP 0x8508
#define GL_DELETE_STATUS 0x8B80
#define GL_DEPTH 0x1801
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_DEPTH_ATTACHMENT_EXT 0x8D00
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_DEPTH_CLAMP 0x864F
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_COMPONENT 0x1902
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH_FUNC 0x0B74
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_STENCIL 0x84F9
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DISTANCE_ATTENUATION_EXT 0x8129
#define GL_DISTANCE_ATTENUATION_SGIS 0x8129
#define GL_DITHER 0x0BD0
#define GL_DONT_CARE 0x1100
#define GL_DOUBLE 0x140A
#define GL_DOUBLEBUFFER 0x0C32
#define GL_DRAW_BUFFER 0x0C01
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER0_ARB 0x8825
#define GL_DRAW_BUFFER0_ATI 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER10_ARB 0x882F
#define GL_DRAW_BUFFER10_ATI 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER11_ARB 0x8830
#define GL_DRAW_BUFFER11_ATI 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER12_ARB 0x8831
#define GL_DRAW_BUFFER12_ATI 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER13_ARB 0x8832
#define GL_DRAW_BUFFER13_ATI 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER14_ARB 0x8833
#define GL_DRAW_BUFFER14_ATI 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_DRAW_BUFFER15_ARB 0x8834
#define GL_DRAW_BUFFER15_ATI 0x8834
#define GL_DRAW_BUFFER1_ARB 0x8826
#define GL_DRAW_BUFFER1_ATI 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER2_ARB 0x8827
#define GL_DRAW_BUFFER2_ATI 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER3_ARB 0x8828
#define GL_DRAW_BUFFER3_ATI 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER4_ARB 0x8829
#define GL_DRAW_BUFFER4_ATI 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER5_ARB 0x882A
#define GL_DRAW_BUFFER5_ATI 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER6_ARB 0x882B
#define GL_DRAW_BUFFER6_ATI 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER7_ARB 0x882C
#define GL_DRAW_BUFFER7_ATI 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER8_ARB 0x882D
#define GL_DRAW_BUFFER8_ATI 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER9_ARB 0x882E
#define GL_DRAW_BUFFER9_ATI 0x882E
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_DRAW_FRAMEBUFFER_EXT 0x8CA9
#define GL_DST_ALPHA 0x0304
#define GL_DST_COLOR 0x0306
#define GL_DYNAMIC_COPY 0x88EA
#define GL_DYNAMIC_COPY_ARB 0x88EA
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_DRAW_ARB 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_READ_ARB 0x88E9
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
#define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0x808D
#define GL_EDGE_FLAG_ARRAY_EXT 0x8079
#define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0x8093
#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0x808C
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
#define GL_EQUAL 0x0202
#define GL_EQUIV 0x1509
#define GL_EXTENSIONS 0x1F03
#define GL_FALSE 0
#define GL_FASTEST 0x1101
#define GL_FILL 0x1B02
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_FIRST_VERTEX_CONVENTION_EXT 0x8E4D
#define GL_FIXED_ONLY 0x891D
#define GL_FIXED_ONLY_ARB 0x891D
#define GL_FLOAT 0x1406
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT2_ARB 0x8B5A
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT3_ARB 0x8B5B
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4 0x8B5C
#define GL_FLOAT_MAT4_ARB 0x8B5C
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC2_ARB 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC3_ARB 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_FLOAT_VEC4_ARB 0x8B52
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_FRAMEBUFFER 0x8D40
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_COMPLETE_EXT 0x8CD5
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_EXT 0x8D40
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0x8CDD
#define GL_FRONT 0x0404
#define GL_FRONT_AND_BACK 0x0408
#define GL_FRONT_FACE 0x0B46
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_ADD_EXT 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_GENERIC_ATTRIB_NV 0x8C7D
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_INPUT_TYPE_ARB 0x8DDB
#define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_GEOMETRY_OUTPUT_TYPE_ARB 0x8DDC
#define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC
#define GL_GEOMETRY_PROGRAM_NV 0x8C26
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_SHADER_ARB 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_VERTICES_OUT_ARB 0x8DDA
#define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA
#define GL_GEQUAL 0x0206
#define GL_GREATER 0x0204
#define GL_GREEN 0x1904
#define GL_GREEN_INTEGER 0x8D95
#define GL_GREEN_INTEGER_EXT 0x8D95
#define GL_HALF_FLOAT 0x140B
#define GL_IDENTITY_NV 0x862A
#define GL_INCR 0x1E02
#define GL_INCR_WRAP 0x8507
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
#define GL_INDEX_ARRAY_COUNT_EXT 0x8087
#define GL_INDEX_ARRAY_EXT 0x8077
#define GL_INDEX_ARRAY_POINTER_EXT 0x8091
#define GL_INDEX_ARRAY_STRIDE_EXT 0x8086
#define GL_INDEX_ARRAY_TYPE_EXT 0x8085
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_INT 0x1404
#define GL_INTENSITY16I_EXT 0x8D8B
#define GL_INTENSITY16UI_EXT 0x8D79
#define GL_INTENSITY32I_EXT 0x8D85
#define GL_INTENSITY32UI_EXT 0x8D73
#define GL_INTENSITY8I_EXT 0x8D91
#define GL_INTENSITY8UI_EXT 0x8D7F
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_INTERLEAVED_ATTRIBS_EXT 0x8C8C
#define GL_INTERLEAVED_ATTRIBS_NV 0x8C8C
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_1D_ARRAY_EXT 0x8DCE
#define GL_INT_SAMPLER_1D_EXT 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_INT_SAMPLER_2D_ARRAY_EXT 0x8DCF
#define GL_INT_SAMPLER_2D_EXT 0x8DCA
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_2D_RECT_EXT 0x8DCD
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_3D_EXT 0x8DCB
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_INT_SAMPLER_BUFFER_EXT 0x8DD0
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_CUBE_EXT 0x8DCC
#define GL_INT_SAMPLER_RENDERBUFFER_NV 0x8E57
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC2_ARB 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC3_ARB 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_INT_VEC4_ARB 0x8B55
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
#define GL_INVALID_INDEX 0xFFFFFFFF
#define GL_INVALID_OPERATION 0x0502
#define GL_INVALID_VALUE 0x0501
#define GL_INVERSE_NV 0x862B
#define GL_INVERSE_TRANSPOSE_NV 0x862D
#define GL_INVERT 0x150A
#define GL_KEEP 0x1E00
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_LAST_VERTEX_CONVENTION_EXT 0x8E4E
#define GL_LAYER_NV 0x8DAA
#define GL_LEFT 0x0406
#define GL_LEQUAL 0x0203
#define GL_LESS 0x0201
#define GL_LINE 0x1B01
#define GL_LINEAR 0x2601
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_LINES 0x0001
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINES_ADJACENCY_ARB 0x000A
#define GL_LINES_ADJACENCY_EXT 0x000A
#define GL_LINE_LOOP 0x0002
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_LINE_STRIP 0x0003
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_LINE_STRIP_ADJACENCY_ARB 0x000B
#define GL_LINE_STRIP_ADJACENCY_EXT 0x000B
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LINK_STATUS 0x8B82
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_LOWER_LEFT 0x8CA1
#define GL_LUMINANCE16I_EXT 0x8D8C
#define GL_LUMINANCE16UI_EXT 0x8D7A
#define GL_LUMINANCE32I_EXT 0x8D86
#define GL_LUMINANCE32UI_EXT 0x8D74
#define GL_LUMINANCE8I_EXT 0x8D92
#define GL_LUMINANCE8UI_EXT 0x8D80
#define GL_LUMINANCE_ALPHA16I_EXT 0x8D8D
#define GL_LUMINANCE_ALPHA16UI_EXT 0x8D7B
#define GL_LUMINANCE_ALPHA32I_EXT 0x8D87
#define GL_LUMINANCE_ALPHA32UI_EXT 0x8D75
#define GL_LUMINANCE_ALPHA8I_EXT 0x8D93
#define GL_LUMINANCE_ALPHA8UI_EXT 0x8D81
#define GL_LUMINANCE_ALPHA_INTEGER_EXT 0x8D9D
#define GL_LUMINANCE_INTEGER_EXT 0x8D9C
#define GL_MAJOR_VERSION 0x821B
#define GL_MAP1_VERTEX_ATTRIB0_4_NV 0x8660
#define GL_MAP1_VERTEX_ATTRIB10_4_NV 0x866A
#define GL_MAP1_VERTEX_ATTRIB11_4_NV 0x866B
#define GL_MAP1_VERTEX_ATTRIB12_4_NV 0x866C
#define GL_MAP1_VERTEX_ATTRIB13_4_NV 0x866D
#define GL_MAP1_VERTEX_ATTRIB14_4_NV 0x866E
#define GL_MAP1_VERTEX_ATTRIB15_4_NV 0x866F
#define GL_MAP1_VERTEX_ATTRIB1_4_NV 0x8661
#define GL_MAP1_VERTEX_ATTRIB2_4_NV 0x8662
#define GL_MAP1_VERTEX_ATTRIB3_4_NV 0x8663
#define GL_MAP1_VERTEX_ATTRIB4_4_NV 0x8664
#define GL_MAP1_VERTEX_ATTRIB5_4_NV 0x8665
#define GL_MAP1_VERTEX_ATTRIB6_4_NV 0x8666
#define GL_MAP1_VERTEX_ATTRIB7_4_NV 0x8667
#define GL_MAP1_VERTEX_ATTRIB8_4_NV 0x8668
#define GL_MAP1_VERTEX_ATTRIB9_4_NV 0x8669
#define GL_MAP2_VERTEX_ATTRIB0_4_NV 0x8670
#define GL_MAP2_VERTEX_ATTRIB10_4_NV 0x867A
#define GL_MAP2_VERTEX_ATTRIB11_4_NV 0x867B
#define GL_MAP2_VERTEX_ATTRIB12_4_NV 0x867C
#define GL_MAP2_VERTEX_ATTRIB13_4_NV 0x867D
#define GL_MAP2_VERTEX_ATTRIB14_4_NV 0x867E
#define GL_MAP2_VERTEX_ATTRIB15_4_NV 0x867F
#define GL_MAP2_VERTEX_ATTRIB1_4_NV 0x8671
#define GL_MAP2_VERTEX_ATTRIB2_4_NV 0x8672
#define GL_MAP2_VERTEX_ATTRIB3_4_NV 0x8673
#define GL_MAP2_VERTEX_ATTRIB4_4_NV 0x8674
#define GL_MAP2_VERTEX_ATTRIB5_4_NV 0x8675
#define GL_MAP2_VERTEX_ATTRIB6_4_NV 0x8676
#define GL_MAP2_VERTEX_ATTRIB7_4_NV 0x8677
#define GL_MAP2_VERTEX_ATTRIB8_4_NV 0x8678
#define GL_MAP2_VERTEX_ATTRIB9_4_NV 0x8679
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MATRIX0_ARB 0x88C0
#define GL_MATRIX0_NV 0x8630
#define GL_MATRIX10_ARB 0x88CA
#define GL_MATRIX11_ARB 0x88CB
#define GL_MATRIX12_ARB 0x88CC
#define GL_MATRIX13_ARB 0x88CD
#define GL_MATRIX14_ARB 0x88CE
#define GL_MATRIX15_ARB 0x88CF
#define GL_MATRIX16_ARB 0x88D0
#define GL_MATRIX17_ARB 0x88D1
#define GL_MATRIX18_ARB 0x88D2
#define GL_MATRIX19_ARB 0x88D3
#define GL_MATRIX1_ARB 0x88C1
#define GL_MATRIX1_NV 0x8631
#define GL_MATRIX20_ARB 0x88D4
#define GL_MATRIX21_ARB 0x88D5
#define GL_MATRIX22_ARB 0x88D6
#define GL_MATRIX23_ARB 0x88D7
#define GL_MATRIX24_ARB 0x88D8
#define GL_MATRIX25_ARB 0x88D9
#define GL_MATRIX26_ARB 0x88DA
#define GL_MATRIX27_ARB 0x88DB
#define GL_MATRIX28_ARB 0x88DC
#define GL_MATRIX29_ARB 0x88DD
#define GL_MATRIX2_ARB 0x88C2
#define GL_MATRIX2_NV 0x8632
#define GL_MATRIX30_ARB 0x88DE
#define GL_MATRIX31_ARB 0x88DF
#define GL_MATRIX3_ARB 0x88C3
#define GL_MATRIX3_NV 0x8633
#define GL_MATRIX4_ARB 0x88C4
#define GL_MATRIX4_NV 0x8634
#define GL_MATRIX5_ARB 0x88C5
#define GL_MATRIX5_NV 0x8635
#define GL_MATRIX6_ARB 0x88C6
#define GL_MATRIX6_NV 0x8636
#define GL_MATRIX7_ARB 0x88C7
#define GL_MATRIX7_NV 0x8637
#define GL_MATRIX8_ARB 0x88C8
#define GL_MATRIX9_ARB 0x88C9
#define GL_MAX 0x8008
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_MAX_3D_TEXTURE_SIZE_EXT 0x8073
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT 0x88FF
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_MAX_COLOR_ATTACHMENTS_EXT 0x8CDF
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_MAX_DRAW_BUFFERS_ARB 0x8824
#define GL_MAX_DRAW_BUFFERS_ATI 0x8824
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_MAX_ELEMENTS_INDICES_EXT 0x80E9
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_VERTICES_EXT 0x80E8
#define GL_MAX_EXT 0x8008
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
#define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
#define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
#define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
#define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT 0x8905
#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_MAX_RENDERBUFFER_SIZE_EXT 0x84E8
#define GL_MAX_SAMPLES 0x8D57
#define GL_MAX_SAMPLES_EXT 0x8D57
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_MAX_SAMPLE_MASK_WORDS_NV 0x8E59
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT 0x8C2B
#define GL_MAX_TEXTURE_COORDS_ARB 0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_TEXTURE_UNITS_ARB 0x84E2
#define GL_MAX_TRACK_MATRICES_NV 0x862F
#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VARYING_FLOATS_ARB 0x8B4B
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_MIN 0x8007
#define GL_MINOR_VERSION 0x821C
#define GL_MIN_EXT 0x8007
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT 0x8904
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MODELVIEW_PROJECTION_NV 0x8629
#define GL_MULTISAMPLE 0x809D
#define GL_MULTISAMPLE_ARB 0x809D
#define GL_MULTISAMPLE_BIT_ARB 0x20000000
#define GL_NAND 0x150E
#define GL_NEAREST 0x2600
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_NEVER 0x0200
#define GL_NEXT_BUFFER_NV -2
#define GL_NICEST 0x1102
#define GL_NONE 0
#define GL_NOOP 0x1505
#define GL_NOR 0x1508
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
#define GL_NORMAL_ARRAY_COUNT_EXT 0x8080
#define GL_NORMAL_ARRAY_EXT 0x8075
#define GL_NORMAL_ARRAY_POINTER_EXT 0x808F
#define GL_NORMAL_ARRAY_STRIDE_EXT 0x807F
#define GL_NORMAL_ARRAY_TYPE_EXT 0x807E
#define GL_NOTEQUAL 0x0205
#define GL_NO_ERROR 0
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
#define GL_NUM_EXTENSIONS 0x821D
#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0x8B89
#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
#define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86
#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
#define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85
#define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81
#define GL_OBJECT_DELETE_STATUS_ARB 0x8B80
#define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84
#define GL_OBJECT_LINK_STATUS_ARB 0x8B82
#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
#define GL_OBJECT_SUBTYPE_ARB 0x8B4F
#define GL_OBJECT_TYPE 0x9112
#define GL_OBJECT_TYPE_ARB 0x8B4E
#define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83
#define GL_ONE 1
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT 0x8004
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_ONE_MINUS_CONSTANT_COLOR_EXT 0x8002
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_OR 0x1507
#define GL_OR_INVERTED 0x150D
#define GL_OR_REVERSE 0x150B
#define GL_OUT_OF_MEMORY 0x0505
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_PACK_IMAGE_HEIGHT_EXT 0x806C
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_SKIP_IMAGES_EXT 0x806B
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_POINT 0x1B00
#define GL_POINTS 0x0000
#define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_ARB 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_EXT 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_SGIS 0x8128
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_POINT_SIZE_MAX_ARB 0x8127
#define GL_POINT_SIZE_MAX_EXT 0x8127
#define GL_POINT_SIZE_MAX_SGIS 0x8127
#define GL_POINT_SIZE_MIN_ARB 0x8126
#define GL_POINT_SIZE_MIN_EXT 0x8126
#define GL_POINT_SIZE_MIN_SGIS 0x8126
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_POINT_SPRITE_NV 0x8861
#define GL_POINT_SPRITE_R_MODE_NV 0x8863
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_PRIMITIVES_GENERATED_EXT 0x8C87
#define GL_PRIMITIVES_GENERATED_NV 0x8C87
#define GL_PRIMITIVE_ID_NV 0x8C7C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B0
#define GL_PROGRAM_ATTRIBS_ARB 0x88AC
#define GL_PROGRAM_BINDING_ARB 0x8677
#define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
#define GL_PROGRAM_ERROR_POSITION_NV 0x864B
#define GL_PROGRAM_ERROR_STRING_ARB 0x8874
#define GL_PROGRAM_FORMAT_ARB 0x8876
#define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
#define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
#define GL_PROGRAM_LENGTH_ARB 0x8627
#define GL_PROGRAM_LENGTH_NV 0x8627
#define GL_PROGRAM_MATRIX_EXT 0x8E2D
#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
#define GL_PROGRAM_OBJECT_ARB 0x8B40
#define GL_PROGRAM_PARAMETERS_ARB 0x88A8
#define GL_PROGRAM_PARAMETER_NV 0x8644
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_PROGRAM_POINT_SIZE_EXT 0x8642
#define GL_PROGRAM_RESIDENT_NV 0x8647
#define GL_PROGRAM_STRING_ARB 0x8628
#define GL_PROGRAM_STRING_NV 0x8628
#define GL_PROGRAM_TARGET_NV 0x8646
#define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_PROVOKING_VERTEX_EXT 0x8E4F
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_PROXY_TEXTURE_1D_ARRAY_EXT 0x8C19
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_PROXY_TEXTURE_2D_ARRAY_EXT 0x8C1B
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_PROXY_TEXTURE_3D_EXT 0x8070
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_QUERY_BY_REGION_NO_WAIT_NV 0x8E16
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_WAIT_NV 0x8E15
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_QUERY_COUNTER_BITS_ARB 0x8864
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_NO_WAIT_NV 0x8E14
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_ARB 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_QUERY_RESULT_AVAILABLE_ARB 0x8867
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_WAIT_NV 0x8E13
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_R16 0x822A
#define GL_R16F 0x822D
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R16_SNORM 0x8F98
#define GL_R32F 0x822E
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_R3_G3_B2 0x2A10
#define GL_R8 0x8229
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R8_SNORM 0x8F94
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_RASTERIZER_DISCARD_EXT 0x8C89
#define GL_RASTERIZER_DISCARD_NV 0x8C89
#define GL_READ_BUFFER 0x0C02
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_EXT 0x8CAA
#define GL_READ_FRAMEBUFFER_EXT 0x8CA8
#define GL_READ_ONLY 0x88B8
#define GL_READ_ONLY_ARB 0x88B8
#define GL_READ_WRITE 0x88BA
#define GL_READ_WRITE_ARB 0x88BA
#define GL_RED 0x1903
#define GL_RED_INTEGER 0x8D94
#define GL_RED_INTEGER_EXT 0x8D94
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0x8D53
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_RENDERBUFFER_BINDING_EXT 0x8CA7
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_BLUE_SIZE_EXT 0x8D52
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0x8D54
#define GL_RENDERBUFFER_EXT 0x8D41
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_GREEN_SIZE_EXT 0x8D51
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_HEIGHT_EXT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_RED_SIZE_EXT 0x8D50
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_EXT 0x8CAB
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0x8D55
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_WIDTH_EXT 0x8D42
#define GL_RENDERER 0x1F01
#define GL_REPEAT 0x2901
#define GL_REPLACE 0x1E01
#define GL_RG 0x8227
#define GL_RG16 0x822C
#define GL_RG16F 0x822F
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG16_SNORM 0x8F99
#define GL_RG32F 0x8230
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_RG8 0x822B
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG8_SNORM 0x8F95
#define GL_RGB 0x1907
#define GL_RGB10 0x8052
#define GL_RGB10_A2 0x8059
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGB16F 0x881B
#define GL_RGB16I 0x8D89
#define GL_RGB16I_EXT 0x8D89
#define GL_RGB16UI 0x8D77
#define GL_RGB16UI_EXT 0x8D77
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGB32F 0x8815
#define GL_RGB32I 0x8D83
#define GL_RGB32I_EXT 0x8D83
#define GL_RGB32UI 0x8D71
#define GL_RGB32UI_EXT 0x8D71
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB5_A1 0x8057
#define GL_RGB8 0x8051
#define GL_RGB8I 0x8D8F
#define GL_RGB8I_EXT 0x8D8F
#define GL_RGB8UI 0x8D7D
#define GL_RGB8UI_EXT 0x8D7D
#define GL_RGB8_SNORM 0x8F96
#define GL_RGB9_E5 0x8C3D
#define GL_RGBA 0x1908
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_RGBA16F 0x881A
#define GL_RGBA16I 0x8D88
#define GL_RGBA16I_EXT 0x8D88
#define GL_RGBA16UI 0x8D76
#define GL_RGBA16UI_EXT 0x8D76
#define GL_RGBA16_SNORM 0x8F9B
#define GL_RGBA2 0x8055
#define GL_RGBA32F 0x8814
#define GL_RGBA32I 0x8D82
#define GL_RGBA32I_EXT 0x8D82
#define GL_RGBA32UI 0x8D70
#define GL_RGBA32UI_EXT 0x8D70
#define GL_RGBA4 0x8056
#define GL_RGBA8 0x8058
#define GL_RGBA8I 0x8D8E
#define GL_RGBA8I_EXT 0x8D8E
#define GL_RGBA8UI 0x8D7C
#define GL_RGBA8UI_EXT 0x8D7C
#define GL_RGBA8_SNORM 0x8F97
#define GL_RGBA_FLOAT_MODE_ARB 0x8820
#define GL_RGBA_INTEGER 0x8D99
#define GL_RGBA_INTEGER_EXT 0x8D99
#define GL_RGBA_INTEGER_MODE_EXT 0x8D9E
#define GL_RGB_INTEGER 0x8D98
#define GL_RGB_INTEGER_EXT 0x8D98
#define GL_RG_INTEGER 0x8228
#define GL_RIGHT 0x0407
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_1D_ARB 0x8B5D
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_1D_ARRAY_EXT 0x8DC0
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 0x8DC3
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_1D_SHADOW_ARB 0x8B61
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_2D_ARB 0x8B5E
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_2D_ARRAY_EXT 0x8DC1
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 0x8DC4
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_ARB 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_SAMPLER_2D_SHADOW_ARB 0x8B62
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_3D_ARB 0x8B5F
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_SAMPLER_BUFFER_EXT 0x8DC2
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_CUBE_ARB 0x8B60
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_SAMPLER_CUBE_SHADOW_EXT 0x8DC5
#define GL_SAMPLER_RENDERBUFFER_NV 0x8E56
#define GL_SAMPLES 0x80A9
#define GL_SAMPLES_ARB 0x80A9
#define GL_SAMPLES_PASSED 0x8914
#define GL_SAMPLES_PASSED_ARB 0x8914
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLE_BUFFERS_ARB 0x80A8
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_COVERAGE_ARB 0x80A0
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_NV 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_SAMPLE_MASK_VALUE_NV 0x8E52
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_POSITION_NV 0x8E50
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_SEPARATE_ATTRIBS_EXT 0x8C8D
#define GL_SEPARATE_ATTRIBS_NV 0x8C8D
#define GL_SET 0x150F
#define GL_SHADER_OBJECT_ARB 0x8B48
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_SHADER_TYPE 0x8B4F
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_SHORT 0x1402
#define GL_SIGNALED 0x9119
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_SKIP_COMPONENTS1_NV -6
#define GL_SKIP_COMPONENTS2_NV -5
#define GL_SKIP_COMPONENTS3_NV -4
#define GL_SKIP_COMPONENTS4_NV -3
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SRC1_ALPHA 0x8589
#define GL_SRC_ALPHA 0x0302
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_SRC_COLOR 0x0300
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_SRGB_ALPHA 0x8C42
#define GL_STATIC_COPY 0x88E6
#define GL_STATIC_COPY_ARB 0x88E6
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_DRAW_ARB 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_READ_ARB 0x88E5
#define GL_STENCIL 0x1802
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_STENCIL_ATTACHMENT_EXT 0x8D20
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_FAIL_ATI 0x8801
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FUNC_ATI 0x8800
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX16 0x8D49
#define GL_STENCIL_INDEX16_EXT 0x8D49
#define GL_STENCIL_INDEX1_EXT 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX4_EXT 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX8_EXT 0x8D48
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_STEREO 0x0C33
#define GL_STREAM_COPY 0x88E2
#define GL_STREAM_COPY_ARB 0x88E2
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_DRAW_ARB 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_READ_ARB 0x88E1
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_SYNC_STATUS 0x9114
#define GL_TEXTURE 0x1702
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE0_ARB 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE10_ARB 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE11_ARB 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE12_ARB 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE13_ARB 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE14_ARB 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE15_ARB 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE16_ARB 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE17_ARB 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE18_ARB 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE19_ARB 0x84D3
#define GL_TEXTURE1_ARB 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE20_ARB 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE21_ARB 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE22_ARB 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE23_ARB 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE24_ARB 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE25_ARB 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE26_ARB 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE27_ARB 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE28_ARB 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE29_ARB 0x84DD
#define GL_TEXTURE2_ARB 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE30_ARB 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_TEXTURE31_ARB 0x84DF
#define GL_TEXTURE3_ARB 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE4_ARB 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE5_ARB 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE6_ARB 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE7_ARB 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE8_ARB 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE9_ARB 0x84C9
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_TEXTURE_1D_ARRAY_EXT 0x8C18
#define GL_TEXTURE_1D_BINDING_EXT 0x8068
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_TEXTURE_2D_ARRAY_EXT 0x8C1A
#define GL_TEXTURE_2D_BINDING_EXT 0x8069
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_TEXTURE_3D 0x806F
#define GL_TEXTURE_3D_BINDING_EXT 0x806A
#define GL_TEXTURE_3D_EXT 0x806F
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_1D_ARRAY_EXT 0x8C1C
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_TEXTURE_BINDING_2D_ARRAY_EXT 0x8C1D
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_ARB 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_EXT 0x8C2C
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_TEXTURE_BUFFER_ARB 0x8C2A
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
#define GL_TEXTURE_BUFFER_EXT 0x8C2A
#define GL_TEXTURE_BUFFER_FORMAT_ARB 0x8C2E
#define GL_TEXTURE_BUFFER_FORMAT_EXT 0x8C2E
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_TEXTURE_COMPRESSED_ARB 0x86A1
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSION_HINT_ARB 0x84EF
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0x808B
#define GL_TEXTURE_COORD_ARRAY_EXT 0x8078
#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0x8088
#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0x8089
#define GL_TEXTURE_COORD_NV 0x8C79
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_DEPTH_EXT 0x8071
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_PRIORITY_EXT 0x8066
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
#define GL_TEXTURE_RENDERBUFFER_NV 0x8E55
#define GL_TEXTURE_RESIDENT_EXT 0x8067
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_TEXTURE_WRAP_R_EXT 0x8072
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_TRACK_MATRIX_NV 0x8648
#define GL_TRACK_MATRIX_TRANSFORM_NV 0x8649
#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV 0x8C7E
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_NV 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
#define GL_TRANSFORM_FEEDBACK_RECORD_NV 0x8C86
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
#define GL_TRANSPOSE_NV 0x862C
#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT 0x8E2E
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLES_ADJACENCY_ARB 0x000C
#define GL_TRIANGLES_ADJACENCY_EXT 0x000C
#define GL_TRIANGLE_FAN 0x0006
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_ARB 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0x000D
#define GL_TRUE 1
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_UNPACK_IMAGE_HEIGHT_EXT 0x806E
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_SKIP_IMAGES_EXT 0x806D
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNSIGNALED 0x9118
#define GL_UNSIGNED_BYTE 0x1401
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_INT 0x1405
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_1D_EXT 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_2D_EXT 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_3D_EXT 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC2_EXT 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC3_EXT 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_UNSIGNED_INT_VEC4_EXT 0x8DC8
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_UNSIGNED_SHORT 0x1403
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UPPER_LEFT 0x8CA2
#define GL_VALIDATE_STATUS 0x8B83
#define GL_VENDOR 0x1F00
#define GL_VERSION 0x1F02
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_VERTEX_ARRAY_BINDING_APPLE 0x85B5
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
#define GL_VERTEX_ARRAY_COUNT_EXT 0x807D
#define GL_VERTEX_ARRAY_EXT 0x8074
#define GL_VERTEX_ARRAY_POINTER_EXT 0x808E
#define GL_VERTEX_ARRAY_SIZE_EXT 0x807A
#define GL_VERTEX_ARRAY_STRIDE_EXT 0x807C
#define GL_VERTEX_ARRAY_TYPE_EXT 0x807B
#define GL_VERTEX_ATTRIB_ARRAY0_NV 0x8650
#define GL_VERTEX_ATTRIB_ARRAY10_NV 0x865A
#define GL_VERTEX_ATTRIB_ARRAY11_NV 0x865B
#define GL_VERTEX_ATTRIB_ARRAY12_NV 0x865C
#define GL_VERTEX_ATTRIB_ARRAY13_NV 0x865D
#define GL_VERTEX_ATTRIB_ARRAY14_NV 0x865E
#define GL_VERTEX_ATTRIB_ARRAY15_NV 0x865F
#define GL_VERTEX_ATTRIB_ARRAY1_NV 0x8651
#define GL_VERTEX_ATTRIB_ARRAY2_NV 0x8652
#define GL_VERTEX_ATTRIB_ARRAY3_NV 0x8653
#define GL_VERTEX_ATTRIB_ARRAY4_NV 0x8654
#define GL_VERTEX_ATTRIB_ARRAY5_NV 0x8655
#define GL_VERTEX_ATTRIB_ARRAY6_NV 0x8656
#define GL_VERTEX_ATTRIB_ARRAY7_NV 0x8657
#define GL_VERTEX_ATTRIB_ARRAY8_NV 0x8658
#define GL_VERTEX_ATTRIB_ARRAY9_NV 0x8659
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
#define GL_VERTEX_ID_NV 0x8C7B
#define GL_VERTEX_PROGRAM_ARB 0x8620
#define GL_VERTEX_PROGRAM_BINDING_NV 0x864A
#define GL_VERTEX_PROGRAM_NV 0x8620
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
#define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0x8643
#define GL_VERTEX_SHADER 0x8B31
#define GL_VERTEX_SHADER_ARB 0x8B31
#define GL_VERTEX_STATE_PROGRAM_NV 0x8621
#define GL_VIEWPORT 0x0BA2
#define GL_WAIT_FAILED 0x911D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
#define GL_WRITE_ONLY 0x88B9
#define GL_WRITE_ONLY_ARB 0x88B9
#define GL_XOR 0x1506
#define GL_ZERO 0
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_ACTIVE_PROGRAM_EXT 0x8259
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_ALL_SHADER_BITS_EXT 0xFFFFFFFF
#define GL_ALPHA16F_EXT 0x881C
#define GL_ALPHA32F_EXT 0x8816
#define GL_ALPHA8_EXT 0x803C
#define GL_ALPHA_BITS 0x0D55
#define GL_ALREADY_SIGNALED_APPLE 0x911A
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_ARRAY_SIZE 0x92FB
#define GL_ARRAY_STRIDE 0x92FE
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_BGRA8_EXT 0x93A1
#define GL_BLEND_OVERLAP_NV 0x9281
#define GL_BLEND_PREMULTIPLIED_SRC_NV 0x9280
#define GL_BLOCK_INDEX 0x92FD
#define GL_BLUE_BITS 0x0D54
#define GL_BLUE_NV 0x1905
#define GL_BUFFER 0x82E0
#define GL_BUFFER_ACCESS_OES 0x88BB
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_BUFFER_KHR 0x82E0
#define GL_BUFFER_MAPPED_OES 0x88BC
#define GL_BUFFER_MAP_POINTER_OES 0x88BD
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_CLAMP_TO_BORDER_EXT 0x812D
#define GL_CLAMP_TO_BORDER_OES 0x812D
#define GL_COLORBURN 0x929A
#define GL_COLORBURN_KHR 0x929A
#define GL_COLORBURN_NV 0x929A
#define GL_COLORDODGE 0x9299
#define GL_COLORDODGE_KHR 0x9299
#define GL_COLORDODGE_NV 0x9299
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_RGBA_ASTC_10x10 0x93BB
#define GL_COMPRESSED_RGBA_ASTC_10x5 0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x6 0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x8 0x93BA
#define GL_COMPRESSED_RGBA_ASTC_12x10 0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x12 0x93BD
#define GL_COMPRESSED_RGBA_ASTC_4x4 0x93B0
#define GL_COMPRESSED_RGBA_ASTC_5x4 0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x5 0x93B2
#define GL_COMPRESSED_RGBA_ASTC_6x5 0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x6 0x93B4
#define GL_COMPRESSED_RGBA_ASTC_8x5 0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x6 0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x8 0x93B7
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 0x93DD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPUTE_SHADER 0x91B9
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_CONDITION_SATISFIED_APPLE 0x911C
#define GL_CONJOINT_NV 0x9284
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_CONTEXT_FLAG_DEBUG_BIT_KHR 0x00000002
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
#define GL_CONTEXT_LOST 0x0507
#define GL_CONTEXT_LOST_KHR 0x0507
#define GL_CONTEXT_ROBUST_ACCESS_EXT 0x90F3
#define GL_CONTEXT_ROBUST_ACCESS_KHR 0x90F3
#define GL_CONTRAST_NV 0x92A1
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_COPY_READ_BUFFER_NV 0x8F36
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_COPY_WRITE_BUFFER_NV 0x8F37
#define GL_CURRENT_QUERY_EXT 0x8865
#define GL_DARKEN 0x9297
#define GL_DARKEN_KHR 0x9297
#define GL_DARKEN_NV 0x9297
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_FUNCTION_KHR 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_CALLBACK_USER_PARAM_KHR 0x8245
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_DEBUG_GROUP_STACK_DEPTH_KHR 0x826D
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_KHR 0x9145
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR 0x8243
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_DEBUG_OUTPUT_KHR 0x92E0
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR 0x8242
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_HIGH_KHR 0x9146
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_SEVERITY_LOW_KHR 0x9148
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_KHR 0x9147
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_DEBUG_SEVERITY_NOTIFICATION_KHR 0x826B
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_API_KHR 0x8246
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_APPLICATION_KHR 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_SOURCE_OTHER_KHR 0x824B
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_SHADER_COMPILER_KHR 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_THIRD_PARTY_KHR 0x8249
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR 0x8247
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR 0x824D
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_ERROR_KHR 0x824C
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_MARKER_KHR 0x8268
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_DEBUG_TYPE_OTHER_KHR 0x8251
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_PERFORMANCE_KHR 0x8250
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_TYPE_POP_GROUP_KHR 0x826A
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PORTABILITY_KHR 0x824F
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_PUSH_GROUP_KHR 0x8269
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR 0x824E
#define GL_DEPTH_BITS 0x0D56
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_DIFFERENCE 0x929E
#define GL_DIFFERENCE_KHR 0x929E
#define GL_DIFFERENCE_NV 0x929E
#define GL_DISJOINT_NV 0x9283
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_DRAW_BUFFER0_EXT 0x8825
#define GL_DRAW_BUFFER10_EXT 0x882F
#define GL_DRAW_BUFFER11_EXT 0x8830
#define GL_DRAW_BUFFER12_EXT 0x8831
#define GL_DRAW_BUFFER13_EXT 0x8832
#define GL_DRAW_BUFFER14_EXT 0x8833
#define GL_DRAW_BUFFER15_EXT 0x8834
#define GL_DRAW_BUFFER1_EXT 0x8826
#define GL_DRAW_BUFFER2_EXT 0x8827
#define GL_DRAW_BUFFER3_EXT 0x8828
#define GL_DRAW_BUFFER4_EXT 0x8829
#define GL_DRAW_BUFFER5_EXT 0x882A
#define GL_DRAW_BUFFER6_EXT 0x882B
#define GL_DRAW_BUFFER7_EXT 0x882C
#define GL_DRAW_BUFFER8_EXT 0x882D
#define GL_DRAW_BUFFER9_EXT 0x882E
#define GL_DRAW_FRAMEBUFFER_BINDING_NV 0x8CA6
#define GL_DRAW_FRAMEBUFFER_NV 0x8CA9
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_DST_ATOP_NV 0x928F
#define GL_DST_IN_NV 0x928B
#define GL_DST_NV 0x9287
#define GL_DST_OUT_NV 0x928D
#define GL_DST_OVER_NV 0x9289
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_EXCLUSION 0x92A0
#define GL_EXCLUSION_KHR 0x92A0
#define GL_EXCLUSION_NV 0x92A0
#define GL_FIRST_VERTEX_CONVENTION_OES 0x8E4D
#define GL_FIXED 0x140C
#define GL_FLOAT_MAT2x3_NV 0x8B65
#define GL_FLOAT_MAT2x4_NV 0x8B66
#define GL_FLOAT_MAT3x2_NV 0x8B67
#define GL_FLOAT_MAT3x4_NV 0x8B68
#define GL_FLOAT_MAT4x2_NV 0x8B69
#define GL_FLOAT_MAT4x3_NV 0x8B6A
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_FRACTIONAL_EVEN_EXT 0x8E7C
#define GL_FRACTIONAL_EVEN_OES 0x8E7C
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRACTIONAL_ODD_EXT 0x8E7B
#define GL_FRACTIONAL_ODD_OES 0x8E7B
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_FRAGMENT_SHADER_BIT_EXT 0x00000002
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT 0x8D6C
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT 0x9312
#define GL_FRAMEBUFFER_DEFAULT_LAYERS_OES 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV 0x8D56
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_GEOMETRY_LINKED_INPUT_TYPE_EXT 0x8917
#define GL_GEOMETRY_LINKED_INPUT_TYPE_OES 0x8917
#define GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT 0x8918
#define GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES 0x8918
#define GL_GEOMETRY_LINKED_VERTICES_OUT_EXT 0x8916
#define GL_GEOMETRY_LINKED_VERTICES_OUT_OES 0x8916
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_GEOMETRY_SHADER_BIT_EXT 0x00000004
#define GL_GEOMETRY_SHADER_BIT_OES 0x00000004
#define GL_GEOMETRY_SHADER_EXT 0x8DD9
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_GEOMETRY_SHADER_INVOCATIONS_EXT 0x887F
#define GL_GEOMETRY_SHADER_INVOCATIONS_OES 0x887F
#define GL_GEOMETRY_SHADER_OES 0x8DD9
#define GL_GPU_DISJOINT_EXT 0x8FBB
#define GL_GREEN_BITS 0x0D53
#define GL_GREEN_NV 0x1904
#define GL_GUILTY_CONTEXT_RESET 0x8253
#define GL_GUILTY_CONTEXT_RESET_EXT 0x8253
#define GL_GUILTY_CONTEXT_RESET_KHR 0x8253
#define GL_HARDLIGHT 0x929B
#define GL_HARDLIGHT_KHR 0x929B
#define GL_HARDLIGHT_NV 0x929B
#define GL_HARDMIX_NV 0x92A9
#define GL_HIGH_FLOAT 0x8DF2
#define GL_HIGH_INT 0x8DF5
#define GL_HSL_COLOR 0x92AF
#define GL_HSL_COLOR_KHR 0x92AF
#define GL_HSL_COLOR_NV 0x92AF
#define GL_HSL_HUE 0x92AD
#define GL_HSL_HUE_KHR 0x92AD
#define GL_HSL_HUE_NV 0x92AD
#define GL_HSL_LUMINOSITY 0x92B0
#define GL_HSL_LUMINOSITY_KHR 0x92B0
#define GL_HSL_LUMINOSITY_NV 0x92B0
#define GL_HSL_SATURATION 0x92AE
#define GL_HSL_SATURATION_KHR 0x92AE
#define GL_HSL_SATURATION_NV 0x92AE
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_BUFFER_EXT 0x9051
#define GL_IMAGE_BUFFER_OES 0x9051
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#define GL_INNOCENT_CONTEXT_RESET_EXT 0x8254
#define GL_INNOCENT_CONTEXT_RESET_KHR 0x8254
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_BUFFER_EXT 0x905C
#define GL_INT_IMAGE_BUFFER_OES 0x905C
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910C
#define GL_INT_SAMPLER_BUFFER_OES 0x8DD0
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_INVERT_OVG_NV 0x92B4
#define GL_INVERT_RGB_NV 0x92A3
#define GL_ISOLINES 0x8E7A
#define GL_ISOLINES_EXT 0x8E7A
#define GL_ISOLINES_OES 0x8E7A
#define GL_IS_PER_PATCH 0x92E7
#define GL_IS_PER_PATCH_EXT 0x92E7
#define GL_IS_PER_PATCH_OES 0x92E7
#define GL_IS_ROW_MAJOR 0x9300
#define GL_LAST_VERTEX_CONVENTION_OES 0x8E4E
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_LAYER_PROVOKING_VERTEX_EXT 0x825E
#define GL_LAYER_PROVOKING_VERTEX_OES 0x825E
#define GL_LIGHTEN 0x9298
#define GL_LIGHTEN_KHR 0x9298
#define GL_LIGHTEN_NV 0x9298
#define GL_LINEARBURN_NV 0x92A5
#define GL_LINEARDODGE_NV 0x92A4
#define GL_LINEARLIGHT_NV 0x92A7
#define GL_LINES_ADJACENCY_OES 0x000A
#define GL_LINE_STRIP_ADJACENCY_OES 0x000B
#define GL_LOCATION 0x930E
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_EXT 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_KHR 0x8252
#define GL_LOW_FLOAT 0x8DF0
#define GL_LOW_INT 0x8DF3
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE16F_EXT 0x881E
#define GL_LUMINANCE32F_EXT 0x8818
#define GL_LUMINANCE8_ALPHA8_EXT 0x8045
#define GL_LUMINANCE8_EXT 0x8040
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_LUMINANCE_ALPHA16F_EXT 0x881F
#define GL_LUMINANCE_ALPHA32F_EXT 0x8819
#define GL_MAP_FLUSH_EXPLICIT_BIT_EXT 0x0010
#define GL_MAP_INVALIDATE_BUFFER_BIT_EXT 0x0008
#define GL_MAP_INVALIDATE_RANGE_BIT_EXT 0x0004
#define GL_MAP_READ_BIT_EXT 0x0001
#define GL_MAP_UNSYNCHRONIZED_BIT_EXT 0x0020
#define GL_MAP_WRITE_BIT_EXT 0x0002
#define GL_MATRIX_STRIDE 0x92FF
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8A32
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES 0x8A32
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT 0x8E1E
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT 0x8E1F
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES 0x8E1F
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR 0x826C
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_KHR 0x9144
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_KHR 0x9143
#define GL_MAX_DRAW_BUFFERS_EXT 0x8824
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_LAYERS_EXT 0x9317
#define GL_MAX_FRAMEBUFFER_LAYERS_OES 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT 0x92D5
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES 0x92D5
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT 0x92CF
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES 0x92CF
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT 0x90CD
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES 0x90CD
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT 0x9123
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES 0x8DE0
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT 0x90D7
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES 0x90D7
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES 0x8C29
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES 0x8DE1
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT 0x8A2C
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES 0x8A2C
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES 0x8DDF
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_MAX_LABEL_LENGTH_KHR 0x82E8
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_PATCH_VERTICES_EXT 0x8E7D
#define GL_MAX_PATCH_VERTICES_OES 0x8E7D
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_MAX_SAMPLES_NV 0x8D57
#define GL_MAX_SERVER_WAIT_TIMEOUT_APPLE 0x9111
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT 0x92D3
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES 0x92D3
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT 0x92CD
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES 0x92CD
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT 0x90CB
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES 0x90CB
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT 0x886C
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES 0x886C
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT 0x8E83
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES 0x8E83
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT 0x90D8
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES 0x90D8
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT 0x8E81
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES 0x8E81
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT 0x8E85
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES 0x8E85
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT 0x8E7F
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES 0x8E7F
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT 0x92D4
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES 0x92D4
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT 0x92CE
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES 0x92CE
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT 0x90CC
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES 0x90CC
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT 0x886D
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES 0x886D
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT 0x8E86
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES 0x8E86
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT 0x90D9
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES 0x90D9
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT 0x8E82
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES 0x8E82
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT 0x8E80
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES 0x8E80
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_GEN_LEVEL_EXT 0x8E7E
#define GL_MAX_TESS_GEN_LEVEL_OES 0x8E7E
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TESS_PATCH_COMPONENTS_EXT 0x8E84
#define GL_MAX_TESS_PATCH_COMPONENTS_OES 0x8E84
#define GL_MAX_TEXTURE_BUFFER_SIZE_OES 0x8C2B
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VIEWPORTS_NV 0x825B
#define GL_MAX_VIEWPORTS_OES 0x825B
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_MEDIUM_INT 0x8DF4
#define GL_MINUS_CLAMPED_NV 0x92B3
#define GL_MINUS_NV 0x929F
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIN_SAMPLE_SHADING_VALUE_OES 0x8C37
#define GL_MULTIPLY 0x9294
#define GL_MULTIPLY_KHR 0x9294
#define GL_MULTIPLY_NV 0x9294
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY 0x9382
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE 0x9381
#define GL_NAME_LENGTH 0x92F9
#define GL_NO_RESET_NOTIFICATION 0x8261
#define GL_NO_RESET_NOTIFICATION_EXT 0x8261
#define GL_NO_RESET_NOTIFICATION_KHR 0x8261
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_NUM_PROGRAM_BINARY_FORMATS_OES 0x87FE
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_OBJECT_TYPE_APPLE 0x9112
#define GL_OFFSET 0x92FC
#define GL_OVERLAY 0x9296
#define GL_OVERLAY_KHR 0x9296
#define GL_OVERLAY_NV 0x9296
#define GL_PATCHES 0x000E
#define GL_PATCHES_EXT 0x000E
#define GL_PATCHES_OES 0x000E
#define GL_PATCH_VERTICES 0x8E72
#define GL_PATCH_VERTICES_EXT 0x8E72
#define GL_PATCH_VERTICES_OES 0x8E72
#define GL_PINLIGHT_NV 0x92A8
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_PLUS_CLAMPED_ALPHA_NV 0x92B2
#define GL_PLUS_CLAMPED_NV 0x92B1
#define GL_PLUS_DARKER_NV 0x9292
#define GL_PLUS_NV 0x9291
#define GL_PRIMITIVES_GENERATED_OES 0x8C87
#define GL_PRIMITIVE_BOUNDING_BOX 0x92BE
#define GL_PRIMITIVE_BOUNDING_BOX_EXT 0x92BE
#define GL_PRIMITIVE_BOUNDING_BOX_OES 0x92BE
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES 0x8221
#define GL_PROGRAM 0x82E2
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_PROGRAM_BINARY_FORMATS_OES 0x87FF
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_PROGRAM_BINARY_LENGTH_OES 0x8741
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_KHR 0x82E2
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_PROGRAM_PIPELINE_BINDING_EXT 0x825A
#define GL_PROGRAM_PIPELINE_KHR 0x82E4
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_PROGRAM_SEPARABLE_EXT 0x8258
#define GL_QUADS 0x0007
#define GL_QUADS_EXT 0x0007
#define GL_QUADS_OES 0x0007
#define GL_QUERY 0x82E3
#define GL_QUERY_COUNTER_BITS_EXT 0x8864
#define GL_QUERY_KHR 0x82E3
#define GL_QUERY_RESULT_AVAILABLE_EXT 0x8867
#define GL_QUERY_RESULT_EXT 0x8866
#define GL_R16F_EXT 0x822D
#define GL_R32F_EXT 0x822E
#define GL_R8_EXT 0x8229
#define GL_READ_FRAMEBUFFER_BINDING_NV 0x8CAA
#define GL_READ_FRAMEBUFFER_NV 0x8CA8
#define GL_RED_BITS 0x0D52
#define GL_RED_NV 0x1903
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_GEOMETRY_SHADER_EXT 0x9309
#define GL_REFERENCED_BY_GEOMETRY_SHADER_OES 0x9309
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT 0x9307
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT 0x9308
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES 0x9308
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_RENDERBUFFER_SAMPLES_NV 0x8CAB
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_EXT 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_KHR 0x8256
#define GL_RG16F_EXT 0x822F
#define GL_RG32F_EXT 0x8230
#define GL_RG8_EXT 0x822B
#define GL_RGB10_A2UI 0x906F
#define GL_RGB10_A2_EXT 0x8059
#define GL_RGB10_EXT 0x8052
#define GL_RGB16F_EXT 0x881B
#define GL_RGB32F_EXT 0x8815
#define GL_RGB565 0x8D62
#define GL_RGBA16F_EXT 0x881A
#define GL_RGBA32F_EXT 0x8814
#define GL_SAMPLER 0x82E6
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910B
#define GL_SAMPLER_BINDING 0x8919
#define GL_SAMPLER_BUFFER_OES 0x8DC2
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_SAMPLER_KHR 0x82E6
#define GL_SAMPLE_SHADING 0x8C36
#define GL_SAMPLE_SHADING_OES 0x8C36
#define GL_SCREEN 0x9295
#define GL_SCREEN_KHR 0x9295
#define GL_SCREEN_NV 0x9295
#define GL_SHADER 0x82E1
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_SHADER_COMPILER 0x8DFA
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_SHADER_KHR 0x82E1
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SIGNALED_APPLE 0x9119
#define GL_SOFTLIGHT 0x929C
#define GL_SOFTLIGHT_KHR 0x929C
#define GL_SOFTLIGHT_NV 0x929C
#define GL_SRC_ATOP_NV 0x928E
#define GL_SRC_IN_NV 0x928A
#define GL_SRC_NV 0x9286
#define GL_SRC_OUT_NV 0x928C
#define GL_SRC_OVER_NV 0x9288
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_OVERFLOW_KHR 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STACK_UNDERFLOW_KHR 0x0504
#define GL_STENCIL_BITS 0x0D57
#define GL_SYNC_CONDITION_APPLE 0x9113
#define GL_SYNC_FENCE_APPLE 0x9116
#define GL_SYNC_FLAGS_APPLE 0x9115
#define GL_SYNC_FLUSH_COMMANDS_BIT_APPLE 0x00000001
#define GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE 0x9117
#define GL_SYNC_OBJECT_APPLE 0x8A53
#define GL_SYNC_STATUS_APPLE 0x9114
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_CONTROL_OUTPUT_VERTICES_EXT 0x8E75
#define GL_TESS_CONTROL_OUTPUT_VERTICES_OES 0x8E75
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_CONTROL_SHADER_BIT_EXT 0x00000008
#define GL_TESS_CONTROL_SHADER_BIT_OES 0x00000008
#define GL_TESS_CONTROL_SHADER_EXT 0x8E88
#define GL_TESS_CONTROL_SHADER_OES 0x8E88
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_TESS_EVALUATION_SHADER_BIT_EXT 0x00000010
#define GL_TESS_EVALUATION_SHADER_BIT_OES 0x00000010
#define GL_TESS_EVALUATION_SHADER_EXT 0x8E87
#define GL_TESS_EVALUATION_SHADER_OES 0x8E87
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_MODE_EXT 0x8E76
#define GL_TESS_GEN_MODE_OES 0x8E76
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_TESS_GEN_POINT_MODE_EXT 0x8E79
#define GL_TESS_GEN_POINT_MODE_OES 0x8E79
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_SPACING_EXT 0x8E77
#define GL_TESS_GEN_SPACING_OES 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TESS_GEN_VERTEX_ORDER_EXT 0x8E78
#define GL_TESS_GEN_VERTEX_ORDER_OES 0x8E78
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES 0x9102
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES 0x9105
#define GL_TEXTURE_BINDING_BUFFER_OES 0x8C2C
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_TEXTURE_BORDER_COLOR_EXT 0x1004
#define GL_TEXTURE_BORDER_COLOR_OES 0x1004
#define GL_TEXTURE_BUFFER_BINDING 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING_EXT 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING_OES 0x8C2A
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES 0x8C2D
#define GL_TEXTURE_BUFFER_OES 0x8C2A
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT 0x919F
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES 0x919F
#define GL_TEXTURE_BUFFER_OFFSET_EXT 0x919D
#define GL_TEXTURE_BUFFER_OFFSET_OES 0x919D
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_BUFFER_SIZE_EXT 0x919E
#define GL_TEXTURE_BUFFER_SIZE_OES 0x919E
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#define GL_TEXTURE_IMMUTABLE_FORMAT_EXT 0x912F
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_TIMEOUT_EXPIRED_APPLE 0x911B
#define GL_TIMEOUT_IGNORED_APPLE 0xFFFFFFFFFFFFFFFF
#define GL_TIMESTAMP_EXT 0x8E28
#define GL_TIME_ELAPSED_EXT 0x88BF
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_TRIANGLES_ADJACENCY_OES 0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY_OES 0x000D
#define GL_TYPE 0x92FA
#define GL_UNCORRELATED_NV 0x9282
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_UNDEFINED_VERTEX_EXT 0x8260
#define GL_UNDEFINED_VERTEX_OES 0x8260
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_EXT 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_KHR 0x8255
#define GL_UNSIGNALED_APPLE 0x9118
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT 0x9067
#define GL_UNSIGNED_INT_IMAGE_BUFFER_OES 0x9067
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910D
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_OES 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_VERTEX_ARRAY 0x8074
#define GL_VERTEX_ARRAY_BINDING_OES 0x85B5
#define GL_VERTEX_ARRAY_KHR 0x8074
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV 0x88FE
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_VERTEX_SHADER_BIT_EXT 0x00000001
#define GL_VIEWPORT_BOUNDS_RANGE_NV 0x825D
#define GL_VIEWPORT_BOUNDS_RANGE_OES 0x825D
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV 0x825F
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES 0x825F
#define GL_VIEWPORT_SUBPIXEL_BITS_NV 0x825C
#define GL_VIEWPORT_SUBPIXEL_BITS_OES 0x825C
#define GL_VIVIDLIGHT_NV 0x92A6
#define GL_WAIT_FAILED_APPLE 0x911D
#define GL_WRITE_ONLY_OES 0x88B9
#define GL_XOR_NV 0x1506


#ifndef __khrplatform_h_
#define __khrplatform_h_

/*
** Copyright (c) 2008-2018 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/

/* Khronos platform-specific types and definitions.
 *
 * The master copy of khrplatform.h is maintained in the Khronos EGL
 * Registry repository at https://github.com/KhronosGroup/EGL-Registry
 * The last semantic modification to khrplatform.h was at commit ID:
 *      67a3e0864c2d75ea5287b9f3d2eb74a745936692
 *
 * Adopters may modify this file to suit their platform. Adopters are
 * encouraged to submit platform specific modifications to the Khronos
 * group so that they can be included in future versions of this file.
 * Please submit changes by filing pull requests or issues on
 * the EGL Registry repository linked above.
 *
 *
 * See the Implementer's Guidelines for information about where this file
 * should be located on your system and for more details of its use:
 *    http://www.khronos.org/registry/implementers_guide.pdf
 *
 * This file should be included as
 *        #include <KHR/khrplatform.h>
 * by Khronos client API header files that use its types and defines.
 *
 * The types in khrplatform.h should only be used to define API-specific types.
 *
 * Types defined in khrplatform.h:
 *    khronos_int8_t              signed   8  bit
 *    khronos_uint8_t             unsigned 8  bit
 *    khronos_int16_t             signed   16 bit
 *    khronos_uint16_t            unsigned 16 bit
 *    khronos_int32_t             signed   32 bit
 *    khronos_uint32_t            unsigned 32 bit
 *    khronos_int64_t             signed   64 bit
 *    khronos_uint64_t            unsigned 64 bit
 *    khronos_intptr_t            signed   same number of bits as a pointer
 *    khronos_uintptr_t           unsigned same number of bits as a pointer
 *    khronos_ssize_t             signed   size
 *    khronos_usize_t             unsigned size
 *    khronos_float_t             signed   32 bit floating point
 *    khronos_time_ns_t           unsigned 64 bit time in nanoseconds
 *    khronos_utime_nanoseconds_t unsigned time interval or absolute time in
 *                                         nanoseconds
 *    khronos_stime_nanoseconds_t signed time interval in nanoseconds
 *    khronos_boolean_enum_t      enumerated boolean type. This should
 *      only be used as a base type when a client API's boolean type is
 *      an enum. Client APIs which use an integer or other type for
 *      booleans cannot use this as the base type for their boolean.
 *
 * Tokens defined in khrplatform.h:
 *
 *    KHRONOS_FALSE, KHRONOS_TRUE Enumerated boolean false/true values.
 *
 *    KHRONOS_SUPPORT_INT64 is 1 if 64 bit integers are supported; otherwise 0.
 *    KHRONOS_SUPPORT_FLOAT is 1 if floats are supported; otherwise 0.
 *
 * Calling convention macros defined in this file:
 *    KHRONOS_APICALL
 *    KHRONOS_GLAD_API_PTR
 *    KHRONOS_APIATTRIBUTES
 *
 * These may be used in function prototypes as:
 *
 *      KHRONOS_APICALL void KHRONOS_GLAD_API_PTR funcname(
 *                                  int arg1,
 *                                  int arg2) KHRONOS_APIATTRIBUTES;
 */

#if defined(__SCITECH_SNAP__) && !defined(KHRONOS_STATIC)
#   define KHRONOS_STATIC 1
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APICALL
 *-------------------------------------------------------------------------
 * This precedes the return type of the function in the function prototype.
 */
#if defined(KHRONOS_STATIC)
    /* If the preprocessor constant KHRONOS_STATIC is defined, make the
     * header compatible with static linking. */
#   define KHRONOS_APICALL
#elif defined(_WIN32)
#   define KHRONOS_APICALL __declspec(dllimport)
#elif defined (__SYMBIAN32__)
#   define KHRONOS_APICALL IMPORT_C
#elif defined(__ANDROID__)
#   define KHRONOS_APICALL __attribute__((visibility("default")))
#else
#   define KHRONOS_APICALL
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_GLAD_API_PTR
 *-------------------------------------------------------------------------
 * This follows the return type of the function  and precedes the function
 * name in the function prototype.
 */
#if defined(_WIN32) && !defined(_WIN32_WCE) && !defined(__SCITECH_SNAP__)
    /* Win32 but not WinCE */
#   define KHRONOS_GLAD_API_PTR __stdcall
#else
#   define KHRONOS_GLAD_API_PTR
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APIATTRIBUTES
 *-------------------------------------------------------------------------
 * This follows the closing parenthesis of the function prototype arguments.
 */
#if defined (__ARMCC_2__)
#define KHRONOS_APIATTRIBUTES __softfp
#else
#define KHRONOS_APIATTRIBUTES
#endif

/*-------------------------------------------------------------------------
 * basic type definitions
 *-----------------------------------------------------------------------*/
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || defined(__GNUC__) || defined(__SCO__) || defined(__USLC__)


/*
 * Using <stdint.h>
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1
/*
 * To support platform where unsigned long cannot be used interchangeably with
 * inptr_t (e.g. CHERI-extended ISAs), we can use the stdint.h intptr_t.
 * Ideally, we could just use (u)intptr_t everywhere, but this could result in
 * ABI breakage if khronos_uintptr_t is changed from unsigned long to
 * unsigned long long or similar (this results in different C++ name mangling).
 * To avoid changes for existing platforms, we restrict usage of intptr_t to
 * platforms where the size of a pointer is larger than the size of long.
 */
#if defined(__SIZEOF_LONG__) && defined(__SIZEOF_POINTER__)
#if __SIZEOF_POINTER__ > __SIZEOF_LONG__
#define KHRONOS_USE_INTPTR_T
#endif
#endif

#elif defined(__VMS ) || defined(__sgi)

/*
 * Using <inttypes.h>
 */
#include <inttypes.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(_WIN32) && !defined(__SCITECH_SNAP__)

/*
 * Win32
 */
typedef __int32                 khronos_int32_t;
typedef unsigned __int32        khronos_uint32_t;
typedef __int64                 khronos_int64_t;
typedef unsigned __int64        khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__sun__) || defined(__digital__)

/*
 * Sun or Digital
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#if defined(__arch64__) || defined(_LP64)
typedef long int                khronos_int64_t;
typedef unsigned long int       khronos_uint64_t;
#else
typedef long long int           khronos_int64_t;
typedef unsigned long long int  khronos_uint64_t;
#endif /* __arch64__ */
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif 0

/*
 * Hypothetical platform with no float or int64 support
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#define KHRONOS_SUPPORT_INT64   0
#define KHRONOS_SUPPORT_FLOAT   0

#else

/*
 * Generic fallback
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#endif


/*
 * Types that are (so far) the same on all platforms
 */
typedef signed   char          khronos_int8_t;
typedef unsigned char          khronos_uint8_t;
typedef signed   short int     khronos_int16_t;
typedef unsigned short int     khronos_uint16_t;

/*
 * Types that differ between LLP64 and LP64 architectures - in LLP64,
 * pointers are 64 bits, but 'long' is still 32 bits. Win64 appears
 * to be the only LLP64 architecture in current use.
 */
#ifdef KHRONOS_USE_INTPTR_T
typedef intptr_t               khronos_intptr_t;
typedef uintptr_t              khronos_uintptr_t;
#elif defined(_WIN64)
typedef signed   long long int khronos_intptr_t;
typedef unsigned long long int khronos_uintptr_t;
#else
typedef signed   long  int     khronos_intptr_t;
typedef unsigned long  int     khronos_uintptr_t;
#endif

#if defined(_WIN64)
typedef signed   long long int khronos_ssize_t;
typedef unsigned long long int khronos_usize_t;
#else
typedef signed   long  int     khronos_ssize_t;
typedef unsigned long  int     khronos_usize_t;
#endif

#if KHRONOS_SUPPORT_FLOAT
/*
 * Float type
 */
typedef          float         khronos_float_t;
#endif

#if KHRONOS_SUPPORT_INT64
/* Time types
 *
 * These types can be used to represent a time interval in nanoseconds or
 * an absolute Unadjusted System Time.  Unadjusted System Time is the number
 * of nanoseconds since some arbitrary system event (e.g. since the last
 * time the system booted).  The Unadjusted System Time is an unsigned
 * 64 bit value that wraps back to 0 every 584 years.  Time intervals
 * may be either signed or unsigned.
 */
typedef khronos_uint64_t       khronos_utime_nanoseconds_t;
typedef khronos_int64_t        khronos_stime_nanoseconds_t;
#endif

/*
 * Dummy value used to pad enum types to 32 bits.
 */
#ifndef KHRONOS_MAX_ENUM
#define KHRONOS_MAX_ENUM 0x7FFFFFFF
#endif

/*
 * Enumerated boolean type
 *
 * Values other than zero should be considered to be true.  Therefore
 * comparisons should not be made against KHRONOS_TRUE.
 */
typedef enum {
    KHRONOS_FALSE = 0,
    KHRONOS_TRUE  = 1,
    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = KHRONOS_MAX_ENUM
} khronos_boolean_enum_t;

#endif /* __khrplatform_h_ */
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef khronos_int8_t GLbyte;
typedef khronos_uint8_t GLubyte;
typedef khronos_int16_t GLshort;
typedef khronos_uint16_t GLushort;
typedef int GLint;
typedef unsigned int GLuint;
typedef khronos_int32_t GLclampx;
typedef int GLsizei;
typedef khronos_float_t GLfloat;
typedef khronos_float_t GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef khronos_uint16_t GLhalf;
typedef khronos_uint16_t GLhalfARB;
typedef khronos_int32_t GLfixed;
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_intptr_t GLintptr;
#else
typedef khronos_intptr_t GLintptr;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_intptr_t GLintptrARB;
#else
typedef khronos_intptr_t GLintptrARB;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_ssize_t GLsizeiptr;
#else
typedef khronos_ssize_t GLsizeiptr;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_ssize_t GLsizeiptrARB;
#else
typedef khronos_ssize_t GLsizeiptrARB;
#endif
typedef khronos_int64_t GLint64;
typedef khronos_int64_t GLint64EXT;
typedef khronos_uint64_t GLuint64;
typedef khronos_uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void (GLAD_API_PTR *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (GLAD_API_PTR *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (GLAD_API_PTR *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (GLAD_API_PTR *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void (GLAD_API_PTR *GLVULKANPROCNV)(void);


#define GL_VERSION_1_0 1
#define GL_VERSION_1_1 1
#define GL_VERSION_1_2 1
#define GL_VERSION_1_3 1
#define GL_VERSION_1_4 1
#define GL_VERSION_1_5 1
#define GL_VERSION_2_0 1
#define GL_VERSION_2_1 1
#define GL_VERSION_3_0 1
#define GL_VERSION_3_1 1
#define GL_VERSION_3_2 1
#define GL_ES_VERSION_2_0 1
#define GL_ES_VERSION_3_0 1
#define GL_ES_VERSION_3_1 1
#define GL_ES_VERSION_3_2 1
#define GL_APPLE_flush_buffer_range 1
#define GL_APPLE_vertex_array_object 1
#define GL_ARB_color_buffer_float 1
#define GL_ARB_copy_buffer 1
#define GL_ARB_draw_buffers 1
#define GL_ARB_draw_elements_base_vertex 1
#define GL_ARB_draw_instanced 1
#define GL_ARB_framebuffer_object 1
#define GL_ARB_geometry_shader4 1
#define GL_ARB_imaging 1
#define GL_ARB_map_buffer_range 1
#define GL_ARB_multisample 1
#define GL_ARB_multitexture 1
#define GL_ARB_occlusion_query 1
#define GL_ARB_point_parameters 1
#define GL_ARB_provoking_vertex 1
#define GL_ARB_shader_objects 1
#define GL_ARB_sync 1
#define GL_ARB_texture_buffer_object 1
#define GL_ARB_texture_compression 1
#define GL_ARB_texture_multisample 1
#define GL_ARB_uniform_buffer_object 1
#define GL_ARB_vertex_array_object 1
#define GL_ARB_vertex_buffer_object 1
#define GL_ARB_vertex_program 1
#define GL_ARB_vertex_shader 1
#define GL_ATI_draw_buffers 1
#define GL_ATI_separate_stencil 1
#define GL_EXT_blend_color 1
#define GL_EXT_blend_equation_separate 1
#define GL_EXT_blend_func_separate 1
#define GL_EXT_blend_minmax 1
#define GL_EXT_copy_texture 1
#define GL_EXT_direct_state_access 1
#define GL_EXT_draw_buffers2 1
#define GL_EXT_draw_instanced 1
#define GL_EXT_draw_range_elements 1
#define GL_EXT_framebuffer_blit 1
#define GL_EXT_framebuffer_multisample 1
#define GL_EXT_framebuffer_object 1
#define GL_EXT_gpu_shader4 1
#define GL_EXT_multi_draw_arrays 1
#define GL_EXT_point_parameters 1
#define GL_EXT_provoking_vertex 1
#define GL_EXT_subtexture 1
#define GL_EXT_texture3D 1
#define GL_EXT_texture_array 1
#define GL_EXT_texture_buffer_object 1
#define GL_EXT_texture_integer 1
#define GL_EXT_texture_object 1
#define GL_EXT_transform_feedback 1
#define GL_EXT_vertex_array 1
#define GL_INGR_blend_func_separate 1
#define GL_NVX_conditional_render 1
#define GL_NV_conditional_render 1
#define GL_NV_explicit_multisample 1
#define GL_NV_geometry_program4 1
#define GL_NV_point_sprite 1
#define GL_NV_transform_feedback 1
#define GL_NV_vertex_program 1
#define GL_NV_vertex_program4 1
#define GL_SGIS_point_parameters 1
#define GL_ANGLE_instanced_arrays 1
#define GL_APPLE_sync 1
#define GL_EXT_copy_image 1
#define GL_EXT_disjoint_timer_query 1
#define GL_EXT_draw_buffers 1
#define GL_EXT_draw_buffers_indexed 1
#define GL_EXT_draw_elements_base_vertex 1
#define GL_EXT_geometry_shader 1
#define GL_EXT_instanced_arrays 1
#define GL_EXT_map_buffer_range 1
#define GL_EXT_multisampled_render_to_texture 1
#define GL_EXT_primitive_bounding_box 1
#define GL_EXT_robustness 1
#define GL_EXT_separate_shader_objects 1
#define GL_EXT_tessellation_shader 1
#define GL_EXT_texture_border_clamp 1
#define GL_EXT_texture_buffer 1
#define GL_EXT_texture_storage 1
#define GL_KHR_blend_equation_advanced 1
#define GL_KHR_debug 1
#define GL_KHR_robustness 1
#define GL_NV_blend_equation_advanced 1
#define GL_NV_copy_buffer 1
#define GL_NV_draw_instanced 1
#define GL_NV_framebuffer_blit 1
#define GL_NV_framebuffer_multisample 1
#define GL_NV_instanced_arrays 1
#define GL_NV_non_square_matrices 1
#define GL_NV_viewport_array 1
#define GL_OES_copy_image 1
#define GL_OES_draw_buffers_indexed 1
#define GL_OES_draw_elements_base_vertex 1
#define GL_OES_geometry_shader 1
#define GL_OES_get_program_binary 1
#define GL_OES_mapbuffer 1
#define GL_OES_primitive_bounding_box 1
#define GL_OES_sample_shading 1
#define GL_OES_tessellation_shader 1
#define GL_OES_texture_border_clamp 1
#define GL_OES_texture_buffer 1
#define GL_OES_texture_storage_multisample_2d_array 1
#define GL_OES_vertex_array_object 1
#define GL_OES_viewport_array 1


typedef void (GLAD_API_PTR *PFNGLACTIVETEXTUREPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLACTIVETEXTUREARBPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLACTIVEVARYINGNVPROC)(GLuint program, const GLchar * name);
typedef GLboolean (GLAD_API_PTR *PFNGLAREPROGRAMSRESIDENTNVPROC)(GLsizei n, const GLuint * programs, GLboolean * residences);
typedef GLboolean (GLAD_API_PTR *PFNGLARETEXTURESRESIDENTEXTPROC)(GLsizei n, const GLuint * textures, GLboolean * residences);
typedef void (GLAD_API_PTR *PFNGLARRAYELEMENTEXTPROC)(GLint i);
typedef void (GLAD_API_PTR *PFNGLATTACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB obj);
typedef void (GLAD_API_PTR *PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (GLAD_API_PTR *PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBEGINCONDITIONALRENDERNVPROC)(GLuint id, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBEGINCONDITIONALRENDERNVXPROC)(GLuint id);
typedef void (GLAD_API_PTR *PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBEGINQUERYARBPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
typedef void (GLAD_API_PTR *PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)(GLenum primitiveMode);
typedef void (GLAD_API_PTR *PFNGLBEGINTRANSFORMFEEDBACKNVPROC)(GLenum primitiveMode);
typedef void (GLAD_API_PTR *PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDATTRIBLOCATIONARBPROC)(GLhandleARB programObj, GLuint index, const GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERARBPROC)(GLenum target, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERBASEEXTPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERBASENVPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFEROFFSETEXTPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFEROFFSETNVPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERRANGEEXTPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERRANGENVPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDFRAGDATALOCATIONEXTPROC)(GLuint program, GLuint color, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
typedef void (GLAD_API_PTR *PFNGLBINDFRAMEBUFFEREXTPROC)(GLenum target, GLuint framebuffer);
typedef void (GLAD_API_PTR *PFNGLBINDMULTITEXTUREEXTPROC)(GLenum texunit, GLenum target, GLuint texture);
typedef void (GLAD_API_PTR *PFNGLBINDPROGRAMARBPROC)(GLenum target, GLuint program);
typedef void (GLAD_API_PTR *PFNGLBINDPROGRAMNVPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLBINDRENDERBUFFEREXTPROC)(GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTUREEXTPROC)(GLenum target, GLuint texture);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXARRAYPROC)(GLuint array);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXARRAYAPPLEPROC)(GLuint array);
typedef void (GLAD_API_PTR *PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLBLENDCOLOREXTPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEEXTPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEEXTPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEINGRPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAD_API_PTR *PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (GLAD_API_PTR *PFNGLBLITFRAMEBUFFEREXTPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (GLAD_API_PTR *PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void * data, GLenum usage);
typedef void (GLAD_API_PTR *PFNGLBUFFERDATAARBPROC)(GLenum target, GLsizeiptrARB size, const void * data, GLenum usage);
typedef void (GLAD_API_PTR *PFNGLBUFFERPARAMETERIAPPLEPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (GLAD_API_PTR *PFNGLBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)(GLenum target);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC)(GLuint framebuffer, GLenum target);
typedef void (GLAD_API_PTR *PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
typedef void (GLAD_API_PTR *PFNGLCLAMPCOLORARBPROC)(GLenum target, GLenum clamp);
typedef void (GLAD_API_PTR *PFNGLCLEARPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORIIEXTPROC)(GLint red, GLint green, GLint blue, GLint alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORIUIEXTPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHPROC)(GLdouble depth);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDBUFFERDATAEXTPROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARSTENCILPROC)(GLint s);
typedef void (GLAD_API_PTR *PFNGLCLIENTACTIVETEXTUREARBPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLCLIENTATTRIBDEFAULTEXTPROC)(GLbitfield mask);
typedef GLenum (GLAD_API_PTR *PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKINDEXEDEXTPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (GLAD_API_PTR *PFNGLCOLORPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLCOMPILESHADERPROC)(GLuint shader);
typedef void (GLAD_API_PTR *PFNGLCOMPILESHADERARBPROC)(GLhandleARB shaderObj);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE1DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE2DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE1DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE2DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE3DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef GLuint (GLAD_API_PTR *PFNGLCREATEPROGRAMPROC)(void);
typedef GLhandleARB (GLAD_API_PTR *PFNGLCREATEPROGRAMOBJECTARBPROC)(void);
typedef GLuint (GLAD_API_PTR *PFNGLCREATESHADERPROC)(GLenum type);
typedef GLhandleARB (GLAD_API_PTR *PFNGLCREATESHADEROBJECTARBPROC)(GLenum shaderType);
typedef void (GLAD_API_PTR *PFNGLCULLFACEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLDELETEBUFFERSARBPROC)(GLsizei n, const GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLDELETEFRAMEBUFFERSEXTPROC)(GLsizei n, const GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLDELETEOBJECTARBPROC)(GLhandleARB obj);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMSARBPROC)(GLsizei n, const GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMSNVPROC)(GLsizei n, const GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLDELETEQUERIESARBPROC)(GLsizei n, const GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLDELETERENDERBUFFERSEXTPROC)(GLsizei n, const GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLDELETESHADERPROC)(GLuint shader);
typedef void (GLAD_API_PTR *PFNGLDELETESYNCPROC)(GLsync sync);
typedef void (GLAD_API_PTR *PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLDELETETEXTURESEXTPROC)(GLsizei n, const GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLDELETEVERTEXARRAYSAPPLEPROC)(GLsizei n, const GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLDEPTHFUNCPROC)(GLenum func);
typedef void (GLAD_API_PTR *PFNGLDEPTHMASKPROC)(GLboolean flag);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
typedef void (GLAD_API_PTR *PFNGLDETACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB attachedObj);
typedef void (GLAD_API_PTR *PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (GLAD_API_PTR *PFNGLDISABLEPROC)(GLenum cap);
typedef void (GLAD_API_PTR *PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC)(GLenum array, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLECLIENTSTATEIEXTPROC)(GLenum array, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEINDEXEDEXTPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC)(GLuint vaobj, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXARRAYEXTPROC)(GLuint vaobj, GLenum array);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEIPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSEXTPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDARBPROC)(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDEXTPROC)(GLenum mode, GLint start, GLsizei count, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERPROC)(GLenum buf);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERSARBPROC)(GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERSATIPROC)(GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDARBPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDEXTPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSEXTPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGPOINTEREXTPROC)(GLsizei stride, GLsizei count, const GLboolean * pointer);
typedef void (GLAD_API_PTR *PFNGLENABLEPROC)(GLenum cap);
typedef void (GLAD_API_PTR *PFNGLENABLECLIENTSTATEINDEXEDEXTPROC)(GLenum array, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLECLIENTSTATEIEXTPROC)(GLenum array, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEINDEXEDEXTPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXARRAYATTRIBEXTPROC)(GLuint vaobj, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXARRAYEXTPROC)(GLuint vaobj, GLenum array);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEIPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENDCONDITIONALRENDERPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDCONDITIONALRENDERNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDCONDITIONALRENDERNVXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDQUERYPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLENDQUERYARBPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLENDTRANSFORMFEEDBACKPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDTRANSFORMFEEDBACKEXTPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDTRANSFORMFEEDBACKNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLEXECUTEPROGRAMNVPROC)(GLenum target, GLuint id, const GLfloat * params);
typedef GLsync (GLAD_API_PTR *PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLFINISHPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFLUSHPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)(GLenum target, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC)(GLuint framebuffer, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC)(GLuint framebuffer, GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERREADBUFFEREXTPROC)(GLuint framebuffer, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREEXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLFRONTFACEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLGENBUFFERSPROC)(GLsizei n, GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLGENBUFFERSARBPROC)(GLsizei n, GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLGENFRAMEBUFFERSEXTPROC)(GLsizei n, GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLGENPROGRAMSARBPROC)(GLsizei n, GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLGENPROGRAMSNVPROC)(GLsizei n, GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLGENQUERIESPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLGENQUERIESARBPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLGENRENDERBUFFERSEXTPROC)(GLsizei n, GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLGENTEXTURESPROC)(GLsizei n, GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLGENTEXTURESEXTPROC)(GLsizei n, GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLGENVERTEXARRAYSAPPLEPROC)(GLsizei n, GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLGENERATEMIPMAPPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLGENERATEMIPMAPEXTPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLGENERATEMULTITEXMIPMAPEXTPROC)(GLenum texunit, GLenum target);
typedef void (GLAD_API_PTR *PFNGLGENERATETEXTUREMIPMAPEXTPROC)(GLuint texture, GLenum target);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEATTRIBARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEVARYINGNVPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETATTACHEDOBJECTSARBPROC)(GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj);
typedef void (GLAD_API_PTR *PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
typedef GLint (GLAD_API_PTR *PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETATTRIBLOCATIONARBPROC)(GLhandleARB programObj, const GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANINDEXEDVEXTPROC)(GLenum target, GLuint index, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPOINTERVARBPROC)(GLenum target, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC)(GLenum texunit, GLenum target, GLint lod, void * img);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void * img);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)(GLenum target, GLint level, void * img);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC)(GLuint texture, GLenum target, GLint lod, void * img);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEINDEXEDVEXTPROC)(GLenum target, GLuint index, GLdouble * data);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEI_VEXTPROC)(GLenum pname, GLuint index, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble * data);
typedef GLenum (GLAD_API_PTR *PFNGLGETERRORPROC)(void);
typedef void (GLAD_API_PTR *PFNGLGETFLOATINDEXEDVEXTPROC)(GLenum target, GLuint index, GLfloat * data);
typedef void (GLAD_API_PTR *PFNGLGETFLOATI_VEXTPROC)(GLenum pname, GLuint index, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETFLOATVPROC)(GLenum pname, GLfloat * data);
typedef GLint (GLAD_API_PTR *PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETFRAGDATALOCATIONEXTPROC)(GLuint program, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum pname, GLint * params);
typedef GLhandleARB (GLAD_API_PTR *PFNGLGETHANDLEARBPROC)(GLenum pname);
typedef void (GLAD_API_PTR *PFNGLGETINFOLOGARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64 * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64 * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERINDEXEDVEXTPROC)(GLenum target, GLuint index, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERVPROC)(GLenum pname, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXENVFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXENVIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXGENDVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXGENFVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXGENIVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXIMAGEEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXPARAMETERIIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXPARAMETERIUIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat * val);
typedef void (GLAD_API_PTR *PFNGLGETMULTISAMPLEFVNVPROC)(GLenum pname, GLuint index, GLfloat * val);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC)(GLuint buffer, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERPOINTERVEXTPROC)(GLuint buffer, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC)(GLuint program, GLenum target, GLuint index, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC)(GLuint program, GLenum target, GLuint index, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMSTRINGEXTPROC)(GLuint program, GLenum target, GLenum pname, void * string);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMIVEXTPROC)(GLuint program, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC)(GLuint renderbuffer, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTPARAMETERFVARBPROC)(GLhandleARB obj, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTPARAMETERIVARBPROC)(GLhandleARB obj, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERINDEXEDVEXTPROC)(GLenum target, GLuint index, void ** data);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERI_VEXTPROC)(GLenum pname, GLuint index, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERVEXTPROC)(GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMENVPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMENVPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPARAMETERDVNVPROC)(GLenum target, GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPARAMETERFVNVPROC)(GLenum target, GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMSTRINGARBPROC)(GLenum target, GLenum pname, void * string);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMSTRINGNVPROC)(GLuint id, GLenum pname, GLubyte * program);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMIVNVPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTIVARBPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUIVARBPROC)(GLuint id, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
typedef void (GLAD_API_PTR *PFNGLGETSHADERSOURCEARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source);
typedef void (GLAD_API_PTR *PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint * params);
typedef const GLubyte * (GLAD_API_PTR *PFNGLGETSTRINGPROC)(GLenum name);
typedef const GLubyte * (GLAD_API_PTR *PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
typedef void (GLAD_API_PTR *PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values);
typedef void (GLAD_API_PTR *PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIIVEXTPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIUIVEXTPROC)(GLenum target, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREIMAGEEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIUIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTRACKMATRIXIVNVPROC)(GLenum target, GLuint address, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC)(GLuint program, GLuint index, GLint * location);
typedef GLuint (GLAD_API_PTR *PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar * uniformBlockName);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);
typedef GLint (GLAD_API_PTR *PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETUNIFORMLOCATIONARBPROC)(GLhandleARB programObj, const GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMFVARBPROC)(GLhandleARB programObj, GLint location, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMIVARBPROC)(GLhandleARB programObj, GLint location, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMUIVEXTPROC)(GLuint program, GLint location, GLuint * params);
typedef GLint (GLAD_API_PTR *PFNGLGETVARYINGLOCATIONNVPROC)(GLuint program, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint * param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYINTEGERVEXTPROC)(GLuint vaobj, GLenum pname, GLint * param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC)(GLuint vaobj, GLuint index, GLenum pname, void ** param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYPOINTERVEXTPROC)(GLuint vaobj, GLenum pname, void ** param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIIVEXTPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIUIVEXTPROC)(GLuint index, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVARBPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVNVPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBDVARBPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBDVNVPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVARBPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVNVPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVARBPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVNVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLHINTPROC)(GLenum target, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLINDEXPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef GLboolean (GLAD_API_PTR *PFNGLISBUFFERPROC)(GLuint buffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISBUFFERARBPROC)(GLuint buffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDPROC)(GLenum cap);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDINDEXEDEXTPROC)(GLenum target, GLuint index);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
typedef GLboolean (GLAD_API_PTR *PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISFRAMEBUFFEREXTPROC)(GLuint framebuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMPROC)(GLuint program);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMARBPROC)(GLuint program);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMNVPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISQUERYPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISQUERYARBPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISRENDERBUFFEREXTPROC)(GLuint renderbuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISSHADERPROC)(GLuint shader);
typedef GLboolean (GLAD_API_PTR *PFNGLISSYNCPROC)(GLsync sync);
typedef GLboolean (GLAD_API_PTR *PFNGLISTEXTUREPROC)(GLuint texture);
typedef GLboolean (GLAD_API_PTR *PFNGLISTEXTUREEXTPROC)(GLuint texture);
typedef GLboolean (GLAD_API_PTR *PFNGLISVERTEXARRAYPROC)(GLuint array);
typedef GLboolean (GLAD_API_PTR *PFNGLISVERTEXARRAYAPPLEPROC)(GLuint array);
typedef void (GLAD_API_PTR *PFNGLLINEWIDTHPROC)(GLfloat width);
typedef void (GLAD_API_PTR *PFNGLLINKPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLLINKPROGRAMARBPROC)(GLhandleARB programObj);
typedef void (GLAD_API_PTR *PFNGLLOADPROGRAMNVPROC)(GLenum target, GLuint id, GLsizei len, const GLubyte * program);
typedef void (GLAD_API_PTR *PFNGLLOGICOPPROC)(GLenum opcode);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERARBPROC)(GLenum target, GLenum access);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void * (GLAD_API_PTR *PFNGLMAPNAMEDBUFFEREXTPROC)(GLuint buffer, GLenum access);
typedef void * (GLAD_API_PTR *PFNGLMAPNAMEDBUFFERRANGEEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (GLAD_API_PTR *PFNGLMATRIXFRUSTUMEXTPROC)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADIDENTITYEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADTRANSPOSEDEXTPROC)(GLenum mode, const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADTRANSPOSEFEXTPROC)(GLenum mode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADDEXTPROC)(GLenum mode, const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADFEXTPROC)(GLenum mode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULTTRANSPOSEDEXTPROC)(GLenum mode, const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULTTRANSPOSEFEXTPROC)(GLenum mode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULTDEXTPROC)(GLenum mode, const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULTFEXTPROC)(GLenum mode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXORTHOEXTPROC)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (GLAD_API_PTR *PFNGLMATRIXPOPEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLMATRIXPUSHEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLMATRIXROTATEDEXTPROC)(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLMATRIXROTATEFEXTPROC)(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLMATRIXSCALEDEXTPROC)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLMATRIXSCALEFEXTPROC)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLMATRIXTRANSLATEDEXTPROC)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLMATRIXTRANSLATEFEXTPROC)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSEXTPROC)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSEXTPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLMULTITEXBUFFEREXTPROC)(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1DARBPROC)(GLenum target, GLdouble s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1FARBPROC)(GLenum target, GLfloat s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1IARBPROC)(GLenum target, GLint s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1SARBPROC)(GLenum target, GLshort s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2DARBPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2FARBPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2IARBPROC)(GLenum target, GLint s, GLint t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2SARBPROC)(GLenum target, GLshort s, GLshort t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3IARBPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4IARBPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDPOINTEREXTPROC)(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLMULTITEXENVFEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXENVFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXENVIEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXENVIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENDEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENDVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENFEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENFVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENIEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENIVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERIIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERIUIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERFEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERIEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXRENDERBUFFEREXTPROC)(GLenum texunit, GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERDATAEXTPROC)(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERSTORAGEEXTPROC)(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (GLAD_API_PTR *PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC)(GLuint framebuffer, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC)(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC)(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC)(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC)(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMSTRINGEXTPROC)(GLuint program, GLenum target, GLenum format, GLsizei len, const void * string);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC)(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLNORMALPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFARBPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFEXTPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFSGISPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVARBPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVEXTPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVSGISPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERINVPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERIVNVPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLPOINTSIZEPROC)(GLfloat size);
typedef void (GLAD_API_PTR *PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
typedef void (GLAD_API_PTR *PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLPRIORITIZETEXTURESEXTPROC)(GLsizei n, const GLuint * textures, const GLclampf * priorities);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4DNVPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4DVNVPROC)(GLenum target, GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4FNVPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4FVNVPROC)(GLenum target, GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERIARBPROC)(GLuint program, GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERS4DVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERS4FVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMSTRINGARBPROC)(GLenum target, GLenum format, GLsizei len, const void * string);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DEXTPROC)(GLuint program, GLint location, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FEXTPROC)(GLuint program, GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IEXTPROC)(GLuint program, GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIEXTPROC)(GLuint program, GLint location, GLuint v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMVERTEXLIMITNVPROC)(GLenum target, GLint limit);
typedef void (GLAD_API_PTR *PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLPROVOKINGVERTEXEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLREADBUFFERPROC)(GLenum src);
typedef void (GLAD_API_PTR *PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLREQUESTRESIDENTPROGRAMSNVPROC)(GLsizei n, const GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
typedef void (GLAD_API_PTR *PFNGLSAMPLECOVERAGEARBPROC)(GLfloat value, GLboolean invert);
typedef void (GLAD_API_PTR *PFNGLSAMPLEMASKINDEXEDNVPROC)(GLuint index, GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length);
typedef void (GLAD_API_PTR *PFNGLSHADERSOURCEARBPROC)(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint * length);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCSEPARATEATIPROC)(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILMASKPROC)(GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPSEPARATEATIPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFERARBPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFEREXTPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIIVEXTPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIUIVEXTPROC)(GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXRENDERBUFFERNVPROC)(GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE1DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE2DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE3DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREBUFFEREXTPROC)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXTUREBUFFERRANGEEXTPROC)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPAGECOMMITMENTEXTPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIUIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERFEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXTURERENDERBUFFEREXTPROC)(GLuint texture, GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE1DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE2DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE3DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTRACKMATRIXNVPROC)(GLenum target, GLuint address, GLenum matrix, GLenum transform);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC)(GLsizei count, const GLint * attribs, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC)(GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC)(GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FARBPROC)(GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IARBPROC)(GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIEXTPROC)(GLint location, GLuint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIVEXTPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FARBPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IARBPROC)(GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIEXTPROC)(GLint location, GLuint v0, GLuint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIVEXTPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIEXTPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIVEXTPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIEXTPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIVEXTPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPBUFFERPROC)(GLenum target);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPBUFFERARBPROC)(GLenum target);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPNAMEDBUFFEREXTPROC)(GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMOBJECTARBPROC)(GLhandleARB programObj);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMARBPROC)(GLhandleARB programObj);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYCOLOROFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYINDEXOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYNORMALOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC)(GLuint vaobj, GLuint index, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DARBPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DNVPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FARBPROC)(GLuint index, GLfloat x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FNVPROC)(GLuint index, GLfloat x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SARBPROC)(GLuint index, GLshort x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SNVPROC)(GLuint index, GLshort x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DARBPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DNVPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FARBPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FNVPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SARBPROC)(GLuint index, GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SNVPROC)(GLuint index, GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DNVPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FNVPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SNVPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NBVARBPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NIVARBPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NSVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBARBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBVARBPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUIVARBPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUSVARBPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4BVARBPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DNVPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FNVPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4IVARBPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SNVPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBNVPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBVARBPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBVNVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UIVARBPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4USVARBPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IEXTPROC)(GLuint index, GLint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IVEXTPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIEXTPROC)(GLuint index, GLuint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIVEXTPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IEXTPROC)(GLuint index, GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IVEXTPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIEXTPROC)(GLuint index, GLuint x, GLuint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIVEXTPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IEXTPROC)(GLuint index, GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IVEXTPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIEXTPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIVEXTPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4BVEXTPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IEXTPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IVEXTPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4SVEXTPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UBVEXTPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIEXTPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIVEXTPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4USVEXTPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBIPOINTEREXTPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERARBPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERNVPROC)(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS1DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS1FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS1SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS2DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS2FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS2SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS3DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS3FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS3SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4UBVNVPROC)(GLuint index, GLsizei count, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (GLAD_API_PTR *PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
typedef void (GLAD_API_PTR *PFNGLACTIVESHADERPROGRAMEXTPROC)(GLuint pipeline, GLuint program);
typedef void (GLAD_API_PTR *PFNGLBEGINQUERYEXTPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBINDIMAGETEXTUREPROC)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
typedef void (GLAD_API_PTR *PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (GLAD_API_PTR *PFNGLBINDPROGRAMPIPELINEEXTPROC)(GLuint pipeline);
typedef void (GLAD_API_PTR *PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
typedef void (GLAD_API_PTR *PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXARRAYOESPROC)(GLuint array);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXBUFFERPROC)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLBLENDBARRIERPROC)(void);
typedef void (GLAD_API_PTR *PFNGLBLENDBARRIERKHRPROC)(void);
typedef void (GLAD_API_PTR *PFNGLBLENDBARRIERNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEIEXTPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEIOESPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONIEXTPROC)(GLuint buf, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONIOESPROC)(GLuint buf, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEIEXTPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEIOESPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCIEXTPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCIOESPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void (GLAD_API_PTR *PFNGLBLENDPARAMETERINVPROC)(GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLBLITFRAMEBUFFERNVPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHFPROC)(GLfloat d);
typedef GLenum (GLAD_API_PTR *PFNGLCLIENTWAITSYNCAPPLEPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKIEXTPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKIOESPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (GLAD_API_PTR *PFNGLCOPYBUFFERSUBDATANVPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLCOPYIMAGESUBDATAPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void (GLAD_API_PTR *PFNGLCOPYIMAGESUBDATAEXTPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void (GLAD_API_PTR *PFNGLCOPYIMAGESUBDATAOESPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef GLuint (GLAD_API_PTR *PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar *const* strings);
typedef GLuint (GLAD_API_PTR *PFNGLCREATESHADERPROGRAMVEXTPROC)(GLenum type, GLsizei count, const GLchar ** strings);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC callback, const void * userParam);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGECALLBACKKHRPROC)(GLDEBUGPROCKHR callback, const void * userParam);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGECONTROLPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGECONTROLKHRPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGEINSERTPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGEINSERTKHRPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint * pipelines);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMPIPELINESEXTPROC)(GLsizei n, const GLuint * pipelines);
typedef void (GLAD_API_PTR *PFNGLDELETEQUERIESEXTPROC)(GLsizei n, const GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint * samplers);
typedef void (GLAD_API_PTR *PFNGLDELETESYNCAPPLEPROC)(GLsync sync);
typedef void (GLAD_API_PTR *PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLDELETEVERTEXARRAYSOESPROC)(GLsizei n, const GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEARRAYFVNVPROC)(GLuint first, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEARRAYFVOESPROC)(GLuint first, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEINDEXEDFNVPROC)(GLuint index, GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEINDEXEDFOESPROC)(GLuint index, GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLDISABLEIEXTPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEINVPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEIOESPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISPATCHCOMPUTEPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
typedef void (GLAD_API_PTR *PFNGLDISPATCHCOMPUTEINDIRECTPROC)(GLintptr indirect);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void * indirect);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDANGLEPROC)(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDNVPROC)(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERSEXTPROC)(GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSBASEVERTEXEXTPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSBASEVERTEXOESPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void * indirect);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDANGLEPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDNVPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLENABLEIEXTPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEINVPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEIOESPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENDQUERYEXTPROC)(GLenum target);
typedef GLsync (GLAD_API_PTR *PFNGLFENCESYNCAPPLEPROC)(GLenum condition, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREOESPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint * pipelines);
typedef void (GLAD_API_PTR *PFNGLGENPROGRAMPIPELINESEXTPROC)(GLsizei n, GLuint * pipelines);
typedef void (GLAD_API_PTR *PFNGLGENQUERIESEXTPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint * samplers);
typedef void (GLAD_API_PTR *PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLGENVERTEXARRAYSOESPROC)(GLsizei n, GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPOINTERVOESPROC)(GLenum target, GLenum pname, void ** params);
typedef GLuint (GLAD_API_PTR *PFNGLGETDEBUGMESSAGELOGPROC)(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
typedef GLuint (GLAD_API_PTR *PFNGLGETDEBUGMESSAGELOGKHRPROC)(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
typedef void (GLAD_API_PTR *PFNGLGETFLOATI_VNVPROC)(GLenum target, GLuint index, GLfloat * data);
typedef void (GLAD_API_PTR *PFNGLGETFLOATI_VOESPROC)(GLenum target, GLuint index, GLfloat * data);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef GLenum (GLAD_API_PTR *PFNGLGETGRAPHICSRESETSTATUSPROC)(void);
typedef GLenum (GLAD_API_PTR *PFNGLGETGRAPHICSRESETSTATUSEXTPROC)(void);
typedef GLenum (GLAD_API_PTR *PFNGLGETGRAPHICSRESETSTATUSKHRPROC)(void);
typedef void (GLAD_API_PTR *PFNGLGETINTEGER64VAPPLEPROC)(GLenum pname, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETINTEGER64VEXTPROC)(GLenum pname, GLint64 * data);
typedef void (GLAD_API_PTR *PFNGLGETINTERNALFORMATIVPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTLABELKHRPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTPTRLABELPROC)(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTPTRLABELKHRPROC)(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERVPROC)(GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERVKHRPROC)(GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMBINARYOESPROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMINTERFACEIVPROC)(GLuint program, GLenum programInterface, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC)(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPIPELINEIVEXTPROC)(GLuint pipeline, GLenum pname, GLint * params);
typedef GLuint (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCEINDEXPROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCELOCATIONPROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCENAMEPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCEIVPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTI64VEXTPROC)(GLuint id, GLenum pname, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTIVEXTPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUI64VEXTPROC)(GLuint id, GLenum pname, GLuint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUIVEXTPROC)(GLuint id, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYIVEXTPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIIVEXTPROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIIVOESPROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIUIVEXTPROC)(GLuint sampler, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIUIVOESPROC)(GLuint sampler, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);
typedef void (GLAD_API_PTR *PFNGLGETSYNCIVAPPLEPROC)(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIIVOESPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIUIVOESPROC)(GLenum target, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMFVPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMFVEXTPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMFVKHRPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMIVEXTPROC)(GLuint program, GLint location, GLsizei bufSize, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMIVKHRPROC)(GLuint program, GLint location, GLsizei bufSize, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMUIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMUIVKHRPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLINVALIDATEFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum * attachments);
typedef void (GLAD_API_PTR *PFNGLINVALIDATESUBFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDIEXTPROC)(GLenum target, GLuint index);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDINVPROC)(GLenum target, GLuint index);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDIOESPROC)(GLenum target, GLuint index);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMPIPELINEEXTPROC)(GLuint pipeline);
typedef GLboolean (GLAD_API_PTR *PFNGLISQUERYEXTPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISSAMPLERPROC)(GLuint sampler);
typedef GLboolean (GLAD_API_PTR *PFNGLISSYNCAPPLEPROC)(GLsync sync);
typedef GLboolean (GLAD_API_PTR *PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISVERTEXARRAYOESPROC)(GLuint array);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFEROESPROC)(GLenum target, GLenum access);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERRANGEEXTPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (GLAD_API_PTR *PFNGLMEMORYBARRIERPROC)(GLbitfield barriers);
typedef void (GLAD_API_PTR *PFNGLMEMORYBARRIERBYREGIONPROC)(GLbitfield barriers);
typedef void (GLAD_API_PTR *PFNGLMINSAMPLESHADINGPROC)(GLfloat value);
typedef void (GLAD_API_PTR *PFNGLMINSAMPLESHADINGOESPROC)(GLfloat value);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex);
typedef void (GLAD_API_PTR *PFNGLOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar * label);
typedef void (GLAD_API_PTR *PFNGLOBJECTLABELKHRPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar * label);
typedef void (GLAD_API_PTR *PFNGLOBJECTPTRLABELPROC)(const void * ptr, GLsizei length, const GLchar * label);
typedef void (GLAD_API_PTR *PFNGLOBJECTPTRLABELKHRPROC)(const void * ptr, GLsizei length, const GLchar * label);
typedef void (GLAD_API_PTR *PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPATCHPARAMETERIEXTPROC)(GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPATCHPARAMETERIOESPROC)(GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPAUSETRANSFORMFEEDBACKPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPDEBUGGROUPPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPDEBUGGROUPKHRPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPRIMITIVEBOUNDINGBOXPROC)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
typedef void (GLAD_API_PTR *PFNGLPRIMITIVEBOUNDINGBOXEXTPROC)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
typedef void (GLAD_API_PTR *PFNGLPRIMITIVEBOUNDINGBOXOESPROC)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
typedef void (GLAD_API_PTR *PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length);
typedef void (GLAD_API_PTR *PFNGLPROGRAMBINARYOESPROC)(GLuint program, GLenum binaryFormat, const void * binary, GLint length);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERIEXTPROC)(GLuint program, GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPUSHDEBUGGROUPPROC)(GLenum source, GLuint id, GLsizei length, const GLchar * message);
typedef void (GLAD_API_PTR *PFNGLPUSHDEBUGGROUPKHRPROC)(GLenum source, GLuint id, GLsizei length, const GLchar * message);
typedef void (GLAD_API_PTR *PFNGLQUERYCOUNTEREXTPROC)(GLuint id, GLenum target);
typedef void (GLAD_API_PTR *PFNGLREADNPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
typedef void (GLAD_API_PTR *PFNGLREADNPIXELSEXTPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
typedef void (GLAD_API_PTR *PFNGLREADNPIXELSKHRPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
typedef void (GLAD_API_PTR *PFNGLRELEASESHADERCOMPILERPROC)(void);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRESUMETRANSFORMFEEDBACKPROC)(void);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIIVEXTPROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIIVOESPROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIUIVEXTPROC)(GLuint sampler, GLenum pname, const GLuint * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIUIVOESPROC)(GLuint sampler, GLenum pname, const GLuint * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void (GLAD_API_PTR *PFNGLSCISSORARRAYVNVPROC)(GLuint first, GLsizei count, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLSCISSORARRAYVOESPROC)(GLuint first, GLsizei count, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLSCISSORINDEXEDNVPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLSCISSORINDEXEDOESPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLSCISSORINDEXEDVNVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLSCISSORINDEXEDVOESPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint * shaders, GLenum binaryFormat, const void * binary, GLsizei length);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFEROESPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFERRANGEPROC)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFERRANGEEXTPROC)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFERRANGEOESPROC)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIIVOESPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIUIVOESPROC)(GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE1DEXTPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE2DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE2DEXTPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE3DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE3DEXTPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X3FVNVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X4FVNVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X2FVNVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X4FVNVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X2FVNVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X3FVNVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPBUFFEROESPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMSTAGESEXTPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMPIPELINEEXTPROC)(GLuint pipeline);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBBINDINGPROC)(GLuint attribindex, GLuint bindingindex);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBDIVISORANGLEPROC)(GLuint index, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBDIVISOREXTPROC)(GLuint index, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBDIVISORNVPROC)(GLuint index, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBIFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXBINDINGDIVISORPROC)(GLuint bindingindex, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTARRAYVNVPROC)(GLuint first, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTARRAYVOESPROC)(GLuint first, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTINDEXEDFNVPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTINDEXEDFOESPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTINDEXEDFVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTINDEXEDFVOESPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLWAITSYNCAPPLEPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);

typedef struct GL {
    void* userptr;

    int VERSION_1_0;
    int VERSION_1_1;
    int VERSION_1_2;
    int VERSION_1_3;
    int VERSION_1_4;
    int VERSION_1_5;
    int VERSION_2_0;
    int VERSION_2_1;
    int VERSION_3_0;
    int VERSION_3_1;
    int VERSION_3_2;
    int ES_VERSION_2_0;
    int ES_VERSION_3_0;
    int ES_VERSION_3_1;
    int ES_VERSION_3_2;
    int APPLE_flush_buffer_range;
    int APPLE_vertex_array_object;
    int ARB_color_buffer_float;
    int ARB_copy_buffer;
    int ARB_draw_buffers;
    int ARB_draw_elements_base_vertex;
    int ARB_draw_instanced;
    int ARB_framebuffer_object;
    int ARB_geometry_shader4;
    int ARB_imaging;
    int ARB_map_buffer_range;
    int ARB_multisample;
    int ARB_multitexture;
    int ARB_occlusion_query;
    int ARB_point_parameters;
    int ARB_provoking_vertex;
    int ARB_shader_objects;
    int ARB_sync;
    int ARB_texture_buffer_object;
    int ARB_texture_compression;
    int ARB_texture_multisample;
    int ARB_uniform_buffer_object;
    int ARB_vertex_array_object;
    int ARB_vertex_buffer_object;
    int ARB_vertex_program;
    int ARB_vertex_shader;
    int ATI_draw_buffers;
    int ATI_separate_stencil;
    int EXT_blend_color;
    int EXT_blend_equation_separate;
    int EXT_blend_func_separate;
    int EXT_blend_minmax;
    int EXT_copy_texture;
    int EXT_direct_state_access;
    int EXT_draw_buffers2;
    int EXT_draw_instanced;
    int EXT_draw_range_elements;
    int EXT_framebuffer_blit;
    int EXT_framebuffer_multisample;
    int EXT_framebuffer_object;
    int EXT_gpu_shader4;
    int EXT_multi_draw_arrays;
    int EXT_point_parameters;
    int EXT_provoking_vertex;
    int EXT_subtexture;
    int EXT_texture3D;
    int EXT_texture_array;
    int EXT_texture_buffer_object;
    int EXT_texture_integer;
    int EXT_texture_object;
    int EXT_transform_feedback;
    int EXT_vertex_array;
    int INGR_blend_func_separate;
    int NVX_conditional_render;
    int NV_conditional_render;
    int NV_explicit_multisample;
    int NV_geometry_program4;
    int NV_point_sprite;
    int NV_transform_feedback;
    int NV_vertex_program;
    int NV_vertex_program4;
    int SGIS_point_parameters;
    int ANGLE_instanced_arrays;
    int APPLE_sync;
    int EXT_copy_image;
    int EXT_disjoint_timer_query;
    int EXT_draw_buffers;
    int EXT_draw_buffers_indexed;
    int EXT_draw_elements_base_vertex;
    int EXT_geometry_shader;
    int EXT_instanced_arrays;
    int EXT_map_buffer_range;
    int EXT_multisampled_render_to_texture;
    int EXT_primitive_bounding_box;
    int EXT_robustness;
    int EXT_separate_shader_objects;
    int EXT_tessellation_shader;
    int EXT_texture_border_clamp;
    int EXT_texture_buffer;
    int EXT_texture_storage;
    int KHR_blend_equation_advanced;
    int KHR_debug;
    int KHR_robustness;
    int NV_blend_equation_advanced;
    int NV_copy_buffer;
    int NV_draw_instanced;
    int NV_framebuffer_blit;
    int NV_framebuffer_multisample;
    int NV_instanced_arrays;
    int NV_non_square_matrices;
    int NV_viewport_array;
    int OES_copy_image;
    int OES_draw_buffers_indexed;
    int OES_draw_elements_base_vertex;
    int OES_geometry_shader;
    int OES_get_program_binary;
    int OES_mapbuffer;
    int OES_primitive_bounding_box;
    int OES_sample_shading;
    int OES_tessellation_shader;
    int OES_texture_border_clamp;
    int OES_texture_buffer;
    int OES_texture_storage_multisample_2d_array;
    int OES_vertex_array_object;
    int OES_viewport_array;

    PFNGLACTIVETEXTUREPROC activeTexture;
    PFNGLACTIVETEXTUREARBPROC activeTextureARB;
    PFNGLACTIVEVARYINGNVPROC activeVaryingNV;
    PFNGLAREPROGRAMSRESIDENTNVPROC areProgramsResidentNV;
    PFNGLARETEXTURESRESIDENTEXTPROC areTexturesResidentEXT;
    PFNGLARRAYELEMENTEXTPROC arrayElementEXT;
    PFNGLATTACHOBJECTARBPROC attachObjectARB;
    PFNGLATTACHSHADERPROC attachShader;
    PFNGLBEGINCONDITIONALRENDERPROC beginConditionalRender;
    PFNGLBEGINCONDITIONALRENDERNVPROC beginConditionalRenderNV;
    PFNGLBEGINCONDITIONALRENDERNVXPROC beginConditionalRenderNVX;
    PFNGLBEGINQUERYPROC beginQuery;
    PFNGLBEGINQUERYARBPROC beginQueryARB;
    PFNGLBEGINTRANSFORMFEEDBACKPROC beginTransformFeedback;
    PFNGLBEGINTRANSFORMFEEDBACKEXTPROC beginTransformFeedbackEXT;
    PFNGLBEGINTRANSFORMFEEDBACKNVPROC beginTransformFeedbackNV;
    PFNGLBINDATTRIBLOCATIONPROC bindAttribLocation;
    PFNGLBINDATTRIBLOCATIONARBPROC bindAttribLocationARB;
    PFNGLBINDBUFFERPROC bindBuffer;
    PFNGLBINDBUFFERARBPROC bindBufferARB;
    PFNGLBINDBUFFERBASEPROC bindBufferBase;
    PFNGLBINDBUFFERBASEEXTPROC bindBufferBaseEXT;
    PFNGLBINDBUFFERBASENVPROC bindBufferBaseNV;
    PFNGLBINDBUFFEROFFSETEXTPROC bindBufferOffsetEXT;
    PFNGLBINDBUFFEROFFSETNVPROC bindBufferOffsetNV;
    PFNGLBINDBUFFERRANGEPROC bindBufferRange;
    PFNGLBINDBUFFERRANGEEXTPROC bindBufferRangeEXT;
    PFNGLBINDBUFFERRANGENVPROC bindBufferRangeNV;
    PFNGLBINDFRAGDATALOCATIONPROC bindFragDataLocation;
    PFNGLBINDFRAGDATALOCATIONEXTPROC bindFragDataLocationEXT;
    PFNGLBINDFRAMEBUFFERPROC bindFramebuffer;
    PFNGLBINDFRAMEBUFFEREXTPROC bindFramebufferEXT;
    PFNGLBINDMULTITEXTUREEXTPROC bindMultiTextureEXT;
    PFNGLBINDPROGRAMARBPROC bindProgramARB;
    PFNGLBINDPROGRAMNVPROC bindProgramNV;
    PFNGLBINDRENDERBUFFERPROC bindRenderbuffer;
    PFNGLBINDRENDERBUFFEREXTPROC bindRenderbufferEXT;
    PFNGLBINDTEXTUREPROC bindTexture;
    PFNGLBINDTEXTUREEXTPROC bindTextureEXT;
    PFNGLBINDVERTEXARRAYPROC bindVertexArray;
    PFNGLBINDVERTEXARRAYAPPLEPROC bindVertexArrayAPPLE;
    PFNGLBLENDCOLORPROC blendColor;
    PFNGLBLENDCOLOREXTPROC blendColorEXT;
    PFNGLBLENDEQUATIONPROC blendEquation;
    PFNGLBLENDEQUATIONEXTPROC blendEquationEXT;
    PFNGLBLENDEQUATIONSEPARATEPROC blendEquationSeparate;
    PFNGLBLENDEQUATIONSEPARATEEXTPROC blendEquationSeparateEXT;
    PFNGLBLENDFUNCPROC blendFunc;
    PFNGLBLENDFUNCSEPARATEPROC blendFuncSeparate;
    PFNGLBLENDFUNCSEPARATEEXTPROC blendFuncSeparateEXT;
    PFNGLBLENDFUNCSEPARATEINGRPROC blendFuncSeparateINGR;
    PFNGLBLITFRAMEBUFFERPROC blitFramebuffer;
    PFNGLBLITFRAMEBUFFEREXTPROC blitFramebufferEXT;
    PFNGLBUFFERDATAPROC bufferData;
    PFNGLBUFFERDATAARBPROC bufferDataARB;
    PFNGLBUFFERPARAMETERIAPPLEPROC bufferParameteriAPPLE;
    PFNGLBUFFERSUBDATAPROC bufferSubData;
    PFNGLBUFFERSUBDATAARBPROC bufferSubDataARB;
    PFNGLCHECKFRAMEBUFFERSTATUSPROC checkFramebufferStatus;
    PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC checkFramebufferStatusEXT;
    PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC checkNamedFramebufferStatusEXT;
    PFNGLCLAMPCOLORPROC clampColor;
    PFNGLCLAMPCOLORARBPROC clampColorARB;
    PFNGLCLEARPROC clear;
    PFNGLCLEARBUFFERFIPROC clearBufferfi;
    PFNGLCLEARBUFFERFVPROC clearBufferfv;
    PFNGLCLEARBUFFERIVPROC clearBufferiv;
    PFNGLCLEARBUFFERUIVPROC clearBufferuiv;
    PFNGLCLEARCOLORPROC clearColor;
    PFNGLCLEARCOLORIIEXTPROC clearColorIiEXT;
    PFNGLCLEARCOLORIUIEXTPROC clearColorIuiEXT;
    PFNGLCLEARDEPTHPROC clearDepth;
    PFNGLCLEARNAMEDBUFFERDATAEXTPROC clearNamedBufferDataEXT;
    PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC clearNamedBufferSubDataEXT;
    PFNGLCLEARSTENCILPROC clearStencil;
    PFNGLCLIENTACTIVETEXTUREARBPROC clientActiveTextureARB;
    PFNGLCLIENTATTRIBDEFAULTEXTPROC clientAttribDefaultEXT;
    PFNGLCLIENTWAITSYNCPROC clientWaitSync;
    PFNGLCOLORMASKPROC colorMask;
    PFNGLCOLORMASKINDEXEDEXTPROC colorMaskIndexedEXT;
    PFNGLCOLORMASKIPROC colorMaski;
    PFNGLCOLORPOINTEREXTPROC colorPointerEXT;
    PFNGLCOMPILESHADERPROC compileShader;
    PFNGLCOMPILESHADERARBPROC compileShaderARB;
    PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC compressedMultiTexImage1DEXT;
    PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC compressedMultiTexImage2DEXT;
    PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC compressedMultiTexImage3DEXT;
    PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC compressedMultiTexSubImage1DEXT;
    PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC compressedMultiTexSubImage2DEXT;
    PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC compressedMultiTexSubImage3DEXT;
    PFNGLCOMPRESSEDTEXIMAGE1DPROC compressedTexImage1D;
    PFNGLCOMPRESSEDTEXIMAGE1DARBPROC compressedTexImage1DARB;
    PFNGLCOMPRESSEDTEXIMAGE2DPROC compressedTexImage2D;
    PFNGLCOMPRESSEDTEXIMAGE2DARBPROC compressedTexImage2DARB;
    PFNGLCOMPRESSEDTEXIMAGE3DPROC compressedTexImage3D;
    PFNGLCOMPRESSEDTEXIMAGE3DARBPROC compressedTexImage3DARB;
    PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC compressedTexSubImage1D;
    PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC compressedTexSubImage1DARB;
    PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC compressedTexSubImage2D;
    PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC compressedTexSubImage2DARB;
    PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC compressedTexSubImage3D;
    PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC compressedTexSubImage3DARB;
    PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC compressedTextureImage1DEXT;
    PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC compressedTextureImage2DEXT;
    PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC compressedTextureImage3DEXT;
    PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC compressedTextureSubImage1DEXT;
    PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC compressedTextureSubImage2DEXT;
    PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC compressedTextureSubImage3DEXT;
    PFNGLCOPYBUFFERSUBDATAPROC copyBufferSubData;
    PFNGLCOPYMULTITEXIMAGE1DEXTPROC copyMultiTexImage1DEXT;
    PFNGLCOPYMULTITEXIMAGE2DEXTPROC copyMultiTexImage2DEXT;
    PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC copyMultiTexSubImage1DEXT;
    PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC copyMultiTexSubImage2DEXT;
    PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC copyMultiTexSubImage3DEXT;
    PFNGLCOPYTEXIMAGE1DPROC copyTexImage1D;
    PFNGLCOPYTEXIMAGE1DEXTPROC copyTexImage1DEXT;
    PFNGLCOPYTEXIMAGE2DPROC copyTexImage2D;
    PFNGLCOPYTEXIMAGE2DEXTPROC copyTexImage2DEXT;
    PFNGLCOPYTEXSUBIMAGE1DPROC copyTexSubImage1D;
    PFNGLCOPYTEXSUBIMAGE1DEXTPROC copyTexSubImage1DEXT;
    PFNGLCOPYTEXSUBIMAGE2DPROC copyTexSubImage2D;
    PFNGLCOPYTEXSUBIMAGE2DEXTPROC copyTexSubImage2DEXT;
    PFNGLCOPYTEXSUBIMAGE3DPROC copyTexSubImage3D;
    PFNGLCOPYTEXSUBIMAGE3DEXTPROC copyTexSubImage3DEXT;
    PFNGLCOPYTEXTUREIMAGE1DEXTPROC copyTextureImage1DEXT;
    PFNGLCOPYTEXTUREIMAGE2DEXTPROC copyTextureImage2DEXT;
    PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC copyTextureSubImage1DEXT;
    PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC copyTextureSubImage2DEXT;
    PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC copyTextureSubImage3DEXT;
    PFNGLCREATEPROGRAMPROC createProgram;
    PFNGLCREATEPROGRAMOBJECTARBPROC createProgramObjectARB;
    PFNGLCREATESHADERPROC createShader;
    PFNGLCREATESHADEROBJECTARBPROC createShaderObjectARB;
    PFNGLCULLFACEPROC cullFace;
    PFNGLDELETEBUFFERSPROC deleteBuffers;
    PFNGLDELETEBUFFERSARBPROC deleteBuffersARB;
    PFNGLDELETEFRAMEBUFFERSPROC deleteFramebuffers;
    PFNGLDELETEFRAMEBUFFERSEXTPROC deleteFramebuffersEXT;
    PFNGLDELETEOBJECTARBPROC deleteObjectARB;
    PFNGLDELETEPROGRAMPROC deleteProgram;
    PFNGLDELETEPROGRAMSARBPROC deleteProgramsARB;
    PFNGLDELETEPROGRAMSNVPROC deleteProgramsNV;
    PFNGLDELETEQUERIESPROC deleteQueries;
    PFNGLDELETEQUERIESARBPROC deleteQueriesARB;
    PFNGLDELETERENDERBUFFERSPROC deleteRenderbuffers;
    PFNGLDELETERENDERBUFFERSEXTPROC deleteRenderbuffersEXT;
    PFNGLDELETESHADERPROC deleteShader;
    PFNGLDELETESYNCPROC deleteSync;
    PFNGLDELETETEXTURESPROC deleteTextures;
    PFNGLDELETETEXTURESEXTPROC deleteTexturesEXT;
    PFNGLDELETEVERTEXARRAYSPROC deleteVertexArrays;
    PFNGLDELETEVERTEXARRAYSAPPLEPROC deleteVertexArraysAPPLE;
    PFNGLDEPTHFUNCPROC depthFunc;
    PFNGLDEPTHMASKPROC depthMask;
    PFNGLDEPTHRANGEPROC depthRange;
    PFNGLDETACHOBJECTARBPROC detachObjectARB;
    PFNGLDETACHSHADERPROC detachShader;
    PFNGLDISABLEPROC disable;
    PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC disableClientStateIndexedEXT;
    PFNGLDISABLECLIENTSTATEIEXTPROC disableClientStateiEXT;
    PFNGLDISABLEINDEXEDEXTPROC disableIndexedEXT;
    PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC disableVertexArrayAttribEXT;
    PFNGLDISABLEVERTEXARRAYEXTPROC disableVertexArrayEXT;
    PFNGLDISABLEVERTEXATTRIBARRAYPROC disableVertexAttribArray;
    PFNGLDISABLEVERTEXATTRIBARRAYARBPROC disableVertexAttribArrayARB;
    PFNGLDISABLEIPROC disablei;
    PFNGLDRAWARRAYSPROC drawArrays;
    PFNGLDRAWARRAYSEXTPROC drawArraysEXT;
    PFNGLDRAWARRAYSINSTANCEDPROC drawArraysInstanced;
    PFNGLDRAWARRAYSINSTANCEDARBPROC drawArraysInstancedARB;
    PFNGLDRAWARRAYSINSTANCEDEXTPROC drawArraysInstancedEXT;
    PFNGLDRAWBUFFERPROC drawBuffer;
    PFNGLDRAWBUFFERSPROC drawBuffers;
    PFNGLDRAWBUFFERSARBPROC drawBuffersARB;
    PFNGLDRAWBUFFERSATIPROC drawBuffersATI;
    PFNGLDRAWELEMENTSPROC drawElements;
    PFNGLDRAWELEMENTSBASEVERTEXPROC drawElementsBaseVertex;
    PFNGLDRAWELEMENTSINSTANCEDPROC drawElementsInstanced;
    PFNGLDRAWELEMENTSINSTANCEDARBPROC drawElementsInstancedARB;
    PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC drawElementsInstancedBaseVertex;
    PFNGLDRAWELEMENTSINSTANCEDEXTPROC drawElementsInstancedEXT;
    PFNGLDRAWRANGEELEMENTSPROC drawRangeElements;
    PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC drawRangeElementsBaseVertex;
    PFNGLDRAWRANGEELEMENTSEXTPROC drawRangeElementsEXT;
    PFNGLEDGEFLAGPOINTEREXTPROC edgeFlagPointerEXT;
    PFNGLENABLEPROC enable;
    PFNGLENABLECLIENTSTATEINDEXEDEXTPROC enableClientStateIndexedEXT;
    PFNGLENABLECLIENTSTATEIEXTPROC enableClientStateiEXT;
    PFNGLENABLEINDEXEDEXTPROC enableIndexedEXT;
    PFNGLENABLEVERTEXARRAYATTRIBEXTPROC enableVertexArrayAttribEXT;
    PFNGLENABLEVERTEXARRAYEXTPROC enableVertexArrayEXT;
    PFNGLENABLEVERTEXATTRIBARRAYPROC enableVertexAttribArray;
    PFNGLENABLEVERTEXATTRIBARRAYARBPROC enableVertexAttribArrayARB;
    PFNGLENABLEIPROC enablei;
    PFNGLENDCONDITIONALRENDERPROC endConditionalRender;
    PFNGLENDCONDITIONALRENDERNVPROC endConditionalRenderNV;
    PFNGLENDCONDITIONALRENDERNVXPROC endConditionalRenderNVX;
    PFNGLENDQUERYPROC endQuery;
    PFNGLENDQUERYARBPROC endQueryARB;
    PFNGLENDTRANSFORMFEEDBACKPROC endTransformFeedback;
    PFNGLENDTRANSFORMFEEDBACKEXTPROC endTransformFeedbackEXT;
    PFNGLENDTRANSFORMFEEDBACKNVPROC endTransformFeedbackNV;
    PFNGLEXECUTEPROGRAMNVPROC executeProgramNV;
    PFNGLFENCESYNCPROC fenceSync;
    PFNGLFINISHPROC finish;
    PFNGLFLUSHPROC flush;
    PFNGLFLUSHMAPPEDBUFFERRANGEPROC flushMappedBufferRange;
    PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC flushMappedBufferRangeAPPLE;
    PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC flushMappedNamedBufferRangeEXT;
    PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC framebufferDrawBufferEXT;
    PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC framebufferDrawBuffersEXT;
    PFNGLFRAMEBUFFERREADBUFFEREXTPROC framebufferReadBufferEXT;
    PFNGLFRAMEBUFFERRENDERBUFFERPROC framebufferRenderbuffer;
    PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC framebufferRenderbufferEXT;
    PFNGLFRAMEBUFFERTEXTUREPROC framebufferTexture;
    PFNGLFRAMEBUFFERTEXTURE1DPROC framebufferTexture1D;
    PFNGLFRAMEBUFFERTEXTURE1DEXTPROC framebufferTexture1DEXT;
    PFNGLFRAMEBUFFERTEXTURE2DPROC framebufferTexture2D;
    PFNGLFRAMEBUFFERTEXTURE2DEXTPROC framebufferTexture2DEXT;
    PFNGLFRAMEBUFFERTEXTURE3DPROC framebufferTexture3D;
    PFNGLFRAMEBUFFERTEXTURE3DEXTPROC framebufferTexture3DEXT;
    PFNGLFRAMEBUFFERTEXTUREARBPROC framebufferTextureARB;
    PFNGLFRAMEBUFFERTEXTUREEXTPROC framebufferTextureEXT;
    PFNGLFRAMEBUFFERTEXTUREFACEARBPROC framebufferTextureFaceARB;
    PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC framebufferTextureFaceEXT;
    PFNGLFRAMEBUFFERTEXTURELAYERPROC framebufferTextureLayer;
    PFNGLFRAMEBUFFERTEXTURELAYERARBPROC framebufferTextureLayerARB;
    PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC framebufferTextureLayerEXT;
    PFNGLFRONTFACEPROC frontFace;
    PFNGLGENBUFFERSPROC genBuffers;
    PFNGLGENBUFFERSARBPROC genBuffersARB;
    PFNGLGENFRAMEBUFFERSPROC genFramebuffers;
    PFNGLGENFRAMEBUFFERSEXTPROC genFramebuffersEXT;
    PFNGLGENPROGRAMSARBPROC genProgramsARB;
    PFNGLGENPROGRAMSNVPROC genProgramsNV;
    PFNGLGENQUERIESPROC genQueries;
    PFNGLGENQUERIESARBPROC genQueriesARB;
    PFNGLGENRENDERBUFFERSPROC genRenderbuffers;
    PFNGLGENRENDERBUFFERSEXTPROC genRenderbuffersEXT;
    PFNGLGENTEXTURESPROC genTextures;
    PFNGLGENTEXTURESEXTPROC genTexturesEXT;
    PFNGLGENVERTEXARRAYSPROC genVertexArrays;
    PFNGLGENVERTEXARRAYSAPPLEPROC genVertexArraysAPPLE;
    PFNGLGENERATEMIPMAPPROC generateMipmap;
    PFNGLGENERATEMIPMAPEXTPROC generateMipmapEXT;
    PFNGLGENERATEMULTITEXMIPMAPEXTPROC generateMultiTexMipmapEXT;
    PFNGLGENERATETEXTUREMIPMAPEXTPROC generateTextureMipmapEXT;
    PFNGLGETACTIVEATTRIBPROC getActiveAttrib;
    PFNGLGETACTIVEATTRIBARBPROC getActiveAttribARB;
    PFNGLGETACTIVEUNIFORMPROC getActiveUniform;
    PFNGLGETACTIVEUNIFORMARBPROC getActiveUniformARB;
    PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC getActiveUniformBlockName;
    PFNGLGETACTIVEUNIFORMBLOCKIVPROC getActiveUniformBlockiv;
    PFNGLGETACTIVEUNIFORMNAMEPROC getActiveUniformName;
    PFNGLGETACTIVEUNIFORMSIVPROC getActiveUniformsiv;
    PFNGLGETACTIVEVARYINGNVPROC getActiveVaryingNV;
    PFNGLGETATTACHEDOBJECTSARBPROC getAttachedObjectsARB;
    PFNGLGETATTACHEDSHADERSPROC getAttachedShaders;
    PFNGLGETATTRIBLOCATIONPROC getAttribLocation;
    PFNGLGETATTRIBLOCATIONARBPROC getAttribLocationARB;
    PFNGLGETBOOLEANINDEXEDVEXTPROC getBooleanIndexedvEXT;
    PFNGLGETBOOLEANI_VPROC getBooleani_v;
    PFNGLGETBOOLEANVPROC getBooleanv;
    PFNGLGETBUFFERPARAMETERI64VPROC getBufferParameteri64v;
    PFNGLGETBUFFERPARAMETERIVPROC getBufferParameteriv;
    PFNGLGETBUFFERPARAMETERIVARBPROC getBufferParameterivARB;
    PFNGLGETBUFFERPOINTERVPROC getBufferPointerv;
    PFNGLGETBUFFERPOINTERVARBPROC getBufferPointervARB;
    PFNGLGETBUFFERSUBDATAPROC getBufferSubData;
    PFNGLGETBUFFERSUBDATAARBPROC getBufferSubDataARB;
    PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC getCompressedMultiTexImageEXT;
    PFNGLGETCOMPRESSEDTEXIMAGEPROC getCompressedTexImage;
    PFNGLGETCOMPRESSEDTEXIMAGEARBPROC getCompressedTexImageARB;
    PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC getCompressedTextureImageEXT;
    PFNGLGETDOUBLEINDEXEDVEXTPROC getDoubleIndexedvEXT;
    PFNGLGETDOUBLEI_VEXTPROC getDoublei_vEXT;
    PFNGLGETDOUBLEVPROC getDoublev;
    PFNGLGETERRORPROC getError;
    PFNGLGETFLOATINDEXEDVEXTPROC getFloatIndexedvEXT;
    PFNGLGETFLOATI_VEXTPROC getFloati_vEXT;
    PFNGLGETFLOATVPROC getFloatv;
    PFNGLGETFRAGDATALOCATIONPROC getFragDataLocation;
    PFNGLGETFRAGDATALOCATIONEXTPROC getFragDataLocationEXT;
    PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC getFramebufferAttachmentParameteriv;
    PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC getFramebufferAttachmentParameterivEXT;
    PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC getFramebufferParameterivEXT;
    PFNGLGETHANDLEARBPROC getHandleARB;
    PFNGLGETINFOLOGARBPROC getInfoLogARB;
    PFNGLGETINTEGER64I_VPROC getInteger64i_v;
    PFNGLGETINTEGER64VPROC getInteger64v;
    PFNGLGETINTEGERINDEXEDVEXTPROC getIntegerIndexedvEXT;
    PFNGLGETINTEGERI_VPROC getIntegeri_v;
    PFNGLGETINTEGERVPROC getIntegerv;
    PFNGLGETMULTITEXENVFVEXTPROC getMultiTexEnvfvEXT;
    PFNGLGETMULTITEXENVIVEXTPROC getMultiTexEnvivEXT;
    PFNGLGETMULTITEXGENDVEXTPROC getMultiTexGendvEXT;
    PFNGLGETMULTITEXGENFVEXTPROC getMultiTexGenfvEXT;
    PFNGLGETMULTITEXGENIVEXTPROC getMultiTexGenivEXT;
    PFNGLGETMULTITEXIMAGEEXTPROC getMultiTexImageEXT;
    PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC getMultiTexLevelParameterfvEXT;
    PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC getMultiTexLevelParameterivEXT;
    PFNGLGETMULTITEXPARAMETERIIVEXTPROC getMultiTexParameterIivEXT;
    PFNGLGETMULTITEXPARAMETERIUIVEXTPROC getMultiTexParameterIuivEXT;
    PFNGLGETMULTITEXPARAMETERFVEXTPROC getMultiTexParameterfvEXT;
    PFNGLGETMULTITEXPARAMETERIVEXTPROC getMultiTexParameterivEXT;
    PFNGLGETMULTISAMPLEFVPROC getMultisamplefv;
    PFNGLGETMULTISAMPLEFVNVPROC getMultisamplefvNV;
    PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC getNamedBufferParameterivEXT;
    PFNGLGETNAMEDBUFFERPOINTERVEXTPROC getNamedBufferPointervEXT;
    PFNGLGETNAMEDBUFFERSUBDATAEXTPROC getNamedBufferSubDataEXT;
    PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC getNamedFramebufferAttachmentParameterivEXT;
    PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC getNamedFramebufferParameterivEXT;
    PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC getNamedProgramLocalParameterIivEXT;
    PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC getNamedProgramLocalParameterIuivEXT;
    PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC getNamedProgramLocalParameterdvEXT;
    PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC getNamedProgramLocalParameterfvEXT;
    PFNGLGETNAMEDPROGRAMSTRINGEXTPROC getNamedProgramStringEXT;
    PFNGLGETNAMEDPROGRAMIVEXTPROC getNamedProgramivEXT;
    PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC getNamedRenderbufferParameterivEXT;
    PFNGLGETOBJECTPARAMETERFVARBPROC getObjectParameterfvARB;
    PFNGLGETOBJECTPARAMETERIVARBPROC getObjectParameterivARB;
    PFNGLGETPOINTERINDEXEDVEXTPROC getPointerIndexedvEXT;
    PFNGLGETPOINTERI_VEXTPROC getPointeri_vEXT;
    PFNGLGETPOINTERVEXTPROC getPointervEXT;
    PFNGLGETPROGRAMENVPARAMETERDVARBPROC getProgramEnvParameterdvARB;
    PFNGLGETPROGRAMENVPARAMETERFVARBPROC getProgramEnvParameterfvARB;
    PFNGLGETPROGRAMINFOLOGPROC getProgramInfoLog;
    PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC getProgramLocalParameterdvARB;
    PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC getProgramLocalParameterfvARB;
    PFNGLGETPROGRAMPARAMETERDVNVPROC getProgramParameterdvNV;
    PFNGLGETPROGRAMPARAMETERFVNVPROC getProgramParameterfvNV;
    PFNGLGETPROGRAMSTRINGARBPROC getProgramStringARB;
    PFNGLGETPROGRAMSTRINGNVPROC getProgramStringNV;
    PFNGLGETPROGRAMIVPROC getProgramiv;
    PFNGLGETPROGRAMIVARBPROC getProgramivARB;
    PFNGLGETPROGRAMIVNVPROC getProgramivNV;
    PFNGLGETQUERYOBJECTIVPROC getQueryObjectiv;
    PFNGLGETQUERYOBJECTIVARBPROC getQueryObjectivARB;
    PFNGLGETQUERYOBJECTUIVPROC getQueryObjectuiv;
    PFNGLGETQUERYOBJECTUIVARBPROC getQueryObjectuivARB;
    PFNGLGETQUERYIVPROC getQueryiv;
    PFNGLGETQUERYIVARBPROC getQueryivARB;
    PFNGLGETRENDERBUFFERPARAMETERIVPROC getRenderbufferParameteriv;
    PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC getRenderbufferParameterivEXT;
    PFNGLGETSHADERINFOLOGPROC getShaderInfoLog;
    PFNGLGETSHADERSOURCEPROC getShaderSource;
    PFNGLGETSHADERSOURCEARBPROC getShaderSourceARB;
    PFNGLGETSHADERIVPROC getShaderiv;
    PFNGLGETSTRINGPROC getString;
    PFNGLGETSTRINGIPROC getStringi;
    PFNGLGETSYNCIVPROC getSynciv;
    PFNGLGETTEXIMAGEPROC getTexImage;
    PFNGLGETTEXLEVELPARAMETERFVPROC getTexLevelParameterfv;
    PFNGLGETTEXLEVELPARAMETERIVPROC getTexLevelParameteriv;
    PFNGLGETTEXPARAMETERIIVPROC getTexParameterIiv;
    PFNGLGETTEXPARAMETERIIVEXTPROC getTexParameterIivEXT;
    PFNGLGETTEXPARAMETERIUIVPROC getTexParameterIuiv;
    PFNGLGETTEXPARAMETERIUIVEXTPROC getTexParameterIuivEXT;
    PFNGLGETTEXPARAMETERFVPROC getTexParameterfv;
    PFNGLGETTEXPARAMETERIVPROC getTexParameteriv;
    PFNGLGETTEXTUREIMAGEEXTPROC getTextureImageEXT;
    PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC getTextureLevelParameterfvEXT;
    PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC getTextureLevelParameterivEXT;
    PFNGLGETTEXTUREPARAMETERIIVEXTPROC getTextureParameterIivEXT;
    PFNGLGETTEXTUREPARAMETERIUIVEXTPROC getTextureParameterIuivEXT;
    PFNGLGETTEXTUREPARAMETERFVEXTPROC getTextureParameterfvEXT;
    PFNGLGETTEXTUREPARAMETERIVEXTPROC getTextureParameterivEXT;
    PFNGLGETTRACKMATRIXIVNVPROC getTrackMatrixivNV;
    PFNGLGETTRANSFORMFEEDBACKVARYINGPROC getTransformFeedbackVarying;
    PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC getTransformFeedbackVaryingEXT;
    PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC getTransformFeedbackVaryingNV;
    PFNGLGETUNIFORMBLOCKINDEXPROC getUniformBlockIndex;
    PFNGLGETUNIFORMINDICESPROC getUniformIndices;
    PFNGLGETUNIFORMLOCATIONPROC getUniformLocation;
    PFNGLGETUNIFORMLOCATIONARBPROC getUniformLocationARB;
    PFNGLGETUNIFORMFVPROC getUniformfv;
    PFNGLGETUNIFORMFVARBPROC getUniformfvARB;
    PFNGLGETUNIFORMIVPROC getUniformiv;
    PFNGLGETUNIFORMIVARBPROC getUniformivARB;
    PFNGLGETUNIFORMUIVPROC getUniformuiv;
    PFNGLGETUNIFORMUIVEXTPROC getUniformuivEXT;
    PFNGLGETVARYINGLOCATIONNVPROC getVaryingLocationNV;
    PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC getVertexArrayIntegeri_vEXT;
    PFNGLGETVERTEXARRAYINTEGERVEXTPROC getVertexArrayIntegervEXT;
    PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC getVertexArrayPointeri_vEXT;
    PFNGLGETVERTEXARRAYPOINTERVEXTPROC getVertexArrayPointervEXT;
    PFNGLGETVERTEXATTRIBIIVPROC getVertexAttribIiv;
    PFNGLGETVERTEXATTRIBIIVEXTPROC getVertexAttribIivEXT;
    PFNGLGETVERTEXATTRIBIUIVPROC getVertexAttribIuiv;
    PFNGLGETVERTEXATTRIBIUIVEXTPROC getVertexAttribIuivEXT;
    PFNGLGETVERTEXATTRIBPOINTERVPROC getVertexAttribPointerv;
    PFNGLGETVERTEXATTRIBPOINTERVARBPROC getVertexAttribPointervARB;
    PFNGLGETVERTEXATTRIBPOINTERVNVPROC getVertexAttribPointervNV;
    PFNGLGETVERTEXATTRIBDVPROC getVertexAttribdv;
    PFNGLGETVERTEXATTRIBDVARBPROC getVertexAttribdvARB;
    PFNGLGETVERTEXATTRIBDVNVPROC getVertexAttribdvNV;
    PFNGLGETVERTEXATTRIBFVPROC getVertexAttribfv;
    PFNGLGETVERTEXATTRIBFVARBPROC getVertexAttribfvARB;
    PFNGLGETVERTEXATTRIBFVNVPROC getVertexAttribfvNV;
    PFNGLGETVERTEXATTRIBIVPROC getVertexAttribiv;
    PFNGLGETVERTEXATTRIBIVARBPROC getVertexAttribivARB;
    PFNGLGETVERTEXATTRIBIVNVPROC getVertexAttribivNV;
    PFNGLHINTPROC hint;
    PFNGLINDEXPOINTEREXTPROC indexPointerEXT;
    PFNGLISBUFFERPROC isBuffer;
    PFNGLISBUFFERARBPROC isBufferARB;
    PFNGLISENABLEDPROC isEnabled;
    PFNGLISENABLEDINDEXEDEXTPROC isEnabledIndexedEXT;
    PFNGLISENABLEDIPROC isEnabledi;
    PFNGLISFRAMEBUFFERPROC isFramebuffer;
    PFNGLISFRAMEBUFFEREXTPROC isFramebufferEXT;
    PFNGLISPROGRAMPROC isProgram;
    PFNGLISPROGRAMARBPROC isProgramARB;
    PFNGLISPROGRAMNVPROC isProgramNV;
    PFNGLISQUERYPROC isQuery;
    PFNGLISQUERYARBPROC isQueryARB;
    PFNGLISRENDERBUFFERPROC isRenderbuffer;
    PFNGLISRENDERBUFFEREXTPROC isRenderbufferEXT;
    PFNGLISSHADERPROC isShader;
    PFNGLISSYNCPROC isSync;
    PFNGLISTEXTUREPROC isTexture;
    PFNGLISTEXTUREEXTPROC isTextureEXT;
    PFNGLISVERTEXARRAYPROC isVertexArray;
    PFNGLISVERTEXARRAYAPPLEPROC isVertexArrayAPPLE;
    PFNGLLINEWIDTHPROC lineWidth;
    PFNGLLINKPROGRAMPROC linkProgram;
    PFNGLLINKPROGRAMARBPROC linkProgramARB;
    PFNGLLOADPROGRAMNVPROC loadProgramNV;
    PFNGLLOGICOPPROC logicOp;
    PFNGLMAPBUFFERPROC mapBuffer;
    PFNGLMAPBUFFERARBPROC mapBufferARB;
    PFNGLMAPBUFFERRANGEPROC mapBufferRange;
    PFNGLMAPNAMEDBUFFEREXTPROC mapNamedBufferEXT;
    PFNGLMAPNAMEDBUFFERRANGEEXTPROC mapNamedBufferRangeEXT;
    PFNGLMATRIXFRUSTUMEXTPROC matrixFrustumEXT;
    PFNGLMATRIXLOADIDENTITYEXTPROC matrixLoadIdentityEXT;
    PFNGLMATRIXLOADTRANSPOSEDEXTPROC matrixLoadTransposedEXT;
    PFNGLMATRIXLOADTRANSPOSEFEXTPROC matrixLoadTransposefEXT;
    PFNGLMATRIXLOADDEXTPROC matrixLoaddEXT;
    PFNGLMATRIXLOADFEXTPROC matrixLoadfEXT;
    PFNGLMATRIXMULTTRANSPOSEDEXTPROC matrixMultTransposedEXT;
    PFNGLMATRIXMULTTRANSPOSEFEXTPROC matrixMultTransposefEXT;
    PFNGLMATRIXMULTDEXTPROC matrixMultdEXT;
    PFNGLMATRIXMULTFEXTPROC matrixMultfEXT;
    PFNGLMATRIXORTHOEXTPROC matrixOrthoEXT;
    PFNGLMATRIXPOPEXTPROC matrixPopEXT;
    PFNGLMATRIXPUSHEXTPROC matrixPushEXT;
    PFNGLMATRIXROTATEDEXTPROC matrixRotatedEXT;
    PFNGLMATRIXROTATEFEXTPROC matrixRotatefEXT;
    PFNGLMATRIXSCALEDEXTPROC matrixScaledEXT;
    PFNGLMATRIXSCALEFEXTPROC matrixScalefEXT;
    PFNGLMATRIXTRANSLATEDEXTPROC matrixTranslatedEXT;
    PFNGLMATRIXTRANSLATEFEXTPROC matrixTranslatefEXT;
    PFNGLMULTIDRAWARRAYSPROC multiDrawArrays;
    PFNGLMULTIDRAWARRAYSEXTPROC multiDrawArraysEXT;
    PFNGLMULTIDRAWELEMENTSPROC multiDrawElements;
    PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC multiDrawElementsBaseVertex;
    PFNGLMULTIDRAWELEMENTSEXTPROC multiDrawElementsEXT;
    PFNGLMULTITEXBUFFEREXTPROC multiTexBufferEXT;
    PFNGLMULTITEXCOORD1DARBPROC multiTexCoord1dARB;
    PFNGLMULTITEXCOORD1DVARBPROC multiTexCoord1dvARB;
    PFNGLMULTITEXCOORD1FARBPROC multiTexCoord1fARB;
    PFNGLMULTITEXCOORD1FVARBPROC multiTexCoord1fvARB;
    PFNGLMULTITEXCOORD1IARBPROC multiTexCoord1iARB;
    PFNGLMULTITEXCOORD1IVARBPROC multiTexCoord1ivARB;
    PFNGLMULTITEXCOORD1SARBPROC multiTexCoord1sARB;
    PFNGLMULTITEXCOORD1SVARBPROC multiTexCoord1svARB;
    PFNGLMULTITEXCOORD2DARBPROC multiTexCoord2dARB;
    PFNGLMULTITEXCOORD2DVARBPROC multiTexCoord2dvARB;
    PFNGLMULTITEXCOORD2FARBPROC multiTexCoord2fARB;
    PFNGLMULTITEXCOORD2FVARBPROC multiTexCoord2fvARB;
    PFNGLMULTITEXCOORD2IARBPROC multiTexCoord2iARB;
    PFNGLMULTITEXCOORD2IVARBPROC multiTexCoord2ivARB;
    PFNGLMULTITEXCOORD2SARBPROC multiTexCoord2sARB;
    PFNGLMULTITEXCOORD2SVARBPROC multiTexCoord2svARB;
    PFNGLMULTITEXCOORD3DARBPROC multiTexCoord3dARB;
    PFNGLMULTITEXCOORD3DVARBPROC multiTexCoord3dvARB;
    PFNGLMULTITEXCOORD3FARBPROC multiTexCoord3fARB;
    PFNGLMULTITEXCOORD3FVARBPROC multiTexCoord3fvARB;
    PFNGLMULTITEXCOORD3IARBPROC multiTexCoord3iARB;
    PFNGLMULTITEXCOORD3IVARBPROC multiTexCoord3ivARB;
    PFNGLMULTITEXCOORD3SARBPROC multiTexCoord3sARB;
    PFNGLMULTITEXCOORD3SVARBPROC multiTexCoord3svARB;
    PFNGLMULTITEXCOORD4DARBPROC multiTexCoord4dARB;
    PFNGLMULTITEXCOORD4DVARBPROC multiTexCoord4dvARB;
    PFNGLMULTITEXCOORD4FARBPROC multiTexCoord4fARB;
    PFNGLMULTITEXCOORD4FVARBPROC multiTexCoord4fvARB;
    PFNGLMULTITEXCOORD4IARBPROC multiTexCoord4iARB;
    PFNGLMULTITEXCOORD4IVARBPROC multiTexCoord4ivARB;
    PFNGLMULTITEXCOORD4SARBPROC multiTexCoord4sARB;
    PFNGLMULTITEXCOORD4SVARBPROC multiTexCoord4svARB;
    PFNGLMULTITEXCOORDPOINTEREXTPROC multiTexCoordPointerEXT;
    PFNGLMULTITEXENVFEXTPROC multiTexEnvfEXT;
    PFNGLMULTITEXENVFVEXTPROC multiTexEnvfvEXT;
    PFNGLMULTITEXENVIEXTPROC multiTexEnviEXT;
    PFNGLMULTITEXENVIVEXTPROC multiTexEnvivEXT;
    PFNGLMULTITEXGENDEXTPROC multiTexGendEXT;
    PFNGLMULTITEXGENDVEXTPROC multiTexGendvEXT;
    PFNGLMULTITEXGENFEXTPROC multiTexGenfEXT;
    PFNGLMULTITEXGENFVEXTPROC multiTexGenfvEXT;
    PFNGLMULTITEXGENIEXTPROC multiTexGeniEXT;
    PFNGLMULTITEXGENIVEXTPROC multiTexGenivEXT;
    PFNGLMULTITEXIMAGE1DEXTPROC multiTexImage1DEXT;
    PFNGLMULTITEXIMAGE2DEXTPROC multiTexImage2DEXT;
    PFNGLMULTITEXIMAGE3DEXTPROC multiTexImage3DEXT;
    PFNGLMULTITEXPARAMETERIIVEXTPROC multiTexParameterIivEXT;
    PFNGLMULTITEXPARAMETERIUIVEXTPROC multiTexParameterIuivEXT;
    PFNGLMULTITEXPARAMETERFEXTPROC multiTexParameterfEXT;
    PFNGLMULTITEXPARAMETERFVEXTPROC multiTexParameterfvEXT;
    PFNGLMULTITEXPARAMETERIEXTPROC multiTexParameteriEXT;
    PFNGLMULTITEXPARAMETERIVEXTPROC multiTexParameterivEXT;
    PFNGLMULTITEXRENDERBUFFEREXTPROC multiTexRenderbufferEXT;
    PFNGLMULTITEXSUBIMAGE1DEXTPROC multiTexSubImage1DEXT;
    PFNGLMULTITEXSUBIMAGE2DEXTPROC multiTexSubImage2DEXT;
    PFNGLMULTITEXSUBIMAGE3DEXTPROC multiTexSubImage3DEXT;
    PFNGLNAMEDBUFFERDATAEXTPROC namedBufferDataEXT;
    PFNGLNAMEDBUFFERSTORAGEEXTPROC namedBufferStorageEXT;
    PFNGLNAMEDBUFFERSUBDATAEXTPROC namedBufferSubDataEXT;
    PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC namedCopyBufferSubDataEXT;
    PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC namedFramebufferParameteriEXT;
    PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC namedFramebufferRenderbufferEXT;
    PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC namedFramebufferTexture1DEXT;
    PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC namedFramebufferTexture2DEXT;
    PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC namedFramebufferTexture3DEXT;
    PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC namedFramebufferTextureEXT;
    PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC namedFramebufferTextureFaceEXT;
    PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC namedFramebufferTextureLayerEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC namedProgramLocalParameter4dEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC namedProgramLocalParameter4dvEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC namedProgramLocalParameter4fEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC namedProgramLocalParameter4fvEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC namedProgramLocalParameterI4iEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC namedProgramLocalParameterI4ivEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC namedProgramLocalParameterI4uiEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC namedProgramLocalParameterI4uivEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC namedProgramLocalParameters4fvEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC namedProgramLocalParametersI4ivEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC namedProgramLocalParametersI4uivEXT;
    PFNGLNAMEDPROGRAMSTRINGEXTPROC namedProgramStringEXT;
    PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC namedRenderbufferStorageEXT;
    PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC namedRenderbufferStorageMultisampleCoverageEXT;
    PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC namedRenderbufferStorageMultisampleEXT;
    PFNGLNORMALPOINTEREXTPROC normalPointerEXT;
    PFNGLPIXELSTOREFPROC pixelStoref;
    PFNGLPIXELSTOREIPROC pixelStorei;
    PFNGLPOINTPARAMETERFPROC pointParameterf;
    PFNGLPOINTPARAMETERFARBPROC pointParameterfARB;
    PFNGLPOINTPARAMETERFEXTPROC pointParameterfEXT;
    PFNGLPOINTPARAMETERFSGISPROC pointParameterfSGIS;
    PFNGLPOINTPARAMETERFVPROC pointParameterfv;
    PFNGLPOINTPARAMETERFVARBPROC pointParameterfvARB;
    PFNGLPOINTPARAMETERFVEXTPROC pointParameterfvEXT;
    PFNGLPOINTPARAMETERFVSGISPROC pointParameterfvSGIS;
    PFNGLPOINTPARAMETERIPROC pointParameteri;
    PFNGLPOINTPARAMETERINVPROC pointParameteriNV;
    PFNGLPOINTPARAMETERIVPROC pointParameteriv;
    PFNGLPOINTPARAMETERIVNVPROC pointParameterivNV;
    PFNGLPOINTSIZEPROC pointSize;
    PFNGLPOLYGONMODEPROC polygonMode;
    PFNGLPOLYGONOFFSETPROC polygonOffset;
    PFNGLPRIMITIVERESTARTINDEXPROC primitiveRestartIndex;
    PFNGLPRIORITIZETEXTURESEXTPROC prioritizeTexturesEXT;
    PFNGLPROGRAMENVPARAMETER4DARBPROC programEnvParameter4dARB;
    PFNGLPROGRAMENVPARAMETER4DVARBPROC programEnvParameter4dvARB;
    PFNGLPROGRAMENVPARAMETER4FARBPROC programEnvParameter4fARB;
    PFNGLPROGRAMENVPARAMETER4FVARBPROC programEnvParameter4fvARB;
    PFNGLPROGRAMLOCALPARAMETER4DARBPROC programLocalParameter4dARB;
    PFNGLPROGRAMLOCALPARAMETER4DVARBPROC programLocalParameter4dvARB;
    PFNGLPROGRAMLOCALPARAMETER4FARBPROC programLocalParameter4fARB;
    PFNGLPROGRAMLOCALPARAMETER4FVARBPROC programLocalParameter4fvARB;
    PFNGLPROGRAMPARAMETER4DNVPROC programParameter4dNV;
    PFNGLPROGRAMPARAMETER4DVNVPROC programParameter4dvNV;
    PFNGLPROGRAMPARAMETER4FNVPROC programParameter4fNV;
    PFNGLPROGRAMPARAMETER4FVNVPROC programParameter4fvNV;
    PFNGLPROGRAMPARAMETERIARBPROC programParameteriARB;
    PFNGLPROGRAMPARAMETERS4DVNVPROC programParameters4dvNV;
    PFNGLPROGRAMPARAMETERS4FVNVPROC programParameters4fvNV;
    PFNGLPROGRAMSTRINGARBPROC programStringARB;
    PFNGLPROGRAMUNIFORM1DEXTPROC programUniform1dEXT;
    PFNGLPROGRAMUNIFORM1DVEXTPROC programUniform1dvEXT;
    PFNGLPROGRAMUNIFORM1FEXTPROC programUniform1fEXT;
    PFNGLPROGRAMUNIFORM1FVEXTPROC programUniform1fvEXT;
    PFNGLPROGRAMUNIFORM1IEXTPROC programUniform1iEXT;
    PFNGLPROGRAMUNIFORM1IVEXTPROC programUniform1ivEXT;
    PFNGLPROGRAMUNIFORM1UIEXTPROC programUniform1uiEXT;
    PFNGLPROGRAMUNIFORM1UIVEXTPROC programUniform1uivEXT;
    PFNGLPROGRAMUNIFORM2DEXTPROC programUniform2dEXT;
    PFNGLPROGRAMUNIFORM2DVEXTPROC programUniform2dvEXT;
    PFNGLPROGRAMUNIFORM2FEXTPROC programUniform2fEXT;
    PFNGLPROGRAMUNIFORM2FVEXTPROC programUniform2fvEXT;
    PFNGLPROGRAMUNIFORM2IEXTPROC programUniform2iEXT;
    PFNGLPROGRAMUNIFORM2IVEXTPROC programUniform2ivEXT;
    PFNGLPROGRAMUNIFORM2UIEXTPROC programUniform2uiEXT;
    PFNGLPROGRAMUNIFORM2UIVEXTPROC programUniform2uivEXT;
    PFNGLPROGRAMUNIFORM3DEXTPROC programUniform3dEXT;
    PFNGLPROGRAMUNIFORM3DVEXTPROC programUniform3dvEXT;
    PFNGLPROGRAMUNIFORM3FEXTPROC programUniform3fEXT;
    PFNGLPROGRAMUNIFORM3FVEXTPROC programUniform3fvEXT;
    PFNGLPROGRAMUNIFORM3IEXTPROC programUniform3iEXT;
    PFNGLPROGRAMUNIFORM3IVEXTPROC programUniform3ivEXT;
    PFNGLPROGRAMUNIFORM3UIEXTPROC programUniform3uiEXT;
    PFNGLPROGRAMUNIFORM3UIVEXTPROC programUniform3uivEXT;
    PFNGLPROGRAMUNIFORM4DEXTPROC programUniform4dEXT;
    PFNGLPROGRAMUNIFORM4DVEXTPROC programUniform4dvEXT;
    PFNGLPROGRAMUNIFORM4FEXTPROC programUniform4fEXT;
    PFNGLPROGRAMUNIFORM4FVEXTPROC programUniform4fvEXT;
    PFNGLPROGRAMUNIFORM4IEXTPROC programUniform4iEXT;
    PFNGLPROGRAMUNIFORM4IVEXTPROC programUniform4ivEXT;
    PFNGLPROGRAMUNIFORM4UIEXTPROC programUniform4uiEXT;
    PFNGLPROGRAMUNIFORM4UIVEXTPROC programUniform4uivEXT;
    PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC programUniformMatrix2dvEXT;
    PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC programUniformMatrix2fvEXT;
    PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC programUniformMatrix2x3dvEXT;
    PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC programUniformMatrix2x3fvEXT;
    PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC programUniformMatrix2x4dvEXT;
    PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC programUniformMatrix2x4fvEXT;
    PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC programUniformMatrix3dvEXT;
    PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC programUniformMatrix3fvEXT;
    PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC programUniformMatrix3x2dvEXT;
    PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC programUniformMatrix3x2fvEXT;
    PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC programUniformMatrix3x4dvEXT;
    PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC programUniformMatrix3x4fvEXT;
    PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC programUniformMatrix4dvEXT;
    PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC programUniformMatrix4fvEXT;
    PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC programUniformMatrix4x2dvEXT;
    PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC programUniformMatrix4x2fvEXT;
    PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC programUniformMatrix4x3dvEXT;
    PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC programUniformMatrix4x3fvEXT;
    PFNGLPROGRAMVERTEXLIMITNVPROC programVertexLimitNV;
    PFNGLPROVOKINGVERTEXPROC provokingVertex;
    PFNGLPROVOKINGVERTEXEXTPROC provokingVertexEXT;
    PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC pushClientAttribDefaultEXT;
    PFNGLREADBUFFERPROC readBuffer;
    PFNGLREADPIXELSPROC readPixels;
    PFNGLRENDERBUFFERSTORAGEPROC renderbufferStorage;
    PFNGLRENDERBUFFERSTORAGEEXTPROC renderbufferStorageEXT;
    PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC renderbufferStorageMultisample;
    PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC renderbufferStorageMultisampleEXT;
    PFNGLREQUESTRESIDENTPROGRAMSNVPROC requestResidentProgramsNV;
    PFNGLSAMPLECOVERAGEPROC sampleCoverage;
    PFNGLSAMPLECOVERAGEARBPROC sampleCoverageARB;
    PFNGLSAMPLEMASKINDEXEDNVPROC sampleMaskIndexedNV;
    PFNGLSAMPLEMASKIPROC sampleMaski;
    PFNGLSCISSORPROC scissor;
    PFNGLSHADERSOURCEPROC shaderSource;
    PFNGLSHADERSOURCEARBPROC shaderSourceARB;
    PFNGLSTENCILFUNCPROC stencilFunc;
    PFNGLSTENCILFUNCSEPARATEPROC stencilFuncSeparate;
    PFNGLSTENCILFUNCSEPARATEATIPROC stencilFuncSeparateATI;
    PFNGLSTENCILMASKPROC stencilMask;
    PFNGLSTENCILMASKSEPARATEPROC stencilMaskSeparate;
    PFNGLSTENCILOPPROC stencilOp;
    PFNGLSTENCILOPSEPARATEPROC stencilOpSeparate;
    PFNGLSTENCILOPSEPARATEATIPROC stencilOpSeparateATI;
    PFNGLTEXBUFFERPROC texBuffer;
    PFNGLTEXBUFFERARBPROC texBufferARB;
    PFNGLTEXBUFFEREXTPROC texBufferEXT;
    PFNGLTEXCOORDPOINTEREXTPROC texCoordPointerEXT;
    PFNGLTEXIMAGE1DPROC texImage1D;
    PFNGLTEXIMAGE2DPROC texImage2D;
    PFNGLTEXIMAGE2DMULTISAMPLEPROC texImage2DMultisample;
    PFNGLTEXIMAGE3DPROC texImage3D;
    PFNGLTEXIMAGE3DEXTPROC texImage3DEXT;
    PFNGLTEXIMAGE3DMULTISAMPLEPROC texImage3DMultisample;
    PFNGLTEXPARAMETERIIVPROC texParameterIiv;
    PFNGLTEXPARAMETERIIVEXTPROC texParameterIivEXT;
    PFNGLTEXPARAMETERIUIVPROC texParameterIuiv;
    PFNGLTEXPARAMETERIUIVEXTPROC texParameterIuivEXT;
    PFNGLTEXPARAMETERFPROC texParameterf;
    PFNGLTEXPARAMETERFVPROC texParameterfv;
    PFNGLTEXPARAMETERIPROC texParameteri;
    PFNGLTEXPARAMETERIVPROC texParameteriv;
    PFNGLTEXRENDERBUFFERNVPROC texRenderbufferNV;
    PFNGLTEXSUBIMAGE1DPROC texSubImage1D;
    PFNGLTEXSUBIMAGE1DEXTPROC texSubImage1DEXT;
    PFNGLTEXSUBIMAGE2DPROC texSubImage2D;
    PFNGLTEXSUBIMAGE2DEXTPROC texSubImage2DEXT;
    PFNGLTEXSUBIMAGE3DPROC texSubImage3D;
    PFNGLTEXSUBIMAGE3DEXTPROC texSubImage3DEXT;
    PFNGLTEXTUREBUFFEREXTPROC textureBufferEXT;
    PFNGLTEXTUREBUFFERRANGEEXTPROC textureBufferRangeEXT;
    PFNGLTEXTUREIMAGE1DEXTPROC textureImage1DEXT;
    PFNGLTEXTUREIMAGE2DEXTPROC textureImage2DEXT;
    PFNGLTEXTUREIMAGE3DEXTPROC textureImage3DEXT;
    PFNGLTEXTUREPAGECOMMITMENTEXTPROC texturePageCommitmentEXT;
    PFNGLTEXTUREPARAMETERIIVEXTPROC textureParameterIivEXT;
    PFNGLTEXTUREPARAMETERIUIVEXTPROC textureParameterIuivEXT;
    PFNGLTEXTUREPARAMETERFEXTPROC textureParameterfEXT;
    PFNGLTEXTUREPARAMETERFVEXTPROC textureParameterfvEXT;
    PFNGLTEXTUREPARAMETERIEXTPROC textureParameteriEXT;
    PFNGLTEXTUREPARAMETERIVEXTPROC textureParameterivEXT;
    PFNGLTEXTURERENDERBUFFEREXTPROC textureRenderbufferEXT;
    PFNGLTEXTURESTORAGE1DEXTPROC textureStorage1DEXT;
    PFNGLTEXTURESTORAGE2DEXTPROC textureStorage2DEXT;
    PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC textureStorage2DMultisampleEXT;
    PFNGLTEXTURESTORAGE3DEXTPROC textureStorage3DEXT;
    PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC textureStorage3DMultisampleEXT;
    PFNGLTEXTURESUBIMAGE1DEXTPROC textureSubImage1DEXT;
    PFNGLTEXTURESUBIMAGE2DEXTPROC textureSubImage2DEXT;
    PFNGLTEXTURESUBIMAGE3DEXTPROC textureSubImage3DEXT;
    PFNGLTRACKMATRIXNVPROC trackMatrixNV;
    PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC transformFeedbackAttribsNV;
    PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC transformFeedbackStreamAttribsNV;
    PFNGLTRANSFORMFEEDBACKVARYINGSPROC transformFeedbackVaryings;
    PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC transformFeedbackVaryingsEXT;
    PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC transformFeedbackVaryingsNV;
    PFNGLUNIFORM1FPROC uniform1f;
    PFNGLUNIFORM1FARBPROC uniform1fARB;
    PFNGLUNIFORM1FVPROC uniform1fv;
    PFNGLUNIFORM1FVARBPROC uniform1fvARB;
    PFNGLUNIFORM1IPROC uniform1i;
    PFNGLUNIFORM1IARBPROC uniform1iARB;
    PFNGLUNIFORM1IVPROC uniform1iv;
    PFNGLUNIFORM1IVARBPROC uniform1ivARB;
    PFNGLUNIFORM1UIPROC uniform1ui;
    PFNGLUNIFORM1UIEXTPROC uniform1uiEXT;
    PFNGLUNIFORM1UIVPROC uniform1uiv;
    PFNGLUNIFORM1UIVEXTPROC uniform1uivEXT;
    PFNGLUNIFORM2FPROC uniform2f;
    PFNGLUNIFORM2FARBPROC uniform2fARB;
    PFNGLUNIFORM2FVPROC uniform2fv;
    PFNGLUNIFORM2FVARBPROC uniform2fvARB;
    PFNGLUNIFORM2IPROC uniform2i;
    PFNGLUNIFORM2IARBPROC uniform2iARB;
    PFNGLUNIFORM2IVPROC uniform2iv;
    PFNGLUNIFORM2IVARBPROC uniform2ivARB;
    PFNGLUNIFORM2UIPROC uniform2ui;
    PFNGLUNIFORM2UIEXTPROC uniform2uiEXT;
    PFNGLUNIFORM2UIVPROC uniform2uiv;
    PFNGLUNIFORM2UIVEXTPROC uniform2uivEXT;
    PFNGLUNIFORM3FPROC uniform3f;
    PFNGLUNIFORM3FARBPROC uniform3fARB;
    PFNGLUNIFORM3FVPROC uniform3fv;
    PFNGLUNIFORM3FVARBPROC uniform3fvARB;
    PFNGLUNIFORM3IPROC uniform3i;
    PFNGLUNIFORM3IARBPROC uniform3iARB;
    PFNGLUNIFORM3IVPROC uniform3iv;
    PFNGLUNIFORM3IVARBPROC uniform3ivARB;
    PFNGLUNIFORM3UIPROC uniform3ui;
    PFNGLUNIFORM3UIEXTPROC uniform3uiEXT;
    PFNGLUNIFORM3UIVPROC uniform3uiv;
    PFNGLUNIFORM3UIVEXTPROC uniform3uivEXT;
    PFNGLUNIFORM4FPROC uniform4f;
    PFNGLUNIFORM4FARBPROC uniform4fARB;
    PFNGLUNIFORM4FVPROC uniform4fv;
    PFNGLUNIFORM4FVARBPROC uniform4fvARB;
    PFNGLUNIFORM4IPROC uniform4i;
    PFNGLUNIFORM4IARBPROC uniform4iARB;
    PFNGLUNIFORM4IVPROC uniform4iv;
    PFNGLUNIFORM4IVARBPROC uniform4ivARB;
    PFNGLUNIFORM4UIPROC uniform4ui;
    PFNGLUNIFORM4UIEXTPROC uniform4uiEXT;
    PFNGLUNIFORM4UIVPROC uniform4uiv;
    PFNGLUNIFORM4UIVEXTPROC uniform4uivEXT;
    PFNGLUNIFORMBLOCKBINDINGPROC uniformBlockBinding;
    PFNGLUNIFORMMATRIX2FVPROC uniformMatrix2fv;
    PFNGLUNIFORMMATRIX2FVARBPROC uniformMatrix2fvARB;
    PFNGLUNIFORMMATRIX2X3FVPROC uniformMatrix2x3fv;
    PFNGLUNIFORMMATRIX2X4FVPROC uniformMatrix2x4fv;
    PFNGLUNIFORMMATRIX3FVPROC uniformMatrix3fv;
    PFNGLUNIFORMMATRIX3FVARBPROC uniformMatrix3fvARB;
    PFNGLUNIFORMMATRIX3X2FVPROC uniformMatrix3x2fv;
    PFNGLUNIFORMMATRIX3X4FVPROC uniformMatrix3x4fv;
    PFNGLUNIFORMMATRIX4FVPROC uniformMatrix4fv;
    PFNGLUNIFORMMATRIX4FVARBPROC uniformMatrix4fvARB;
    PFNGLUNIFORMMATRIX4X2FVPROC uniformMatrix4x2fv;
    PFNGLUNIFORMMATRIX4X3FVPROC uniformMatrix4x3fv;
    PFNGLUNMAPBUFFERPROC unmapBuffer;
    PFNGLUNMAPBUFFERARBPROC unmapBufferARB;
    PFNGLUNMAPNAMEDBUFFEREXTPROC unmapNamedBufferEXT;
    PFNGLUSEPROGRAMPROC useProgram;
    PFNGLUSEPROGRAMOBJECTARBPROC useProgramObjectARB;
    PFNGLVALIDATEPROGRAMPROC validateProgram;
    PFNGLVALIDATEPROGRAMARBPROC validateProgramARB;
    PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC vertexArrayBindVertexBufferEXT;
    PFNGLVERTEXARRAYCOLOROFFSETEXTPROC vertexArrayColorOffsetEXT;
    PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC vertexArrayEdgeFlagOffsetEXT;
    PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC vertexArrayFogCoordOffsetEXT;
    PFNGLVERTEXARRAYINDEXOFFSETEXTPROC vertexArrayIndexOffsetEXT;
    PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC vertexArrayMultiTexCoordOffsetEXT;
    PFNGLVERTEXARRAYNORMALOFFSETEXTPROC vertexArrayNormalOffsetEXT;
    PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC vertexArraySecondaryColorOffsetEXT;
    PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC vertexArrayTexCoordOffsetEXT;
    PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC vertexArrayVertexAttribBindingEXT;
    PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC vertexArrayVertexAttribDivisorEXT;
    PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC vertexArrayVertexAttribFormatEXT;
    PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC vertexArrayVertexAttribIFormatEXT;
    PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC vertexArrayVertexAttribIOffsetEXT;
    PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC vertexArrayVertexAttribLFormatEXT;
    PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC vertexArrayVertexAttribLOffsetEXT;
    PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC vertexArrayVertexAttribOffsetEXT;
    PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC vertexArrayVertexBindingDivisorEXT;
    PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC vertexArrayVertexOffsetEXT;
    PFNGLVERTEXATTRIB1DPROC vertexAttrib1d;
    PFNGLVERTEXATTRIB1DARBPROC vertexAttrib1dARB;
    PFNGLVERTEXATTRIB1DNVPROC vertexAttrib1dNV;
    PFNGLVERTEXATTRIB1DVPROC vertexAttrib1dv;
    PFNGLVERTEXATTRIB1DVARBPROC vertexAttrib1dvARB;
    PFNGLVERTEXATTRIB1DVNVPROC vertexAttrib1dvNV;
    PFNGLVERTEXATTRIB1FPROC vertexAttrib1f;
    PFNGLVERTEXATTRIB1FARBPROC vertexAttrib1fARB;
    PFNGLVERTEXATTRIB1FNVPROC vertexAttrib1fNV;
    PFNGLVERTEXATTRIB1FVPROC vertexAttrib1fv;
    PFNGLVERTEXATTRIB1FVARBPROC vertexAttrib1fvARB;
    PFNGLVERTEXATTRIB1FVNVPROC vertexAttrib1fvNV;
    PFNGLVERTEXATTRIB1SPROC vertexAttrib1s;
    PFNGLVERTEXATTRIB1SARBPROC vertexAttrib1sARB;
    PFNGLVERTEXATTRIB1SNVPROC vertexAttrib1sNV;
    PFNGLVERTEXATTRIB1SVPROC vertexAttrib1sv;
    PFNGLVERTEXATTRIB1SVARBPROC vertexAttrib1svARB;
    PFNGLVERTEXATTRIB1SVNVPROC vertexAttrib1svNV;
    PFNGLVERTEXATTRIB2DPROC vertexAttrib2d;
    PFNGLVERTEXATTRIB2DARBPROC vertexAttrib2dARB;
    PFNGLVERTEXATTRIB2DNVPROC vertexAttrib2dNV;
    PFNGLVERTEXATTRIB2DVPROC vertexAttrib2dv;
    PFNGLVERTEXATTRIB2DVARBPROC vertexAttrib2dvARB;
    PFNGLVERTEXATTRIB2DVNVPROC vertexAttrib2dvNV;
    PFNGLVERTEXATTRIB2FPROC vertexAttrib2f;
    PFNGLVERTEXATTRIB2FARBPROC vertexAttrib2fARB;
    PFNGLVERTEXATTRIB2FNVPROC vertexAttrib2fNV;
    PFNGLVERTEXATTRIB2FVPROC vertexAttrib2fv;
    PFNGLVERTEXATTRIB2FVARBPROC vertexAttrib2fvARB;
    PFNGLVERTEXATTRIB2FVNVPROC vertexAttrib2fvNV;
    PFNGLVERTEXATTRIB2SPROC vertexAttrib2s;
    PFNGLVERTEXATTRIB2SARBPROC vertexAttrib2sARB;
    PFNGLVERTEXATTRIB2SNVPROC vertexAttrib2sNV;
    PFNGLVERTEXATTRIB2SVPROC vertexAttrib2sv;
    PFNGLVERTEXATTRIB2SVARBPROC vertexAttrib2svARB;
    PFNGLVERTEXATTRIB2SVNVPROC vertexAttrib2svNV;
    PFNGLVERTEXATTRIB3DPROC vertexAttrib3d;
    PFNGLVERTEXATTRIB3DARBPROC vertexAttrib3dARB;
    PFNGLVERTEXATTRIB3DNVPROC vertexAttrib3dNV;
    PFNGLVERTEXATTRIB3DVPROC vertexAttrib3dv;
    PFNGLVERTEXATTRIB3DVARBPROC vertexAttrib3dvARB;
    PFNGLVERTEXATTRIB3DVNVPROC vertexAttrib3dvNV;
    PFNGLVERTEXATTRIB3FPROC vertexAttrib3f;
    PFNGLVERTEXATTRIB3FARBPROC vertexAttrib3fARB;
    PFNGLVERTEXATTRIB3FNVPROC vertexAttrib3fNV;
    PFNGLVERTEXATTRIB3FVPROC vertexAttrib3fv;
    PFNGLVERTEXATTRIB3FVARBPROC vertexAttrib3fvARB;
    PFNGLVERTEXATTRIB3FVNVPROC vertexAttrib3fvNV;
    PFNGLVERTEXATTRIB3SPROC vertexAttrib3s;
    PFNGLVERTEXATTRIB3SARBPROC vertexAttrib3sARB;
    PFNGLVERTEXATTRIB3SNVPROC vertexAttrib3sNV;
    PFNGLVERTEXATTRIB3SVPROC vertexAttrib3sv;
    PFNGLVERTEXATTRIB3SVARBPROC vertexAttrib3svARB;
    PFNGLVERTEXATTRIB3SVNVPROC vertexAttrib3svNV;
    PFNGLVERTEXATTRIB4NBVPROC vertexAttrib4Nbv;
    PFNGLVERTEXATTRIB4NBVARBPROC vertexAttrib4NbvARB;
    PFNGLVERTEXATTRIB4NIVPROC vertexAttrib4Niv;
    PFNGLVERTEXATTRIB4NIVARBPROC vertexAttrib4NivARB;
    PFNGLVERTEXATTRIB4NSVPROC vertexAttrib4Nsv;
    PFNGLVERTEXATTRIB4NSVARBPROC vertexAttrib4NsvARB;
    PFNGLVERTEXATTRIB4NUBPROC vertexAttrib4Nub;
    PFNGLVERTEXATTRIB4NUBARBPROC vertexAttrib4NubARB;
    PFNGLVERTEXATTRIB4NUBVPROC vertexAttrib4Nubv;
    PFNGLVERTEXATTRIB4NUBVARBPROC vertexAttrib4NubvARB;
    PFNGLVERTEXATTRIB4NUIVPROC vertexAttrib4Nuiv;
    PFNGLVERTEXATTRIB4NUIVARBPROC vertexAttrib4NuivARB;
    PFNGLVERTEXATTRIB4NUSVPROC vertexAttrib4Nusv;
    PFNGLVERTEXATTRIB4NUSVARBPROC vertexAttrib4NusvARB;
    PFNGLVERTEXATTRIB4BVPROC vertexAttrib4bv;
    PFNGLVERTEXATTRIB4BVARBPROC vertexAttrib4bvARB;
    PFNGLVERTEXATTRIB4DPROC vertexAttrib4d;
    PFNGLVERTEXATTRIB4DARBPROC vertexAttrib4dARB;
    PFNGLVERTEXATTRIB4DNVPROC vertexAttrib4dNV;
    PFNGLVERTEXATTRIB4DVPROC vertexAttrib4dv;
    PFNGLVERTEXATTRIB4DVARBPROC vertexAttrib4dvARB;
    PFNGLVERTEXATTRIB4DVNVPROC vertexAttrib4dvNV;
    PFNGLVERTEXATTRIB4FPROC vertexAttrib4f;
    PFNGLVERTEXATTRIB4FARBPROC vertexAttrib4fARB;
    PFNGLVERTEXATTRIB4FNVPROC vertexAttrib4fNV;
    PFNGLVERTEXATTRIB4FVPROC vertexAttrib4fv;
    PFNGLVERTEXATTRIB4FVARBPROC vertexAttrib4fvARB;
    PFNGLVERTEXATTRIB4FVNVPROC vertexAttrib4fvNV;
    PFNGLVERTEXATTRIB4IVPROC vertexAttrib4iv;
    PFNGLVERTEXATTRIB4IVARBPROC vertexAttrib4ivARB;
    PFNGLVERTEXATTRIB4SPROC vertexAttrib4s;
    PFNGLVERTEXATTRIB4SARBPROC vertexAttrib4sARB;
    PFNGLVERTEXATTRIB4SNVPROC vertexAttrib4sNV;
    PFNGLVERTEXATTRIB4SVPROC vertexAttrib4sv;
    PFNGLVERTEXATTRIB4SVARBPROC vertexAttrib4svARB;
    PFNGLVERTEXATTRIB4SVNVPROC vertexAttrib4svNV;
    PFNGLVERTEXATTRIB4UBNVPROC vertexAttrib4ubNV;
    PFNGLVERTEXATTRIB4UBVPROC vertexAttrib4ubv;
    PFNGLVERTEXATTRIB4UBVARBPROC vertexAttrib4ubvARB;
    PFNGLVERTEXATTRIB4UBVNVPROC vertexAttrib4ubvNV;
    PFNGLVERTEXATTRIB4UIVPROC vertexAttrib4uiv;
    PFNGLVERTEXATTRIB4UIVARBPROC vertexAttrib4uivARB;
    PFNGLVERTEXATTRIB4USVPROC vertexAttrib4usv;
    PFNGLVERTEXATTRIB4USVARBPROC vertexAttrib4usvARB;
    PFNGLVERTEXATTRIBI1IPROC vertexAttribI1i;
    PFNGLVERTEXATTRIBI1IEXTPROC vertexAttribI1iEXT;
    PFNGLVERTEXATTRIBI1IVPROC vertexAttribI1iv;
    PFNGLVERTEXATTRIBI1IVEXTPROC vertexAttribI1ivEXT;
    PFNGLVERTEXATTRIBI1UIPROC vertexAttribI1ui;
    PFNGLVERTEXATTRIBI1UIEXTPROC vertexAttribI1uiEXT;
    PFNGLVERTEXATTRIBI1UIVPROC vertexAttribI1uiv;
    PFNGLVERTEXATTRIBI1UIVEXTPROC vertexAttribI1uivEXT;
    PFNGLVERTEXATTRIBI2IPROC vertexAttribI2i;
    PFNGLVERTEXATTRIBI2IEXTPROC vertexAttribI2iEXT;
    PFNGLVERTEXATTRIBI2IVPROC vertexAttribI2iv;
    PFNGLVERTEXATTRIBI2IVEXTPROC vertexAttribI2ivEXT;
    PFNGLVERTEXATTRIBI2UIPROC vertexAttribI2ui;
    PFNGLVERTEXATTRIBI2UIEXTPROC vertexAttribI2uiEXT;
    PFNGLVERTEXATTRIBI2UIVPROC vertexAttribI2uiv;
    PFNGLVERTEXATTRIBI2UIVEXTPROC vertexAttribI2uivEXT;
    PFNGLVERTEXATTRIBI3IPROC vertexAttribI3i;
    PFNGLVERTEXATTRIBI3IEXTPROC vertexAttribI3iEXT;
    PFNGLVERTEXATTRIBI3IVPROC vertexAttribI3iv;
    PFNGLVERTEXATTRIBI3IVEXTPROC vertexAttribI3ivEXT;
    PFNGLVERTEXATTRIBI3UIPROC vertexAttribI3ui;
    PFNGLVERTEXATTRIBI3UIEXTPROC vertexAttribI3uiEXT;
    PFNGLVERTEXATTRIBI3UIVPROC vertexAttribI3uiv;
    PFNGLVERTEXATTRIBI3UIVEXTPROC vertexAttribI3uivEXT;
    PFNGLVERTEXATTRIBI4BVPROC vertexAttribI4bv;
    PFNGLVERTEXATTRIBI4BVEXTPROC vertexAttribI4bvEXT;
    PFNGLVERTEXATTRIBI4IPROC vertexAttribI4i;
    PFNGLVERTEXATTRIBI4IEXTPROC vertexAttribI4iEXT;
    PFNGLVERTEXATTRIBI4IVPROC vertexAttribI4iv;
    PFNGLVERTEXATTRIBI4IVEXTPROC vertexAttribI4ivEXT;
    PFNGLVERTEXATTRIBI4SVPROC vertexAttribI4sv;
    PFNGLVERTEXATTRIBI4SVEXTPROC vertexAttribI4svEXT;
    PFNGLVERTEXATTRIBI4UBVPROC vertexAttribI4ubv;
    PFNGLVERTEXATTRIBI4UBVEXTPROC vertexAttribI4ubvEXT;
    PFNGLVERTEXATTRIBI4UIPROC vertexAttribI4ui;
    PFNGLVERTEXATTRIBI4UIEXTPROC vertexAttribI4uiEXT;
    PFNGLVERTEXATTRIBI4UIVPROC vertexAttribI4uiv;
    PFNGLVERTEXATTRIBI4UIVEXTPROC vertexAttribI4uivEXT;
    PFNGLVERTEXATTRIBI4USVPROC vertexAttribI4usv;
    PFNGLVERTEXATTRIBI4USVEXTPROC vertexAttribI4usvEXT;
    PFNGLVERTEXATTRIBIPOINTERPROC vertexAttribIPointer;
    PFNGLVERTEXATTRIBIPOINTEREXTPROC vertexAttribIPointerEXT;
    PFNGLVERTEXATTRIBPOINTERPROC vertexAttribPointer;
    PFNGLVERTEXATTRIBPOINTERARBPROC vertexAttribPointerARB;
    PFNGLVERTEXATTRIBPOINTERNVPROC vertexAttribPointerNV;
    PFNGLVERTEXATTRIBS1DVNVPROC vertexAttribs1dvNV;
    PFNGLVERTEXATTRIBS1FVNVPROC vertexAttribs1fvNV;
    PFNGLVERTEXATTRIBS1SVNVPROC vertexAttribs1svNV;
    PFNGLVERTEXATTRIBS2DVNVPROC vertexAttribs2dvNV;
    PFNGLVERTEXATTRIBS2FVNVPROC vertexAttribs2fvNV;
    PFNGLVERTEXATTRIBS2SVNVPROC vertexAttribs2svNV;
    PFNGLVERTEXATTRIBS3DVNVPROC vertexAttribs3dvNV;
    PFNGLVERTEXATTRIBS3FVNVPROC vertexAttribs3fvNV;
    PFNGLVERTEXATTRIBS3SVNVPROC vertexAttribs3svNV;
    PFNGLVERTEXATTRIBS4DVNVPROC vertexAttribs4dvNV;
    PFNGLVERTEXATTRIBS4FVNVPROC vertexAttribs4fvNV;
    PFNGLVERTEXATTRIBS4SVNVPROC vertexAttribs4svNV;
    PFNGLVERTEXATTRIBS4UBVNVPROC vertexAttribs4ubvNV;
    PFNGLVERTEXPOINTEREXTPROC vertexPointerEXT;
    PFNGLVIEWPORTPROC viewport;
    PFNGLWAITSYNCPROC waitSync;
    PFNGLACTIVESHADERPROGRAMPROC activeShaderProgram;
    PFNGLACTIVESHADERPROGRAMEXTPROC activeShaderProgramEXT;
    PFNGLBEGINQUERYEXTPROC beginQueryEXT;
    PFNGLBINDIMAGETEXTUREPROC bindImageTexture;
    PFNGLBINDPROGRAMPIPELINEPROC bindProgramPipeline;
    PFNGLBINDPROGRAMPIPELINEEXTPROC bindProgramPipelineEXT;
    PFNGLBINDSAMPLERPROC bindSampler;
    PFNGLBINDTRANSFORMFEEDBACKPROC bindTransformFeedback;
    PFNGLBINDVERTEXARRAYOESPROC bindVertexArrayOES;
    PFNGLBINDVERTEXBUFFERPROC bindVertexBuffer;
    PFNGLBLENDBARRIERPROC blendBarrier;
    PFNGLBLENDBARRIERKHRPROC blendBarrierKHR;
    PFNGLBLENDBARRIERNVPROC blendBarrierNV;
    PFNGLBLENDEQUATIONSEPARATEIPROC blendEquationSeparatei;
    PFNGLBLENDEQUATIONSEPARATEIEXTPROC blendEquationSeparateiEXT;
    PFNGLBLENDEQUATIONSEPARATEIOESPROC blendEquationSeparateiOES;
    PFNGLBLENDEQUATIONIPROC blendEquationi;
    PFNGLBLENDEQUATIONIEXTPROC blendEquationiEXT;
    PFNGLBLENDEQUATIONIOESPROC blendEquationiOES;
    PFNGLBLENDFUNCSEPARATEIPROC blendFuncSeparatei;
    PFNGLBLENDFUNCSEPARATEIEXTPROC blendFuncSeparateiEXT;
    PFNGLBLENDFUNCSEPARATEIOESPROC blendFuncSeparateiOES;
    PFNGLBLENDFUNCIPROC blendFunci;
    PFNGLBLENDFUNCIEXTPROC blendFunciEXT;
    PFNGLBLENDFUNCIOESPROC blendFunciOES;
    PFNGLBLENDPARAMETERINVPROC blendParameteriNV;
    PFNGLBLITFRAMEBUFFERNVPROC blitFramebufferNV;
    PFNGLCLEARDEPTHFPROC clearDepthf;
    PFNGLCLIENTWAITSYNCAPPLEPROC clientWaitSyncAPPLE;
    PFNGLCOLORMASKIEXTPROC colorMaskiEXT;
    PFNGLCOLORMASKIOESPROC colorMaskiOES;
    PFNGLCOPYBUFFERSUBDATANVPROC copyBufferSubDataNV;
    PFNGLCOPYIMAGESUBDATAPROC copyImageSubData;
    PFNGLCOPYIMAGESUBDATAEXTPROC copyImageSubDataEXT;
    PFNGLCOPYIMAGESUBDATAOESPROC copyImageSubDataOES;
    PFNGLCREATESHADERPROGRAMVPROC createShaderProgramv;
    PFNGLCREATESHADERPROGRAMVEXTPROC createShaderProgramvEXT;
    PFNGLDEBUGMESSAGECALLBACKPROC debugMessageCallback;
    PFNGLDEBUGMESSAGECALLBACKKHRPROC debugMessageCallbackKHR;
    PFNGLDEBUGMESSAGECONTROLPROC debugMessageControl;
    PFNGLDEBUGMESSAGECONTROLKHRPROC debugMessageControlKHR;
    PFNGLDEBUGMESSAGEINSERTPROC debugMessageInsert;
    PFNGLDEBUGMESSAGEINSERTKHRPROC debugMessageInsertKHR;
    PFNGLDELETEPROGRAMPIPELINESPROC deleteProgramPipelines;
    PFNGLDELETEPROGRAMPIPELINESEXTPROC deleteProgramPipelinesEXT;
    PFNGLDELETEQUERIESEXTPROC deleteQueriesEXT;
    PFNGLDELETESAMPLERSPROC deleteSamplers;
    PFNGLDELETESYNCAPPLEPROC deleteSyncAPPLE;
    PFNGLDELETETRANSFORMFEEDBACKSPROC deleteTransformFeedbacks;
    PFNGLDELETEVERTEXARRAYSOESPROC deleteVertexArraysOES;
    PFNGLDEPTHRANGEARRAYFVNVPROC depthRangeArrayfvNV;
    PFNGLDEPTHRANGEARRAYFVOESPROC depthRangeArrayfvOES;
    PFNGLDEPTHRANGEINDEXEDFNVPROC depthRangeIndexedfNV;
    PFNGLDEPTHRANGEINDEXEDFOESPROC depthRangeIndexedfOES;
    PFNGLDEPTHRANGEFPROC depthRangef;
    PFNGLDISABLEIEXTPROC disableiEXT;
    PFNGLDISABLEINVPROC disableiNV;
    PFNGLDISABLEIOESPROC disableiOES;
    PFNGLDISPATCHCOMPUTEPROC dispatchCompute;
    PFNGLDISPATCHCOMPUTEINDIRECTPROC dispatchComputeIndirect;
    PFNGLDRAWARRAYSINDIRECTPROC drawArraysIndirect;
    PFNGLDRAWARRAYSINSTANCEDANGLEPROC drawArraysInstancedANGLE;
    PFNGLDRAWARRAYSINSTANCEDNVPROC drawArraysInstancedNV;
    PFNGLDRAWBUFFERSEXTPROC drawBuffersEXT;
    PFNGLDRAWELEMENTSBASEVERTEXEXTPROC drawElementsBaseVertexEXT;
    PFNGLDRAWELEMENTSBASEVERTEXOESPROC drawElementsBaseVertexOES;
    PFNGLDRAWELEMENTSINDIRECTPROC drawElementsIndirect;
    PFNGLDRAWELEMENTSINSTANCEDANGLEPROC drawElementsInstancedANGLE;
    PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC drawElementsInstancedBaseVertexEXT;
    PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC drawElementsInstancedBaseVertexOES;
    PFNGLDRAWELEMENTSINSTANCEDNVPROC drawElementsInstancedNV;
    PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC drawRangeElementsBaseVertexEXT;
    PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC drawRangeElementsBaseVertexOES;
    PFNGLENABLEIEXTPROC enableiEXT;
    PFNGLENABLEINVPROC enableiNV;
    PFNGLENABLEIOESPROC enableiOES;
    PFNGLENDQUERYEXTPROC endQueryEXT;
    PFNGLFENCESYNCAPPLEPROC fenceSyncAPPLE;
    PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC flushMappedBufferRangeEXT;
    PFNGLFRAMEBUFFERPARAMETERIPROC framebufferParameteri;
    PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC framebufferTexture2DMultisampleEXT;
    PFNGLFRAMEBUFFERTEXTUREOESPROC framebufferTextureOES;
    PFNGLGENPROGRAMPIPELINESPROC genProgramPipelines;
    PFNGLGENPROGRAMPIPELINESEXTPROC genProgramPipelinesEXT;
    PFNGLGENQUERIESEXTPROC genQueriesEXT;
    PFNGLGENSAMPLERSPROC genSamplers;
    PFNGLGENTRANSFORMFEEDBACKSPROC genTransformFeedbacks;
    PFNGLGENVERTEXARRAYSOESPROC genVertexArraysOES;
    PFNGLGETBUFFERPOINTERVOESPROC getBufferPointervOES;
    PFNGLGETDEBUGMESSAGELOGPROC getDebugMessageLog;
    PFNGLGETDEBUGMESSAGELOGKHRPROC getDebugMessageLogKHR;
    PFNGLGETFLOATI_VNVPROC getFloati_vNV;
    PFNGLGETFLOATI_VOESPROC getFloati_vOES;
    PFNGLGETFRAMEBUFFERPARAMETERIVPROC getFramebufferParameteriv;
    PFNGLGETGRAPHICSRESETSTATUSPROC getGraphicsResetStatus;
    PFNGLGETGRAPHICSRESETSTATUSEXTPROC getGraphicsResetStatusEXT;
    PFNGLGETGRAPHICSRESETSTATUSKHRPROC getGraphicsResetStatusKHR;
    PFNGLGETINTEGER64VAPPLEPROC getInteger64vAPPLE;
    PFNGLGETINTEGER64VEXTPROC getInteger64vEXT;
    PFNGLGETINTERNALFORMATIVPROC getInternalformativ;
    PFNGLGETOBJECTLABELPROC getObjectLabel;
    PFNGLGETOBJECTLABELKHRPROC getObjectLabelKHR;
    PFNGLGETOBJECTPTRLABELPROC getObjectPtrLabel;
    PFNGLGETOBJECTPTRLABELKHRPROC getObjectPtrLabelKHR;
    PFNGLGETPOINTERVPROC getPointerv;
    PFNGLGETPOINTERVKHRPROC getPointervKHR;
    PFNGLGETPROGRAMBINARYPROC getProgramBinary;
    PFNGLGETPROGRAMBINARYOESPROC getProgramBinaryOES;
    PFNGLGETPROGRAMINTERFACEIVPROC getProgramInterfaceiv;
    PFNGLGETPROGRAMPIPELINEINFOLOGPROC getProgramPipelineInfoLog;
    PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC getProgramPipelineInfoLogEXT;
    PFNGLGETPROGRAMPIPELINEIVPROC getProgramPipelineiv;
    PFNGLGETPROGRAMPIPELINEIVEXTPROC getProgramPipelineivEXT;
    PFNGLGETPROGRAMRESOURCEINDEXPROC getProgramResourceIndex;
    PFNGLGETPROGRAMRESOURCELOCATIONPROC getProgramResourceLocation;
    PFNGLGETPROGRAMRESOURCENAMEPROC getProgramResourceName;
    PFNGLGETPROGRAMRESOURCEIVPROC getProgramResourceiv;
    PFNGLGETQUERYOBJECTI64VEXTPROC getQueryObjecti64vEXT;
    PFNGLGETQUERYOBJECTIVEXTPROC getQueryObjectivEXT;
    PFNGLGETQUERYOBJECTUI64VEXTPROC getQueryObjectui64vEXT;
    PFNGLGETQUERYOBJECTUIVEXTPROC getQueryObjectuivEXT;
    PFNGLGETQUERYIVEXTPROC getQueryivEXT;
    PFNGLGETSAMPLERPARAMETERIIVPROC getSamplerParameterIiv;
    PFNGLGETSAMPLERPARAMETERIIVEXTPROC getSamplerParameterIivEXT;
    PFNGLGETSAMPLERPARAMETERIIVOESPROC getSamplerParameterIivOES;
    PFNGLGETSAMPLERPARAMETERIUIVPROC getSamplerParameterIuiv;
    PFNGLGETSAMPLERPARAMETERIUIVEXTPROC getSamplerParameterIuivEXT;
    PFNGLGETSAMPLERPARAMETERIUIVOESPROC getSamplerParameterIuivOES;
    PFNGLGETSAMPLERPARAMETERFVPROC getSamplerParameterfv;
    PFNGLGETSAMPLERPARAMETERIVPROC getSamplerParameteriv;
    PFNGLGETSHADERPRECISIONFORMATPROC getShaderPrecisionFormat;
    PFNGLGETSYNCIVAPPLEPROC getSyncivAPPLE;
    PFNGLGETTEXPARAMETERIIVOESPROC getTexParameterIivOES;
    PFNGLGETTEXPARAMETERIUIVOESPROC getTexParameterIuivOES;
    PFNGLGETNUNIFORMFVPROC getnUniformfv;
    PFNGLGETNUNIFORMFVEXTPROC getnUniformfvEXT;
    PFNGLGETNUNIFORMFVKHRPROC getnUniformfvKHR;
    PFNGLGETNUNIFORMIVPROC getnUniformiv;
    PFNGLGETNUNIFORMIVEXTPROC getnUniformivEXT;
    PFNGLGETNUNIFORMIVKHRPROC getnUniformivKHR;
    PFNGLGETNUNIFORMUIVPROC getnUniformuiv;
    PFNGLGETNUNIFORMUIVKHRPROC getnUniformuivKHR;
    PFNGLINVALIDATEFRAMEBUFFERPROC invalidateFramebuffer;
    PFNGLINVALIDATESUBFRAMEBUFFERPROC invalidateSubFramebuffer;
    PFNGLISENABLEDIEXTPROC isEnablediEXT;
    PFNGLISENABLEDINVPROC isEnablediNV;
    PFNGLISENABLEDIOESPROC isEnablediOES;
    PFNGLISPROGRAMPIPELINEPROC isProgramPipeline;
    PFNGLISPROGRAMPIPELINEEXTPROC isProgramPipelineEXT;
    PFNGLISQUERYEXTPROC isQueryEXT;
    PFNGLISSAMPLERPROC isSampler;
    PFNGLISSYNCAPPLEPROC isSyncAPPLE;
    PFNGLISTRANSFORMFEEDBACKPROC isTransformFeedback;
    PFNGLISVERTEXARRAYOESPROC isVertexArrayOES;
    PFNGLMAPBUFFEROESPROC mapBufferOES;
    PFNGLMAPBUFFERRANGEEXTPROC mapBufferRangeEXT;
    PFNGLMEMORYBARRIERPROC memoryBarrier;
    PFNGLMEMORYBARRIERBYREGIONPROC memoryBarrierByRegion;
    PFNGLMINSAMPLESHADINGPROC minSampleShading;
    PFNGLMINSAMPLESHADINGOESPROC minSampleShadingOES;
    PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC multiDrawElementsBaseVertexEXT;
    PFNGLOBJECTLABELPROC objectLabel;
    PFNGLOBJECTLABELKHRPROC objectLabelKHR;
    PFNGLOBJECTPTRLABELPROC objectPtrLabel;
    PFNGLOBJECTPTRLABELKHRPROC objectPtrLabelKHR;
    PFNGLPATCHPARAMETERIPROC patchParameteri;
    PFNGLPATCHPARAMETERIEXTPROC patchParameteriEXT;
    PFNGLPATCHPARAMETERIOESPROC patchParameteriOES;
    PFNGLPAUSETRANSFORMFEEDBACKPROC pauseTransformFeedback;
    PFNGLPOPDEBUGGROUPPROC popDebugGroup;
    PFNGLPOPDEBUGGROUPKHRPROC popDebugGroupKHR;
    PFNGLPRIMITIVEBOUNDINGBOXPROC primitiveBoundingBox;
    PFNGLPRIMITIVEBOUNDINGBOXEXTPROC primitiveBoundingBoxEXT;
    PFNGLPRIMITIVEBOUNDINGBOXOESPROC primitiveBoundingBoxOES;
    PFNGLPROGRAMBINARYPROC programBinary;
    PFNGLPROGRAMBINARYOESPROC programBinaryOES;
    PFNGLPROGRAMPARAMETERIPROC programParameteri;
    PFNGLPROGRAMPARAMETERIEXTPROC programParameteriEXT;
    PFNGLPROGRAMUNIFORM1FPROC programUniform1f;
    PFNGLPROGRAMUNIFORM1FVPROC programUniform1fv;
    PFNGLPROGRAMUNIFORM1IPROC programUniform1i;
    PFNGLPROGRAMUNIFORM1IVPROC programUniform1iv;
    PFNGLPROGRAMUNIFORM1UIPROC programUniform1ui;
    PFNGLPROGRAMUNIFORM1UIVPROC programUniform1uiv;
    PFNGLPROGRAMUNIFORM2FPROC programUniform2f;
    PFNGLPROGRAMUNIFORM2FVPROC programUniform2fv;
    PFNGLPROGRAMUNIFORM2IPROC programUniform2i;
    PFNGLPROGRAMUNIFORM2IVPROC programUniform2iv;
    PFNGLPROGRAMUNIFORM2UIPROC programUniform2ui;
    PFNGLPROGRAMUNIFORM2UIVPROC programUniform2uiv;
    PFNGLPROGRAMUNIFORM3FPROC programUniform3f;
    PFNGLPROGRAMUNIFORM3FVPROC programUniform3fv;
    PFNGLPROGRAMUNIFORM3IPROC programUniform3i;
    PFNGLPROGRAMUNIFORM3IVPROC programUniform3iv;
    PFNGLPROGRAMUNIFORM3UIPROC programUniform3ui;
    PFNGLPROGRAMUNIFORM3UIVPROC programUniform3uiv;
    PFNGLPROGRAMUNIFORM4FPROC programUniform4f;
    PFNGLPROGRAMUNIFORM4FVPROC programUniform4fv;
    PFNGLPROGRAMUNIFORM4IPROC programUniform4i;
    PFNGLPROGRAMUNIFORM4IVPROC programUniform4iv;
    PFNGLPROGRAMUNIFORM4UIPROC programUniform4ui;
    PFNGLPROGRAMUNIFORM4UIVPROC programUniform4uiv;
    PFNGLPROGRAMUNIFORMMATRIX2FVPROC programUniformMatrix2fv;
    PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC programUniformMatrix2x3fv;
    PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC programUniformMatrix2x4fv;
    PFNGLPROGRAMUNIFORMMATRIX3FVPROC programUniformMatrix3fv;
    PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC programUniformMatrix3x2fv;
    PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC programUniformMatrix3x4fv;
    PFNGLPROGRAMUNIFORMMATRIX4FVPROC programUniformMatrix4fv;
    PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC programUniformMatrix4x2fv;
    PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC programUniformMatrix4x3fv;
    PFNGLPUSHDEBUGGROUPPROC pushDebugGroup;
    PFNGLPUSHDEBUGGROUPKHRPROC pushDebugGroupKHR;
    PFNGLQUERYCOUNTEREXTPROC queryCounterEXT;
    PFNGLREADNPIXELSPROC readnPixels;
    PFNGLREADNPIXELSEXTPROC readnPixelsEXT;
    PFNGLREADNPIXELSKHRPROC readnPixelsKHR;
    PFNGLRELEASESHADERCOMPILERPROC releaseShaderCompiler;
    PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC renderbufferStorageMultisampleNV;
    PFNGLRESUMETRANSFORMFEEDBACKPROC resumeTransformFeedback;
    PFNGLSAMPLERPARAMETERIIVPROC samplerParameterIiv;
    PFNGLSAMPLERPARAMETERIIVEXTPROC samplerParameterIivEXT;
    PFNGLSAMPLERPARAMETERIIVOESPROC samplerParameterIivOES;
    PFNGLSAMPLERPARAMETERIUIVPROC samplerParameterIuiv;
    PFNGLSAMPLERPARAMETERIUIVEXTPROC samplerParameterIuivEXT;
    PFNGLSAMPLERPARAMETERIUIVOESPROC samplerParameterIuivOES;
    PFNGLSAMPLERPARAMETERFPROC samplerParameterf;
    PFNGLSAMPLERPARAMETERFVPROC samplerParameterfv;
    PFNGLSAMPLERPARAMETERIPROC samplerParameteri;
    PFNGLSAMPLERPARAMETERIVPROC samplerParameteriv;
    PFNGLSCISSORARRAYVNVPROC scissorArrayvNV;
    PFNGLSCISSORARRAYVOESPROC scissorArrayvOES;
    PFNGLSCISSORINDEXEDNVPROC scissorIndexedNV;
    PFNGLSCISSORINDEXEDOESPROC scissorIndexedOES;
    PFNGLSCISSORINDEXEDVNVPROC scissorIndexedvNV;
    PFNGLSCISSORINDEXEDVOESPROC scissorIndexedvOES;
    PFNGLSHADERBINARYPROC shaderBinary;
    PFNGLTEXBUFFEROESPROC texBufferOES;
    PFNGLTEXBUFFERRANGEPROC texBufferRange;
    PFNGLTEXBUFFERRANGEEXTPROC texBufferRangeEXT;
    PFNGLTEXBUFFERRANGEOESPROC texBufferRangeOES;
    PFNGLTEXPARAMETERIIVOESPROC texParameterIivOES;
    PFNGLTEXPARAMETERIUIVOESPROC texParameterIuivOES;
    PFNGLTEXSTORAGE1DEXTPROC texStorage1DEXT;
    PFNGLTEXSTORAGE2DPROC texStorage2D;
    PFNGLTEXSTORAGE2DEXTPROC texStorage2DEXT;
    PFNGLTEXSTORAGE2DMULTISAMPLEPROC texStorage2DMultisample;
    PFNGLTEXSTORAGE3DPROC texStorage3D;
    PFNGLTEXSTORAGE3DEXTPROC texStorage3DEXT;
    PFNGLTEXSTORAGE3DMULTISAMPLEPROC texStorage3DMultisample;
    PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC texStorage3DMultisampleOES;
    PFNGLUNIFORMMATRIX2X3FVNVPROC uniformMatrix2x3fvNV;
    PFNGLUNIFORMMATRIX2X4FVNVPROC uniformMatrix2x4fvNV;
    PFNGLUNIFORMMATRIX3X2FVNVPROC uniformMatrix3x2fvNV;
    PFNGLUNIFORMMATRIX3X4FVNVPROC uniformMatrix3x4fvNV;
    PFNGLUNIFORMMATRIX4X2FVNVPROC uniformMatrix4x2fvNV;
    PFNGLUNIFORMMATRIX4X3FVNVPROC uniformMatrix4x3fvNV;
    PFNGLUNMAPBUFFEROESPROC unmapBufferOES;
    PFNGLUSEPROGRAMSTAGESPROC useProgramStages;
    PFNGLUSEPROGRAMSTAGESEXTPROC useProgramStagesEXT;
    PFNGLVALIDATEPROGRAMPIPELINEPROC validateProgramPipeline;
    PFNGLVALIDATEPROGRAMPIPELINEEXTPROC validateProgramPipelineEXT;
    PFNGLVERTEXATTRIBBINDINGPROC vertexAttribBinding;
    PFNGLVERTEXATTRIBDIVISORPROC vertexAttribDivisor;
    PFNGLVERTEXATTRIBDIVISORANGLEPROC vertexAttribDivisorANGLE;
    PFNGLVERTEXATTRIBDIVISOREXTPROC vertexAttribDivisorEXT;
    PFNGLVERTEXATTRIBDIVISORNVPROC vertexAttribDivisorNV;
    PFNGLVERTEXATTRIBFORMATPROC vertexAttribFormat;
    PFNGLVERTEXATTRIBIFORMATPROC vertexAttribIFormat;
    PFNGLVERTEXBINDINGDIVISORPROC vertexBindingDivisor;
    PFNGLVIEWPORTARRAYVNVPROC viewportArrayvNV;
    PFNGLVIEWPORTARRAYVOESPROC viewportArrayvOES;
    PFNGLVIEWPORTINDEXEDFNVPROC viewportIndexedfNV;
    PFNGLVIEWPORTINDEXEDFOESPROC viewportIndexedfOES;
    PFNGLVIEWPORTINDEXEDFVNVPROC viewportIndexedfvNV;
    PFNGLVIEWPORTINDEXEDFVOESPROC viewportIndexedfvOES;
    PFNGLWAITSYNCAPPLEPROC waitSyncAPPLE;
} GL;






GLAD_API_CALL int gladLoadGLContextUserPtr(GL &context, GLADuserptrloadfunc load, void *userptr);
GLAD_API_CALL int gladLoadGLContext(GL &context, GLADloadfunc load);

GLAD_API_CALL int gladLoadGLES2ContextUserPtr(GL &context, GLADuserptrloadfunc load, void *userptr);
GLAD_API_CALL int gladLoadGLES2Context(GL &context, GLADloadfunc load);

}
#endif

/* Source */
#if defined(GLAD_GL_IMPLEMENTATION) && !defined(GLAD_GL_IMPLEMENTED)
#define GLAD_GL_IMPLEMENTED

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef GLAD_IMPL_UTIL_C_
#define GLAD_IMPL_UTIL_C_

#ifdef _MSC_VER
#define GLAD_IMPL_UTIL_SSCANF sscanf_s
#else
#define GLAD_IMPL_UTIL_SSCANF sscanf
#endif

#endif /* GLAD_IMPL_UTIL_C_ */

namespace av {

static void glad_gl_load_GL_VERSION_1_0(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.VERSION_1_0) return;
    context.blendFunc = (PFNGLBLENDFUNCPROC) load(userptr, "glBlendFunc");
    context.clear = (PFNGLCLEARPROC) load(userptr, "glClear");
    context.clearColor = (PFNGLCLEARCOLORPROC) load(userptr, "glClearColor");
    context.clearDepth = (PFNGLCLEARDEPTHPROC) load(userptr, "glClearDepth");
    context.clearStencil = (PFNGLCLEARSTENCILPROC) load(userptr, "glClearStencil");
    context.colorMask = (PFNGLCOLORMASKPROC) load(userptr, "glColorMask");
    context.cullFace = (PFNGLCULLFACEPROC) load(userptr, "glCullFace");
    context.depthFunc = (PFNGLDEPTHFUNCPROC) load(userptr, "glDepthFunc");
    context.depthMask = (PFNGLDEPTHMASKPROC) load(userptr, "glDepthMask");
    context.depthRange = (PFNGLDEPTHRANGEPROC) load(userptr, "glDepthRange");
    context.disable = (PFNGLDISABLEPROC) load(userptr, "glDisable");
    context.drawBuffer = (PFNGLDRAWBUFFERPROC) load(userptr, "glDrawBuffer");
    context.enable = (PFNGLENABLEPROC) load(userptr, "glEnable");
    context.finish = (PFNGLFINISHPROC) load(userptr, "glFinish");
    context.flush = (PFNGLFLUSHPROC) load(userptr, "glFlush");
    context.frontFace = (PFNGLFRONTFACEPROC) load(userptr, "glFrontFace");
    context.getBooleanv = (PFNGLGETBOOLEANVPROC) load(userptr, "glGetBooleanv");
    context.getDoublev = (PFNGLGETDOUBLEVPROC) load(userptr, "glGetDoublev");
    context.getError = (PFNGLGETERRORPROC) load(userptr, "glGetError");
    context.getFloatv = (PFNGLGETFLOATVPROC) load(userptr, "glGetFloatv");
    context.getIntegerv = (PFNGLGETINTEGERVPROC) load(userptr, "glGetIntegerv");
    context.getString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    context.getTexImage = (PFNGLGETTEXIMAGEPROC) load(userptr, "glGetTexImage");
    context.getTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC) load(userptr, "glGetTexLevelParameterfv");
    context.getTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC) load(userptr, "glGetTexLevelParameteriv");
    context.getTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC) load(userptr, "glGetTexParameterfv");
    context.getTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC) load(userptr, "glGetTexParameteriv");
    context.hint = (PFNGLHINTPROC) load(userptr, "glHint");
    context.isEnabled = (PFNGLISENABLEDPROC) load(userptr, "glIsEnabled");
    context.lineWidth = (PFNGLLINEWIDTHPROC) load(userptr, "glLineWidth");
    context.logicOp = (PFNGLLOGICOPPROC) load(userptr, "glLogicOp");
    context.pixelStoref = (PFNGLPIXELSTOREFPROC) load(userptr, "glPixelStoref");
    context.pixelStorei = (PFNGLPIXELSTOREIPROC) load(userptr, "glPixelStorei");
    context.pointSize = (PFNGLPOINTSIZEPROC) load(userptr, "glPointSize");
    context.polygonMode = (PFNGLPOLYGONMODEPROC) load(userptr, "glPolygonMode");
    context.readBuffer = (PFNGLREADBUFFERPROC) load(userptr, "glReadBuffer");
    context.readPixels = (PFNGLREADPIXELSPROC) load(userptr, "glReadPixels");
    context.scissor = (PFNGLSCISSORPROC) load(userptr, "glScissor");
    context.stencilFunc = (PFNGLSTENCILFUNCPROC) load(userptr, "glStencilFunc");
    context.stencilMask = (PFNGLSTENCILMASKPROC) load(userptr, "glStencilMask");
    context.stencilOp = (PFNGLSTENCILOPPROC) load(userptr, "glStencilOp");
    context.texImage1D = (PFNGLTEXIMAGE1DPROC) load(userptr, "glTexImage1D");
    context.texImage2D = (PFNGLTEXIMAGE2DPROC) load(userptr, "glTexImage2D");
    context.texParameterf = (PFNGLTEXPARAMETERFPROC) load(userptr, "glTexParameterf");
    context.texParameterfv = (PFNGLTEXPARAMETERFVPROC) load(userptr, "glTexParameterfv");
    context.texParameteri = (PFNGLTEXPARAMETERIPROC) load(userptr, "glTexParameteri");
    context.texParameteriv = (PFNGLTEXPARAMETERIVPROC) load(userptr, "glTexParameteriv");
    context.viewport = (PFNGLVIEWPORTPROC) load(userptr, "glViewport");
}
static void glad_gl_load_GL_VERSION_1_1(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.VERSION_1_1) return;
    context.bindTexture = (PFNGLBINDTEXTUREPROC) load(userptr, "glBindTexture");
    context.copyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC) load(userptr, "glCopyTexImage1D");
    context.copyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC) load(userptr, "glCopyTexImage2D");
    context.copyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC) load(userptr, "glCopyTexSubImage1D");
    context.copyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC) load(userptr, "glCopyTexSubImage2D");
    context.deleteTextures = (PFNGLDELETETEXTURESPROC) load(userptr, "glDeleteTextures");
    context.drawArrays = (PFNGLDRAWARRAYSPROC) load(userptr, "glDrawArrays");
    context.drawElements = (PFNGLDRAWELEMENTSPROC) load(userptr, "glDrawElements");
    context.genTextures = (PFNGLGENTEXTURESPROC) load(userptr, "glGenTextures");
    context.getPointerv = (PFNGLGETPOINTERVPROC) load(userptr, "glGetPointerv");
    context.isTexture = (PFNGLISTEXTUREPROC) load(userptr, "glIsTexture");
    context.polygonOffset = (PFNGLPOLYGONOFFSETPROC) load(userptr, "glPolygonOffset");
    context.texSubImage1D = (PFNGLTEXSUBIMAGE1DPROC) load(userptr, "glTexSubImage1D");
    context.texSubImage2D = (PFNGLTEXSUBIMAGE2DPROC) load(userptr, "glTexSubImage2D");
}
static void glad_gl_load_GL_VERSION_1_2(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.VERSION_1_2) return;
    context.copyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC) load(userptr, "glCopyTexSubImage3D");
    context.drawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC) load(userptr, "glDrawRangeElements");
    context.texImage3D = (PFNGLTEXIMAGE3DPROC) load(userptr, "glTexImage3D");
    context.texSubImage3D = (PFNGLTEXSUBIMAGE3DPROC) load(userptr, "glTexSubImage3D");
}
static void glad_gl_load_GL_VERSION_1_3(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.VERSION_1_3) return;
    context.activeTexture = (PFNGLACTIVETEXTUREPROC) load(userptr, "glActiveTexture");
    context.compressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC) load(userptr, "glCompressedTexImage1D");
    context.compressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC) load(userptr, "glCompressedTexImage2D");
    context.compressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC) load(userptr, "glCompressedTexImage3D");
    context.compressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) load(userptr, "glCompressedTexSubImage1D");
    context.compressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) load(userptr, "glCompressedTexSubImage2D");
    context.compressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) load(userptr, "glCompressedTexSubImage3D");
    context.getCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC) load(userptr, "glGetCompressedTexImage");
    context.sampleCoverage = (PFNGLSAMPLECOVERAGEPROC) load(userptr, "glSampleCoverage");
}
static void glad_gl_load_GL_VERSION_1_4(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.VERSION_1_4) return;
    context.blendColor = (PFNGLBLENDCOLORPROC) load(userptr, "glBlendColor");
    context.blendEquation = (PFNGLBLENDEQUATIONPROC) load(userptr, "glBlendEquation");
    context.blendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC) load(userptr, "glBlendFuncSeparate");
    context.multiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC) load(userptr, "glMultiDrawArrays");
    context.multiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC) load(userptr, "glMultiDrawElements");
    context.pointParameterf = (PFNGLPOINTPARAMETERFPROC) load(userptr, "glPointParameterf");
    context.pointParameterfv = (PFNGLPOINTPARAMETERFVPROC) load(userptr, "glPointParameterfv");
    context.pointParameteri = (PFNGLPOINTPARAMETERIPROC) load(userptr, "glPointParameteri");
    context.pointParameteriv = (PFNGLPOINTPARAMETERIVPROC) load(userptr, "glPointParameteriv");
}
static void glad_gl_load_GL_VERSION_1_5(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.VERSION_1_5) return;
    context.beginQuery = (PFNGLBEGINQUERYPROC) load(userptr, "glBeginQuery");
    context.bindBuffer = (PFNGLBINDBUFFERPROC) load(userptr, "glBindBuffer");
    context.bufferData = (PFNGLBUFFERDATAPROC) load(userptr, "glBufferData");
    context.bufferSubData = (PFNGLBUFFERSUBDATAPROC) load(userptr, "glBufferSubData");
    context.deleteBuffers = (PFNGLDELETEBUFFERSPROC) load(userptr, "glDeleteBuffers");
    context.deleteQueries = (PFNGLDELETEQUERIESPROC) load(userptr, "glDeleteQueries");
    context.endQuery = (PFNGLENDQUERYPROC) load(userptr, "glEndQuery");
    context.genBuffers = (PFNGLGENBUFFERSPROC) load(userptr, "glGenBuffers");
    context.genQueries = (PFNGLGENQUERIESPROC) load(userptr, "glGenQueries");
    context.getBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC) load(userptr, "glGetBufferParameteriv");
    context.getBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC) load(userptr, "glGetBufferPointerv");
    context.getBufferSubData = (PFNGLGETBUFFERSUBDATAPROC) load(userptr, "glGetBufferSubData");
    context.getQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC) load(userptr, "glGetQueryObjectiv");
    context.getQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC) load(userptr, "glGetQueryObjectuiv");
    context.getQueryiv = (PFNGLGETQUERYIVPROC) load(userptr, "glGetQueryiv");
    context.isBuffer = (PFNGLISBUFFERPROC) load(userptr, "glIsBuffer");
    context.isQuery = (PFNGLISQUERYPROC) load(userptr, "glIsQuery");
    context.mapBuffer = (PFNGLMAPBUFFERPROC) load(userptr, "glMapBuffer");
    context.unmapBuffer = (PFNGLUNMAPBUFFERPROC) load(userptr, "glUnmapBuffer");
}
static void glad_gl_load_GL_VERSION_2_0(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.VERSION_2_0) return;
    context.attachShader = (PFNGLATTACHSHADERPROC) load(userptr, "glAttachShader");
    context.bindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC) load(userptr, "glBindAttribLocation");
    context.blendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC) load(userptr, "glBlendEquationSeparate");
    context.compileShader = (PFNGLCOMPILESHADERPROC) load(userptr, "glCompileShader");
    context.createProgram = (PFNGLCREATEPROGRAMPROC) load(userptr, "glCreateProgram");
    context.createShader = (PFNGLCREATESHADERPROC) load(userptr, "glCreateShader");
    context.deleteProgram = (PFNGLDELETEPROGRAMPROC) load(userptr, "glDeleteProgram");
    context.deleteShader = (PFNGLDELETESHADERPROC) load(userptr, "glDeleteShader");
    context.detachShader = (PFNGLDETACHSHADERPROC) load(userptr, "glDetachShader");
    context.disableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC) load(userptr, "glDisableVertexAttribArray");
    context.drawBuffers = (PFNGLDRAWBUFFERSPROC) load(userptr, "glDrawBuffers");
    context.enableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC) load(userptr, "glEnableVertexAttribArray");
    context.getActiveAttrib = (PFNGLGETACTIVEATTRIBPROC) load(userptr, "glGetActiveAttrib");
    context.getActiveUniform = (PFNGLGETACTIVEUNIFORMPROC) load(userptr, "glGetActiveUniform");
    context.getAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC) load(userptr, "glGetAttachedShaders");
    context.getAttribLocation = (PFNGLGETATTRIBLOCATIONPROC) load(userptr, "glGetAttribLocation");
    context.getProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC) load(userptr, "glGetProgramInfoLog");
    context.getProgramiv = (PFNGLGETPROGRAMIVPROC) load(userptr, "glGetProgramiv");
    context.getShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC) load(userptr, "glGetShaderInfoLog");
    context.getShaderSource = (PFNGLGETSHADERSOURCEPROC) load(userptr, "glGetShaderSource");
    context.getShaderiv = (PFNGLGETSHADERIVPROC) load(userptr, "glGetShaderiv");
    context.getUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC) load(userptr, "glGetUniformLocation");
    context.getUniformfv = (PFNGLGETUNIFORMFVPROC) load(userptr, "glGetUniformfv");
    context.getUniformiv = (PFNGLGETUNIFORMIVPROC) load(userptr, "glGetUniformiv");
    context.getVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC) load(userptr, "glGetVertexAttribPointerv");
    context.getVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC) load(userptr, "glGetVertexAttribdv");
    context.getVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC) load(userptr, "glGetVertexAttribfv");
    context.getVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC) load(userptr, "glGetVertexAttribiv");
    context.isProgram = (PFNGLISPROGRAMPROC) load(userptr, "glIsProgram");
    context.isShader = (PFNGLISSHADERPROC) load(userptr, "glIsShader");
    context.linkProgram = (PFNGLLINKPROGRAMPROC) load(userptr, "glLinkProgram");
    context.shaderSource = (PFNGLSHADERSOURCEPROC) load(userptr, "glShaderSource");
    context.stencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC) load(userptr, "glStencilFuncSeparate");
    context.stencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC) load(userptr, "glStencilMaskSeparate");
    context.stencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC) load(userptr, "glStencilOpSeparate");
    context.uniform1f = (PFNGLUNIFORM1FPROC) load(userptr, "glUniform1f");
    context.uniform1fv = (PFNGLUNIFORM1FVPROC) load(userptr, "glUniform1fv");
    context.uniform1i = (PFNGLUNIFORM1IPROC) load(userptr, "glUniform1i");
    context.uniform1iv = (PFNGLUNIFORM1IVPROC) load(userptr, "glUniform1iv");
    context.uniform2f = (PFNGLUNIFORM2FPROC) load(userptr, "glUniform2f");
    context.uniform2fv = (PFNGLUNIFORM2FVPROC) load(userptr, "glUniform2fv");
    context.uniform2i = (PFNGLUNIFORM2IPROC) load(userptr, "glUniform2i");
    context.uniform2iv = (PFNGLUNIFORM2IVPROC) load(userptr, "glUniform2iv");
    context.uniform3f = (PFNGLUNIFORM3FPROC) load(userptr, "glUniform3f");
    context.uniform3fv = (PFNGLUNIFORM3FVPROC) load(userptr, "glUniform3fv");
    context.uniform3i = (PFNGLUNIFORM3IPROC) load(userptr, "glUniform3i");
    context.uniform3iv = (PFNGLUNIFORM3IVPROC) load(userptr, "glUniform3iv");
    context.uniform4f = (PFNGLUNIFORM4FPROC) load(userptr, "glUniform4f");
    context.uniform4fv = (PFNGLUNIFORM4FVPROC) load(userptr, "glUniform4fv");
    context.uniform4i = (PFNGLUNIFORM4IPROC) load(userptr, "glUniform4i");
    context.uniform4iv = (PFNGLUNIFORM4IVPROC) load(userptr, "glUniform4iv");
    context.uniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC) load(userptr, "glUniformMatrix2fv");
    context.uniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC) load(userptr, "glUniformMatrix3fv");
    context.uniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC) load(userptr, "glUniformMatrix4fv");
    context.useProgram = (PFNGLUSEPROGRAMPROC) load(userptr, "glUseProgram");
    context.validateProgram = (PFNGLVALIDATEPROGRAMPROC) load(userptr, "glValidateProgram");
    context.vertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC) load(userptr, "glVertexAttrib1d");
    context.vertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC) load(userptr, "glVertexAttrib1dv");
    context.vertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC) load(userptr, "glVertexAttrib1f");
    context.vertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC) load(userptr, "glVertexAttrib1fv");
    context.vertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC) load(userptr, "glVertexAttrib1s");
    context.vertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC) load(userptr, "glVertexAttrib1sv");
    context.vertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC) load(userptr, "glVertexAttrib2d");
    context.vertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC) load(userptr, "glVertexAttrib2dv");
    context.vertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC) load(userptr, "glVertexAttrib2f");
    context.vertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC) load(userptr, "glVertexAttrib2fv");
    context.vertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC) load(userptr, "glVertexAttrib2s");
    context.vertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC) load(userptr, "glVertexAttrib2sv");
    context.vertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC) load(userptr, "glVertexAttrib3d");
    context.vertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC) load(userptr, "glVertexAttrib3dv");
    context.vertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC) load(userptr, "glVertexAttrib3f");
    context.vertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC) load(userptr, "glVertexAttrib3fv");
    context.vertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC) load(userptr, "glVertexAttrib3s");
    context.vertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC) load(userptr, "glVertexAttrib3sv");
    context.vertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC) load(userptr, "glVertexAttrib4Nbv");
    context.vertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC) load(userptr, "glVertexAttrib4Niv");
    context.vertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC) load(userptr, "glVertexAttrib4Nsv");
    context.vertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC) load(userptr, "glVertexAttrib4Nub");
    context.vertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC) load(userptr, "glVertexAttrib4Nubv");
    context.vertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC) load(userptr, "glVertexAttrib4Nuiv");
    context.vertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC) load(userptr, "glVertexAttrib4Nusv");
    context.vertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC) load(userptr, "glVertexAttrib4bv");
    context.vertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC) load(userptr, "glVertexAttrib4d");
    context.vertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC) load(userptr, "glVertexAttrib4dv");
    context.vertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC) load(userptr, "glVertexAttrib4f");
    context.vertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC) load(userptr, "glVertexAttrib4fv");
    context.vertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC) load(userptr, "glVertexAttrib4iv");
    context.vertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC) load(userptr, "glVertexAttrib4s");
    context.vertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC) load(userptr, "glVertexAttrib4sv");
    context.vertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC) load(userptr, "glVertexAttrib4ubv");
    context.vertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC) load(userptr, "glVertexAttrib4uiv");
    context.vertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC) load(userptr, "glVertexAttrib4usv");
    context.vertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC) load(userptr, "glVertexAttribPointer");
}
static void glad_gl_load_GL_VERSION_2_1(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.VERSION_2_1) return;
    context.uniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC) load(userptr, "glUniformMatrix2x3fv");
    context.uniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC) load(userptr, "glUniformMatrix2x4fv");
    context.uniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC) load(userptr, "glUniformMatrix3x2fv");
    context.uniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC) load(userptr, "glUniformMatrix3x4fv");
    context.uniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC) load(userptr, "glUniformMatrix4x2fv");
    context.uniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC) load(userptr, "glUniformMatrix4x3fv");
}
static void glad_gl_load_GL_VERSION_3_0(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.VERSION_3_0) return;
    context.beginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC) load(userptr, "glBeginConditionalRender");
    context.beginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC) load(userptr, "glBeginTransformFeedback");
    context.bindBufferBase = (PFNGLBINDBUFFERBASEPROC) load(userptr, "glBindBufferBase");
    context.bindBufferRange = (PFNGLBINDBUFFERRANGEPROC) load(userptr, "glBindBufferRange");
    context.bindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC) load(userptr, "glBindFragDataLocation");
    context.bindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC) load(userptr, "glBindFramebuffer");
    context.bindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC) load(userptr, "glBindRenderbuffer");
    context.bindVertexArray = (PFNGLBINDVERTEXARRAYPROC) load(userptr, "glBindVertexArray");
    context.blitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) load(userptr, "glBlitFramebuffer");
    context.checkFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) load(userptr, "glCheckFramebufferStatus");
    context.clampColor = (PFNGLCLAMPCOLORPROC) load(userptr, "glClampColor");
    context.clearBufferfi = (PFNGLCLEARBUFFERFIPROC) load(userptr, "glClearBufferfi");
    context.clearBufferfv = (PFNGLCLEARBUFFERFVPROC) load(userptr, "glClearBufferfv");
    context.clearBufferiv = (PFNGLCLEARBUFFERIVPROC) load(userptr, "glClearBufferiv");
    context.clearBufferuiv = (PFNGLCLEARBUFFERUIVPROC) load(userptr, "glClearBufferuiv");
    context.colorMaski = (PFNGLCOLORMASKIPROC) load(userptr, "glColorMaski");
    context.deleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) load(userptr, "glDeleteFramebuffers");
    context.deleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) load(userptr, "glDeleteRenderbuffers");
    context.deleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC) load(userptr, "glDeleteVertexArrays");
    context.disablei = (PFNGLDISABLEIPROC) load(userptr, "glDisablei");
    context.enablei = (PFNGLENABLEIPROC) load(userptr, "glEnablei");
    context.endConditionalRender = (PFNGLENDCONDITIONALRENDERPROC) load(userptr, "glEndConditionalRender");
    context.endTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC) load(userptr, "glEndTransformFeedback");
    context.flushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC) load(userptr, "glFlushMappedBufferRange");
    context.framebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) load(userptr, "glFramebufferRenderbuffer");
    context.framebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC) load(userptr, "glFramebufferTexture1D");
    context.framebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) load(userptr, "glFramebufferTexture2D");
    context.framebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC) load(userptr, "glFramebufferTexture3D");
    context.framebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) load(userptr, "glFramebufferTextureLayer");
    context.genFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) load(userptr, "glGenFramebuffers");
    context.genRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) load(userptr, "glGenRenderbuffers");
    context.genVertexArrays = (PFNGLGENVERTEXARRAYSPROC) load(userptr, "glGenVertexArrays");
    context.generateMipmap = (PFNGLGENERATEMIPMAPPROC) load(userptr, "glGenerateMipmap");
    context.getBooleani_v = (PFNGLGETBOOLEANI_VPROC) load(userptr, "glGetBooleani_v");
    context.getFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC) load(userptr, "glGetFragDataLocation");
    context.getFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) load(userptr, "glGetFramebufferAttachmentParameteriv");
    context.getIntegeri_v = (PFNGLGETINTEGERI_VPROC) load(userptr, "glGetIntegeri_v");
    context.getRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) load(userptr, "glGetRenderbufferParameteriv");
    context.getStringi = (PFNGLGETSTRINGIPROC) load(userptr, "glGetStringi");
    context.getTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC) load(userptr, "glGetTexParameterIiv");
    context.getTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC) load(userptr, "glGetTexParameterIuiv");
    context.getTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) load(userptr, "glGetTransformFeedbackVarying");
    context.getUniformuiv = (PFNGLGETUNIFORMUIVPROC) load(userptr, "glGetUniformuiv");
    context.getVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC) load(userptr, "glGetVertexAttribIiv");
    context.getVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC) load(userptr, "glGetVertexAttribIuiv");
    context.isEnabledi = (PFNGLISENABLEDIPROC) load(userptr, "glIsEnabledi");
    context.isFramebuffer = (PFNGLISFRAMEBUFFERPROC) load(userptr, "glIsFramebuffer");
    context.isRenderbuffer = (PFNGLISRENDERBUFFERPROC) load(userptr, "glIsRenderbuffer");
    context.isVertexArray = (PFNGLISVERTEXARRAYPROC) load(userptr, "glIsVertexArray");
    context.mapBufferRange = (PFNGLMAPBUFFERRANGEPROC) load(userptr, "glMapBufferRange");
    context.renderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) load(userptr, "glRenderbufferStorage");
    context.renderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) load(userptr, "glRenderbufferStorageMultisample");
    context.texParameterIiv = (PFNGLTEXPARAMETERIIVPROC) load(userptr, "glTexParameterIiv");
    context.texParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC) load(userptr, "glTexParameterIuiv");
    context.transformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC) load(userptr, "glTransformFeedbackVaryings");
    context.uniform1ui = (PFNGLUNIFORM1UIPROC) load(userptr, "glUniform1ui");
    context.uniform1uiv = (PFNGLUNIFORM1UIVPROC) load(userptr, "glUniform1uiv");
    context.uniform2ui = (PFNGLUNIFORM2UIPROC) load(userptr, "glUniform2ui");
    context.uniform2uiv = (PFNGLUNIFORM2UIVPROC) load(userptr, "glUniform2uiv");
    context.uniform3ui = (PFNGLUNIFORM3UIPROC) load(userptr, "glUniform3ui");
    context.uniform3uiv = (PFNGLUNIFORM3UIVPROC) load(userptr, "glUniform3uiv");
    context.uniform4ui = (PFNGLUNIFORM4UIPROC) load(userptr, "glUniform4ui");
    context.uniform4uiv = (PFNGLUNIFORM4UIVPROC) load(userptr, "glUniform4uiv");
    context.vertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC) load(userptr, "glVertexAttribI1i");
    context.vertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC) load(userptr, "glVertexAttribI1iv");
    context.vertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC) load(userptr, "glVertexAttribI1ui");
    context.vertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC) load(userptr, "glVertexAttribI1uiv");
    context.vertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC) load(userptr, "glVertexAttribI2i");
    context.vertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC) load(userptr, "glVertexAttribI2iv");
    context.vertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC) load(userptr, "glVertexAttribI2ui");
    context.vertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC) load(userptr, "glVertexAttribI2uiv");
    context.vertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC) load(userptr, "glVertexAttribI3i");
    context.vertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC) load(userptr, "glVertexAttribI3iv");
    context.vertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC) load(userptr, "glVertexAttribI3ui");
    context.vertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC) load(userptr, "glVertexAttribI3uiv");
    context.vertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC) load(userptr, "glVertexAttribI4bv");
    context.vertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC) load(userptr, "glVertexAttribI4i");
    context.vertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC) load(userptr, "glVertexAttribI4iv");
    context.vertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC) load(userptr, "glVertexAttribI4sv");
    context.vertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC) load(userptr, "glVertexAttribI4ubv");
    context.vertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC) load(userptr, "glVertexAttribI4ui");
    context.vertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC) load(userptr, "glVertexAttribI4uiv");
    context.vertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC) load(userptr, "glVertexAttribI4usv");
    context.vertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC) load(userptr, "glVertexAttribIPointer");
}
static void glad_gl_load_GL_VERSION_3_1(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.VERSION_3_1) return;
    context.bindBufferBase = (PFNGLBINDBUFFERBASEPROC) load(userptr, "glBindBufferBase");
    context.bindBufferRange = (PFNGLBINDBUFFERRANGEPROC) load(userptr, "glBindBufferRange");
    context.copyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) load(userptr, "glCopyBufferSubData");
    context.drawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC) load(userptr, "glDrawArraysInstanced");
    context.drawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC) load(userptr, "glDrawElementsInstanced");
    context.getActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) load(userptr, "glGetActiveUniformBlockName");
    context.getActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC) load(userptr, "glGetActiveUniformBlockiv");
    context.getActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC) load(userptr, "glGetActiveUniformName");
    context.getActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC) load(userptr, "glGetActiveUniformsiv");
    context.getIntegeri_v = (PFNGLGETINTEGERI_VPROC) load(userptr, "glGetIntegeri_v");
    context.getUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC) load(userptr, "glGetUniformBlockIndex");
    context.getUniformIndices = (PFNGLGETUNIFORMINDICESPROC) load(userptr, "glGetUniformIndices");
    context.primitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC) load(userptr, "glPrimitiveRestartIndex");
    context.texBuffer = (PFNGLTEXBUFFERPROC) load(userptr, "glTexBuffer");
    context.uniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC) load(userptr, "glUniformBlockBinding");
}
static void glad_gl_load_GL_VERSION_3_2(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.VERSION_3_2) return;
    context.clientWaitSync = (PFNGLCLIENTWAITSYNCPROC) load(userptr, "glClientWaitSync");
    context.deleteSync = (PFNGLDELETESYNCPROC) load(userptr, "glDeleteSync");
    context.drawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC) load(userptr, "glDrawElementsBaseVertex");
    context.drawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) load(userptr, "glDrawElementsInstancedBaseVertex");
    context.drawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) load(userptr, "glDrawRangeElementsBaseVertex");
    context.fenceSync = (PFNGLFENCESYNCPROC) load(userptr, "glFenceSync");
    context.framebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC) load(userptr, "glFramebufferTexture");
    context.getBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC) load(userptr, "glGetBufferParameteri64v");
    context.getInteger64i_v = (PFNGLGETINTEGER64I_VPROC) load(userptr, "glGetInteger64i_v");
    context.getInteger64v = (PFNGLGETINTEGER64VPROC) load(userptr, "glGetInteger64v");
    context.getMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC) load(userptr, "glGetMultisamplefv");
    context.getSynciv = (PFNGLGETSYNCIVPROC) load(userptr, "glGetSynciv");
    context.isSync = (PFNGLISSYNCPROC) load(userptr, "glIsSync");
    context.multiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) load(userptr, "glMultiDrawElementsBaseVertex");
    context.provokingVertex = (PFNGLPROVOKINGVERTEXPROC) load(userptr, "glProvokingVertex");
    context.sampleMaski = (PFNGLSAMPLEMASKIPROC) load(userptr, "glSampleMaski");
    context.texImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC) load(userptr, "glTexImage2DMultisample");
    context.texImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC) load(userptr, "glTexImage3DMultisample");
    context.waitSync = (PFNGLWAITSYNCPROC) load(userptr, "glWaitSync");
}
static void glad_gl_load_GL_ES_VERSION_2_0(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ES_VERSION_2_0) return;
    context.activeTexture = (PFNGLACTIVETEXTUREPROC) load(userptr, "glActiveTexture");
    context.attachShader = (PFNGLATTACHSHADERPROC) load(userptr, "glAttachShader");
    context.bindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC) load(userptr, "glBindAttribLocation");
    context.bindBuffer = (PFNGLBINDBUFFERPROC) load(userptr, "glBindBuffer");
    context.bindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC) load(userptr, "glBindFramebuffer");
    context.bindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC) load(userptr, "glBindRenderbuffer");
    context.bindTexture = (PFNGLBINDTEXTUREPROC) load(userptr, "glBindTexture");
    context.blendColor = (PFNGLBLENDCOLORPROC) load(userptr, "glBlendColor");
    context.blendEquation = (PFNGLBLENDEQUATIONPROC) load(userptr, "glBlendEquation");
    context.blendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC) load(userptr, "glBlendEquationSeparate");
    context.blendFunc = (PFNGLBLENDFUNCPROC) load(userptr, "glBlendFunc");
    context.blendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC) load(userptr, "glBlendFuncSeparate");
    context.bufferData = (PFNGLBUFFERDATAPROC) load(userptr, "glBufferData");
    context.bufferSubData = (PFNGLBUFFERSUBDATAPROC) load(userptr, "glBufferSubData");
    context.checkFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) load(userptr, "glCheckFramebufferStatus");
    context.clear = (PFNGLCLEARPROC) load(userptr, "glClear");
    context.clearColor = (PFNGLCLEARCOLORPROC) load(userptr, "glClearColor");
    context.clearDepthf = (PFNGLCLEARDEPTHFPROC) load(userptr, "glClearDepthf");
    context.clearStencil = (PFNGLCLEARSTENCILPROC) load(userptr, "glClearStencil");
    context.colorMask = (PFNGLCOLORMASKPROC) load(userptr, "glColorMask");
    context.compileShader = (PFNGLCOMPILESHADERPROC) load(userptr, "glCompileShader");
    context.compressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC) load(userptr, "glCompressedTexImage2D");
    context.compressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) load(userptr, "glCompressedTexSubImage2D");
    context.copyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC) load(userptr, "glCopyTexImage2D");
    context.copyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC) load(userptr, "glCopyTexSubImage2D");
    context.createProgram = (PFNGLCREATEPROGRAMPROC) load(userptr, "glCreateProgram");
    context.createShader = (PFNGLCREATESHADERPROC) load(userptr, "glCreateShader");
    context.cullFace = (PFNGLCULLFACEPROC) load(userptr, "glCullFace");
    context.deleteBuffers = (PFNGLDELETEBUFFERSPROC) load(userptr, "glDeleteBuffers");
    context.deleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) load(userptr, "glDeleteFramebuffers");
    context.deleteProgram = (PFNGLDELETEPROGRAMPROC) load(userptr, "glDeleteProgram");
    context.deleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) load(userptr, "glDeleteRenderbuffers");
    context.deleteShader = (PFNGLDELETESHADERPROC) load(userptr, "glDeleteShader");
    context.deleteTextures = (PFNGLDELETETEXTURESPROC) load(userptr, "glDeleteTextures");
    context.depthFunc = (PFNGLDEPTHFUNCPROC) load(userptr, "glDepthFunc");
    context.depthMask = (PFNGLDEPTHMASKPROC) load(userptr, "glDepthMask");
    context.depthRangef = (PFNGLDEPTHRANGEFPROC) load(userptr, "glDepthRangef");
    context.detachShader = (PFNGLDETACHSHADERPROC) load(userptr, "glDetachShader");
    context.disable = (PFNGLDISABLEPROC) load(userptr, "glDisable");
    context.disableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC) load(userptr, "glDisableVertexAttribArray");
    context.drawArrays = (PFNGLDRAWARRAYSPROC) load(userptr, "glDrawArrays");
    context.drawElements = (PFNGLDRAWELEMENTSPROC) load(userptr, "glDrawElements");
    context.enable = (PFNGLENABLEPROC) load(userptr, "glEnable");
    context.enableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC) load(userptr, "glEnableVertexAttribArray");
    context.finish = (PFNGLFINISHPROC) load(userptr, "glFinish");
    context.flush = (PFNGLFLUSHPROC) load(userptr, "glFlush");
    context.framebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) load(userptr, "glFramebufferRenderbuffer");
    context.framebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) load(userptr, "glFramebufferTexture2D");
    context.frontFace = (PFNGLFRONTFACEPROC) load(userptr, "glFrontFace");
    context.genBuffers = (PFNGLGENBUFFERSPROC) load(userptr, "glGenBuffers");
    context.genFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) load(userptr, "glGenFramebuffers");
    context.genRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) load(userptr, "glGenRenderbuffers");
    context.genTextures = (PFNGLGENTEXTURESPROC) load(userptr, "glGenTextures");
    context.generateMipmap = (PFNGLGENERATEMIPMAPPROC) load(userptr, "glGenerateMipmap");
    context.getActiveAttrib = (PFNGLGETACTIVEATTRIBPROC) load(userptr, "glGetActiveAttrib");
    context.getActiveUniform = (PFNGLGETACTIVEUNIFORMPROC) load(userptr, "glGetActiveUniform");
    context.getAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC) load(userptr, "glGetAttachedShaders");
    context.getAttribLocation = (PFNGLGETATTRIBLOCATIONPROC) load(userptr, "glGetAttribLocation");
    context.getBooleanv = (PFNGLGETBOOLEANVPROC) load(userptr, "glGetBooleanv");
    context.getBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC) load(userptr, "glGetBufferParameteriv");
    context.getError = (PFNGLGETERRORPROC) load(userptr, "glGetError");
    context.getFloatv = (PFNGLGETFLOATVPROC) load(userptr, "glGetFloatv");
    context.getFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) load(userptr, "glGetFramebufferAttachmentParameteriv");
    context.getIntegerv = (PFNGLGETINTEGERVPROC) load(userptr, "glGetIntegerv");
    context.getProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC) load(userptr, "glGetProgramInfoLog");
    context.getProgramiv = (PFNGLGETPROGRAMIVPROC) load(userptr, "glGetProgramiv");
    context.getRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) load(userptr, "glGetRenderbufferParameteriv");
    context.getShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC) load(userptr, "glGetShaderInfoLog");
    context.getShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC) load(userptr, "glGetShaderPrecisionFormat");
    context.getShaderSource = (PFNGLGETSHADERSOURCEPROC) load(userptr, "glGetShaderSource");
    context.getShaderiv = (PFNGLGETSHADERIVPROC) load(userptr, "glGetShaderiv");
    context.getString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    context.getTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC) load(userptr, "glGetTexParameterfv");
    context.getTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC) load(userptr, "glGetTexParameteriv");
    context.getUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC) load(userptr, "glGetUniformLocation");
    context.getUniformfv = (PFNGLGETUNIFORMFVPROC) load(userptr, "glGetUniformfv");
    context.getUniformiv = (PFNGLGETUNIFORMIVPROC) load(userptr, "glGetUniformiv");
    context.getVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC) load(userptr, "glGetVertexAttribPointerv");
    context.getVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC) load(userptr, "glGetVertexAttribfv");
    context.getVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC) load(userptr, "glGetVertexAttribiv");
    context.hint = (PFNGLHINTPROC) load(userptr, "glHint");
    context.isBuffer = (PFNGLISBUFFERPROC) load(userptr, "glIsBuffer");
    context.isEnabled = (PFNGLISENABLEDPROC) load(userptr, "glIsEnabled");
    context.isFramebuffer = (PFNGLISFRAMEBUFFERPROC) load(userptr, "glIsFramebuffer");
    context.isProgram = (PFNGLISPROGRAMPROC) load(userptr, "glIsProgram");
    context.isRenderbuffer = (PFNGLISRENDERBUFFERPROC) load(userptr, "glIsRenderbuffer");
    context.isShader = (PFNGLISSHADERPROC) load(userptr, "glIsShader");
    context.isTexture = (PFNGLISTEXTUREPROC) load(userptr, "glIsTexture");
    context.lineWidth = (PFNGLLINEWIDTHPROC) load(userptr, "glLineWidth");
    context.linkProgram = (PFNGLLINKPROGRAMPROC) load(userptr, "glLinkProgram");
    context.pixelStorei = (PFNGLPIXELSTOREIPROC) load(userptr, "glPixelStorei");
    context.polygonOffset = (PFNGLPOLYGONOFFSETPROC) load(userptr, "glPolygonOffset");
    context.readPixels = (PFNGLREADPIXELSPROC) load(userptr, "glReadPixels");
    context.releaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC) load(userptr, "glReleaseShaderCompiler");
    context.renderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) load(userptr, "glRenderbufferStorage");
    context.sampleCoverage = (PFNGLSAMPLECOVERAGEPROC) load(userptr, "glSampleCoverage");
    context.scissor = (PFNGLSCISSORPROC) load(userptr, "glScissor");
    context.shaderBinary = (PFNGLSHADERBINARYPROC) load(userptr, "glShaderBinary");
    context.shaderSource = (PFNGLSHADERSOURCEPROC) load(userptr, "glShaderSource");
    context.stencilFunc = (PFNGLSTENCILFUNCPROC) load(userptr, "glStencilFunc");
    context.stencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC) load(userptr, "glStencilFuncSeparate");
    context.stencilMask = (PFNGLSTENCILMASKPROC) load(userptr, "glStencilMask");
    context.stencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC) load(userptr, "glStencilMaskSeparate");
    context.stencilOp = (PFNGLSTENCILOPPROC) load(userptr, "glStencilOp");
    context.stencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC) load(userptr, "glStencilOpSeparate");
    context.texImage2D = (PFNGLTEXIMAGE2DPROC) load(userptr, "glTexImage2D");
    context.texParameterf = (PFNGLTEXPARAMETERFPROC) load(userptr, "glTexParameterf");
    context.texParameterfv = (PFNGLTEXPARAMETERFVPROC) load(userptr, "glTexParameterfv");
    context.texParameteri = (PFNGLTEXPARAMETERIPROC) load(userptr, "glTexParameteri");
    context.texParameteriv = (PFNGLTEXPARAMETERIVPROC) load(userptr, "glTexParameteriv");
    context.texSubImage2D = (PFNGLTEXSUBIMAGE2DPROC) load(userptr, "glTexSubImage2D");
    context.uniform1f = (PFNGLUNIFORM1FPROC) load(userptr, "glUniform1f");
    context.uniform1fv = (PFNGLUNIFORM1FVPROC) load(userptr, "glUniform1fv");
    context.uniform1i = (PFNGLUNIFORM1IPROC) load(userptr, "glUniform1i");
    context.uniform1iv = (PFNGLUNIFORM1IVPROC) load(userptr, "glUniform1iv");
    context.uniform2f = (PFNGLUNIFORM2FPROC) load(userptr, "glUniform2f");
    context.uniform2fv = (PFNGLUNIFORM2FVPROC) load(userptr, "glUniform2fv");
    context.uniform2i = (PFNGLUNIFORM2IPROC) load(userptr, "glUniform2i");
    context.uniform2iv = (PFNGLUNIFORM2IVPROC) load(userptr, "glUniform2iv");
    context.uniform3f = (PFNGLUNIFORM3FPROC) load(userptr, "glUniform3f");
    context.uniform3fv = (PFNGLUNIFORM3FVPROC) load(userptr, "glUniform3fv");
    context.uniform3i = (PFNGLUNIFORM3IPROC) load(userptr, "glUniform3i");
    context.uniform3iv = (PFNGLUNIFORM3IVPROC) load(userptr, "glUniform3iv");
    context.uniform4f = (PFNGLUNIFORM4FPROC) load(userptr, "glUniform4f");
    context.uniform4fv = (PFNGLUNIFORM4FVPROC) load(userptr, "glUniform4fv");
    context.uniform4i = (PFNGLUNIFORM4IPROC) load(userptr, "glUniform4i");
    context.uniform4iv = (PFNGLUNIFORM4IVPROC) load(userptr, "glUniform4iv");
    context.uniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC) load(userptr, "glUniformMatrix2fv");
    context.uniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC) load(userptr, "glUniformMatrix3fv");
    context.uniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC) load(userptr, "glUniformMatrix4fv");
    context.useProgram = (PFNGLUSEPROGRAMPROC) load(userptr, "glUseProgram");
    context.validateProgram = (PFNGLVALIDATEPROGRAMPROC) load(userptr, "glValidateProgram");
    context.vertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC) load(userptr, "glVertexAttrib1f");
    context.vertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC) load(userptr, "glVertexAttrib1fv");
    context.vertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC) load(userptr, "glVertexAttrib2f");
    context.vertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC) load(userptr, "glVertexAttrib2fv");
    context.vertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC) load(userptr, "glVertexAttrib3f");
    context.vertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC) load(userptr, "glVertexAttrib3fv");
    context.vertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC) load(userptr, "glVertexAttrib4f");
    context.vertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC) load(userptr, "glVertexAttrib4fv");
    context.vertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC) load(userptr, "glVertexAttribPointer");
    context.viewport = (PFNGLVIEWPORTPROC) load(userptr, "glViewport");
}
static void glad_gl_load_GL_ES_VERSION_3_0(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ES_VERSION_3_0) return;
    context.beginQuery = (PFNGLBEGINQUERYPROC) load(userptr, "glBeginQuery");
    context.beginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC) load(userptr, "glBeginTransformFeedback");
    context.bindBufferBase = (PFNGLBINDBUFFERBASEPROC) load(userptr, "glBindBufferBase");
    context.bindBufferRange = (PFNGLBINDBUFFERRANGEPROC) load(userptr, "glBindBufferRange");
    context.bindSampler = (PFNGLBINDSAMPLERPROC) load(userptr, "glBindSampler");
    context.bindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC) load(userptr, "glBindTransformFeedback");
    context.bindVertexArray = (PFNGLBINDVERTEXARRAYPROC) load(userptr, "glBindVertexArray");
    context.blitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) load(userptr, "glBlitFramebuffer");
    context.clearBufferfi = (PFNGLCLEARBUFFERFIPROC) load(userptr, "glClearBufferfi");
    context.clearBufferfv = (PFNGLCLEARBUFFERFVPROC) load(userptr, "glClearBufferfv");
    context.clearBufferiv = (PFNGLCLEARBUFFERIVPROC) load(userptr, "glClearBufferiv");
    context.clearBufferuiv = (PFNGLCLEARBUFFERUIVPROC) load(userptr, "glClearBufferuiv");
    context.clientWaitSync = (PFNGLCLIENTWAITSYNCPROC) load(userptr, "glClientWaitSync");
    context.compressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC) load(userptr, "glCompressedTexImage3D");
    context.compressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) load(userptr, "glCompressedTexSubImage3D");
    context.copyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) load(userptr, "glCopyBufferSubData");
    context.copyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC) load(userptr, "glCopyTexSubImage3D");
    context.deleteQueries = (PFNGLDELETEQUERIESPROC) load(userptr, "glDeleteQueries");
    context.deleteSamplers = (PFNGLDELETESAMPLERSPROC) load(userptr, "glDeleteSamplers");
    context.deleteSync = (PFNGLDELETESYNCPROC) load(userptr, "glDeleteSync");
    context.deleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC) load(userptr, "glDeleteTransformFeedbacks");
    context.deleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC) load(userptr, "glDeleteVertexArrays");
    context.drawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC) load(userptr, "glDrawArraysInstanced");
    context.drawBuffers = (PFNGLDRAWBUFFERSPROC) load(userptr, "glDrawBuffers");
    context.drawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC) load(userptr, "glDrawElementsInstanced");
    context.drawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC) load(userptr, "glDrawRangeElements");
    context.endQuery = (PFNGLENDQUERYPROC) load(userptr, "glEndQuery");
    context.endTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC) load(userptr, "glEndTransformFeedback");
    context.fenceSync = (PFNGLFENCESYNCPROC) load(userptr, "glFenceSync");
    context.flushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC) load(userptr, "glFlushMappedBufferRange");
    context.framebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) load(userptr, "glFramebufferTextureLayer");
    context.genQueries = (PFNGLGENQUERIESPROC) load(userptr, "glGenQueries");
    context.genSamplers = (PFNGLGENSAMPLERSPROC) load(userptr, "glGenSamplers");
    context.genTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC) load(userptr, "glGenTransformFeedbacks");
    context.genVertexArrays = (PFNGLGENVERTEXARRAYSPROC) load(userptr, "glGenVertexArrays");
    context.getActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) load(userptr, "glGetActiveUniformBlockName");
    context.getActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC) load(userptr, "glGetActiveUniformBlockiv");
    context.getActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC) load(userptr, "glGetActiveUniformsiv");
    context.getBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC) load(userptr, "glGetBufferParameteri64v");
    context.getBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC) load(userptr, "glGetBufferPointerv");
    context.getFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC) load(userptr, "glGetFragDataLocation");
    context.getInteger64i_v = (PFNGLGETINTEGER64I_VPROC) load(userptr, "glGetInteger64i_v");
    context.getInteger64v = (PFNGLGETINTEGER64VPROC) load(userptr, "glGetInteger64v");
    context.getIntegeri_v = (PFNGLGETINTEGERI_VPROC) load(userptr, "glGetIntegeri_v");
    context.getInternalformativ = (PFNGLGETINTERNALFORMATIVPROC) load(userptr, "glGetInternalformativ");
    context.getProgramBinary = (PFNGLGETPROGRAMBINARYPROC) load(userptr, "glGetProgramBinary");
    context.getQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC) load(userptr, "glGetQueryObjectuiv");
    context.getQueryiv = (PFNGLGETQUERYIVPROC) load(userptr, "glGetQueryiv");
    context.getSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC) load(userptr, "glGetSamplerParameterfv");
    context.getSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC) load(userptr, "glGetSamplerParameteriv");
    context.getStringi = (PFNGLGETSTRINGIPROC) load(userptr, "glGetStringi");
    context.getSynciv = (PFNGLGETSYNCIVPROC) load(userptr, "glGetSynciv");
    context.getTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) load(userptr, "glGetTransformFeedbackVarying");
    context.getUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC) load(userptr, "glGetUniformBlockIndex");
    context.getUniformIndices = (PFNGLGETUNIFORMINDICESPROC) load(userptr, "glGetUniformIndices");
    context.getUniformuiv = (PFNGLGETUNIFORMUIVPROC) load(userptr, "glGetUniformuiv");
    context.getVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC) load(userptr, "glGetVertexAttribIiv");
    context.getVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC) load(userptr, "glGetVertexAttribIuiv");
    context.invalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC) load(userptr, "glInvalidateFramebuffer");
    context.invalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC) load(userptr, "glInvalidateSubFramebuffer");
    context.isQuery = (PFNGLISQUERYPROC) load(userptr, "glIsQuery");
    context.isSampler = (PFNGLISSAMPLERPROC) load(userptr, "glIsSampler");
    context.isSync = (PFNGLISSYNCPROC) load(userptr, "glIsSync");
    context.isTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC) load(userptr, "glIsTransformFeedback");
    context.isVertexArray = (PFNGLISVERTEXARRAYPROC) load(userptr, "glIsVertexArray");
    context.mapBufferRange = (PFNGLMAPBUFFERRANGEPROC) load(userptr, "glMapBufferRange");
    context.pauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC) load(userptr, "glPauseTransformFeedback");
    context.programBinary = (PFNGLPROGRAMBINARYPROC) load(userptr, "glProgramBinary");
    context.programParameteri = (PFNGLPROGRAMPARAMETERIPROC) load(userptr, "glProgramParameteri");
    context.readBuffer = (PFNGLREADBUFFERPROC) load(userptr, "glReadBuffer");
    context.renderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) load(userptr, "glRenderbufferStorageMultisample");
    context.resumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC) load(userptr, "glResumeTransformFeedback");
    context.samplerParameterf = (PFNGLSAMPLERPARAMETERFPROC) load(userptr, "glSamplerParameterf");
    context.samplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC) load(userptr, "glSamplerParameterfv");
    context.samplerParameteri = (PFNGLSAMPLERPARAMETERIPROC) load(userptr, "glSamplerParameteri");
    context.samplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC) load(userptr, "glSamplerParameteriv");
    context.texImage3D = (PFNGLTEXIMAGE3DPROC) load(userptr, "glTexImage3D");
    context.texStorage2D = (PFNGLTEXSTORAGE2DPROC) load(userptr, "glTexStorage2D");
    context.texStorage3D = (PFNGLTEXSTORAGE3DPROC) load(userptr, "glTexStorage3D");
    context.texSubImage3D = (PFNGLTEXSUBIMAGE3DPROC) load(userptr, "glTexSubImage3D");
    context.transformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC) load(userptr, "glTransformFeedbackVaryings");
    context.uniform1ui = (PFNGLUNIFORM1UIPROC) load(userptr, "glUniform1ui");
    context.uniform1uiv = (PFNGLUNIFORM1UIVPROC) load(userptr, "glUniform1uiv");
    context.uniform2ui = (PFNGLUNIFORM2UIPROC) load(userptr, "glUniform2ui");
    context.uniform2uiv = (PFNGLUNIFORM2UIVPROC) load(userptr, "glUniform2uiv");
    context.uniform3ui = (PFNGLUNIFORM3UIPROC) load(userptr, "glUniform3ui");
    context.uniform3uiv = (PFNGLUNIFORM3UIVPROC) load(userptr, "glUniform3uiv");
    context.uniform4ui = (PFNGLUNIFORM4UIPROC) load(userptr, "glUniform4ui");
    context.uniform4uiv = (PFNGLUNIFORM4UIVPROC) load(userptr, "glUniform4uiv");
    context.uniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC) load(userptr, "glUniformBlockBinding");
    context.uniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC) load(userptr, "glUniformMatrix2x3fv");
    context.uniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC) load(userptr, "glUniformMatrix2x4fv");
    context.uniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC) load(userptr, "glUniformMatrix3x2fv");
    context.uniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC) load(userptr, "glUniformMatrix3x4fv");
    context.uniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC) load(userptr, "glUniformMatrix4x2fv");
    context.uniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC) load(userptr, "glUniformMatrix4x3fv");
    context.unmapBuffer = (PFNGLUNMAPBUFFERPROC) load(userptr, "glUnmapBuffer");
    context.vertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC) load(userptr, "glVertexAttribDivisor");
    context.vertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC) load(userptr, "glVertexAttribI4i");
    context.vertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC) load(userptr, "glVertexAttribI4iv");
    context.vertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC) load(userptr, "glVertexAttribI4ui");
    context.vertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC) load(userptr, "glVertexAttribI4uiv");
    context.vertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC) load(userptr, "glVertexAttribIPointer");
    context.waitSync = (PFNGLWAITSYNCPROC) load(userptr, "glWaitSync");
}
static void glad_gl_load_GL_ES_VERSION_3_1(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ES_VERSION_3_1) return;
    context.activeShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC) load(userptr, "glActiveShaderProgram");
    context.bindImageTexture = (PFNGLBINDIMAGETEXTUREPROC) load(userptr, "glBindImageTexture");
    context.bindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC) load(userptr, "glBindProgramPipeline");
    context.bindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC) load(userptr, "glBindVertexBuffer");
    context.createShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC) load(userptr, "glCreateShaderProgramv");
    context.deleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC) load(userptr, "glDeleteProgramPipelines");
    context.dispatchCompute = (PFNGLDISPATCHCOMPUTEPROC) load(userptr, "glDispatchCompute");
    context.dispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC) load(userptr, "glDispatchComputeIndirect");
    context.drawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC) load(userptr, "glDrawArraysIndirect");
    context.drawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC) load(userptr, "glDrawElementsIndirect");
    context.framebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC) load(userptr, "glFramebufferParameteri");
    context.genProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC) load(userptr, "glGenProgramPipelines");
    context.getBooleani_v = (PFNGLGETBOOLEANI_VPROC) load(userptr, "glGetBooleani_v");
    context.getFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC) load(userptr, "glGetFramebufferParameteriv");
    context.getMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC) load(userptr, "glGetMultisamplefv");
    context.getProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC) load(userptr, "glGetProgramInterfaceiv");
    context.getProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC) load(userptr, "glGetProgramPipelineInfoLog");
    context.getProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC) load(userptr, "glGetProgramPipelineiv");
    context.getProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC) load(userptr, "glGetProgramResourceIndex");
    context.getProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC) load(userptr, "glGetProgramResourceLocation");
    context.getProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC) load(userptr, "glGetProgramResourceName");
    context.getProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC) load(userptr, "glGetProgramResourceiv");
    context.getTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC) load(userptr, "glGetTexLevelParameterfv");
    context.getTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC) load(userptr, "glGetTexLevelParameteriv");
    context.isProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC) load(userptr, "glIsProgramPipeline");
    context.memoryBarrier = (PFNGLMEMORYBARRIERPROC) load(userptr, "glMemoryBarrier");
    context.memoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC) load(userptr, "glMemoryBarrierByRegion");
    context.programUniform1f = (PFNGLPROGRAMUNIFORM1FPROC) load(userptr, "glProgramUniform1f");
    context.programUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC) load(userptr, "glProgramUniform1fv");
    context.programUniform1i = (PFNGLPROGRAMUNIFORM1IPROC) load(userptr, "glProgramUniform1i");
    context.programUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC) load(userptr, "glProgramUniform1iv");
    context.programUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC) load(userptr, "glProgramUniform1ui");
    context.programUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC) load(userptr, "glProgramUniform1uiv");
    context.programUniform2f = (PFNGLPROGRAMUNIFORM2FPROC) load(userptr, "glProgramUniform2f");
    context.programUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC) load(userptr, "glProgramUniform2fv");
    context.programUniform2i = (PFNGLPROGRAMUNIFORM2IPROC) load(userptr, "glProgramUniform2i");
    context.programUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC) load(userptr, "glProgramUniform2iv");
    context.programUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC) load(userptr, "glProgramUniform2ui");
    context.programUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC) load(userptr, "glProgramUniform2uiv");
    context.programUniform3f = (PFNGLPROGRAMUNIFORM3FPROC) load(userptr, "glProgramUniform3f");
    context.programUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC) load(userptr, "glProgramUniform3fv");
    context.programUniform3i = (PFNGLPROGRAMUNIFORM3IPROC) load(userptr, "glProgramUniform3i");
    context.programUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC) load(userptr, "glProgramUniform3iv");
    context.programUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC) load(userptr, "glProgramUniform3ui");
    context.programUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC) load(userptr, "glProgramUniform3uiv");
    context.programUniform4f = (PFNGLPROGRAMUNIFORM4FPROC) load(userptr, "glProgramUniform4f");
    context.programUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC) load(userptr, "glProgramUniform4fv");
    context.programUniform4i = (PFNGLPROGRAMUNIFORM4IPROC) load(userptr, "glProgramUniform4i");
    context.programUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC) load(userptr, "glProgramUniform4iv");
    context.programUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC) load(userptr, "glProgramUniform4ui");
    context.programUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC) load(userptr, "glProgramUniform4uiv");
    context.programUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC) load(userptr, "glProgramUniformMatrix2fv");
    context.programUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) load(userptr, "glProgramUniformMatrix2x3fv");
    context.programUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) load(userptr, "glProgramUniformMatrix2x4fv");
    context.programUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC) load(userptr, "glProgramUniformMatrix3fv");
    context.programUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) load(userptr, "glProgramUniformMatrix3x2fv");
    context.programUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) load(userptr, "glProgramUniformMatrix3x4fv");
    context.programUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC) load(userptr, "glProgramUniformMatrix4fv");
    context.programUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) load(userptr, "glProgramUniformMatrix4x2fv");
    context.programUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) load(userptr, "glProgramUniformMatrix4x3fv");
    context.sampleMaski = (PFNGLSAMPLEMASKIPROC) load(userptr, "glSampleMaski");
    context.texStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC) load(userptr, "glTexStorage2DMultisample");
    context.useProgramStages = (PFNGLUSEPROGRAMSTAGESPROC) load(userptr, "glUseProgramStages");
    context.validateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC) load(userptr, "glValidateProgramPipeline");
    context.vertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC) load(userptr, "glVertexAttribBinding");
    context.vertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC) load(userptr, "glVertexAttribFormat");
    context.vertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC) load(userptr, "glVertexAttribIFormat");
    context.vertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC) load(userptr, "glVertexBindingDivisor");
}
static void glad_gl_load_GL_ES_VERSION_3_2(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ES_VERSION_3_2) return;
    context.blendBarrier = (PFNGLBLENDBARRIERPROC) load(userptr, "glBlendBarrier");
    context.blendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC) load(userptr, "glBlendEquationSeparatei");
    context.blendEquationi = (PFNGLBLENDEQUATIONIPROC) load(userptr, "glBlendEquationi");
    context.blendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC) load(userptr, "glBlendFuncSeparatei");
    context.blendFunci = (PFNGLBLENDFUNCIPROC) load(userptr, "glBlendFunci");
    context.colorMaski = (PFNGLCOLORMASKIPROC) load(userptr, "glColorMaski");
    context.copyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC) load(userptr, "glCopyImageSubData");
    context.debugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC) load(userptr, "glDebugMessageCallback");
    context.debugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC) load(userptr, "glDebugMessageControl");
    context.debugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC) load(userptr, "glDebugMessageInsert");
    context.disablei = (PFNGLDISABLEIPROC) load(userptr, "glDisablei");
    context.drawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC) load(userptr, "glDrawElementsBaseVertex");
    context.drawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) load(userptr, "glDrawElementsInstancedBaseVertex");
    context.drawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) load(userptr, "glDrawRangeElementsBaseVertex");
    context.enablei = (PFNGLENABLEIPROC) load(userptr, "glEnablei");
    context.framebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC) load(userptr, "glFramebufferTexture");
    context.getDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC) load(userptr, "glGetDebugMessageLog");
    context.getGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC) load(userptr, "glGetGraphicsResetStatus");
    context.getObjectLabel = (PFNGLGETOBJECTLABELPROC) load(userptr, "glGetObjectLabel");
    context.getObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC) load(userptr, "glGetObjectPtrLabel");
    context.getPointerv = (PFNGLGETPOINTERVPROC) load(userptr, "glGetPointerv");
    context.getSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC) load(userptr, "glGetSamplerParameterIiv");
    context.getSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC) load(userptr, "glGetSamplerParameterIuiv");
    context.getTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC) load(userptr, "glGetTexParameterIiv");
    context.getTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC) load(userptr, "glGetTexParameterIuiv");
    context.getnUniformfv = (PFNGLGETNUNIFORMFVPROC) load(userptr, "glGetnUniformfv");
    context.getnUniformiv = (PFNGLGETNUNIFORMIVPROC) load(userptr, "glGetnUniformiv");
    context.getnUniformuiv = (PFNGLGETNUNIFORMUIVPROC) load(userptr, "glGetnUniformuiv");
    context.isEnabledi = (PFNGLISENABLEDIPROC) load(userptr, "glIsEnabledi");
    context.minSampleShading = (PFNGLMINSAMPLESHADINGPROC) load(userptr, "glMinSampleShading");
    context.objectLabel = (PFNGLOBJECTLABELPROC) load(userptr, "glObjectLabel");
    context.objectPtrLabel = (PFNGLOBJECTPTRLABELPROC) load(userptr, "glObjectPtrLabel");
    context.patchParameteri = (PFNGLPATCHPARAMETERIPROC) load(userptr, "glPatchParameteri");
    context.popDebugGroup = (PFNGLPOPDEBUGGROUPPROC) load(userptr, "glPopDebugGroup");
    context.primitiveBoundingBox = (PFNGLPRIMITIVEBOUNDINGBOXPROC) load(userptr, "glPrimitiveBoundingBox");
    context.pushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC) load(userptr, "glPushDebugGroup");
    context.readnPixels = (PFNGLREADNPIXELSPROC) load(userptr, "glReadnPixels");
    context.samplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC) load(userptr, "glSamplerParameterIiv");
    context.samplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC) load(userptr, "glSamplerParameterIuiv");
    context.texBuffer = (PFNGLTEXBUFFERPROC) load(userptr, "glTexBuffer");
    context.texBufferRange = (PFNGLTEXBUFFERRANGEPROC) load(userptr, "glTexBufferRange");
    context.texParameterIiv = (PFNGLTEXPARAMETERIIVPROC) load(userptr, "glTexParameterIiv");
    context.texParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC) load(userptr, "glTexParameterIuiv");
    context.texStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC) load(userptr, "glTexStorage3DMultisample");
}
static void glad_gl_load_GL_APPLE_flush_buffer_range(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.APPLE_flush_buffer_range) return;
    context.bufferParameteriAPPLE = (PFNGLBUFFERPARAMETERIAPPLEPROC) load(userptr, "glBufferParameteriAPPLE");
    context.flushMappedBufferRangeAPPLE = (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) load(userptr, "glFlushMappedBufferRangeAPPLE");
}
static void glad_gl_load_GL_APPLE_vertex_array_object(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.APPLE_vertex_array_object) return;
    context.bindVertexArrayAPPLE = (PFNGLBINDVERTEXARRAYAPPLEPROC) load(userptr, "glBindVertexArrayAPPLE");
    context.deleteVertexArraysAPPLE = (PFNGLDELETEVERTEXARRAYSAPPLEPROC) load(userptr, "glDeleteVertexArraysAPPLE");
    context.genVertexArraysAPPLE = (PFNGLGENVERTEXARRAYSAPPLEPROC) load(userptr, "glGenVertexArraysAPPLE");
    context.isVertexArrayAPPLE = (PFNGLISVERTEXARRAYAPPLEPROC) load(userptr, "glIsVertexArrayAPPLE");
}
static void glad_gl_load_GL_ARB_color_buffer_float(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_color_buffer_float) return;
    context.clampColorARB = (PFNGLCLAMPCOLORARBPROC) load(userptr, "glClampColorARB");
}
static void glad_gl_load_GL_ARB_copy_buffer(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_copy_buffer) return;
    context.copyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) load(userptr, "glCopyBufferSubData");
}
static void glad_gl_load_GL_ARB_draw_buffers(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_draw_buffers) return;
    context.drawBuffersARB = (PFNGLDRAWBUFFERSARBPROC) load(userptr, "glDrawBuffersARB");
}
static void glad_gl_load_GL_ARB_draw_elements_base_vertex(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_draw_elements_base_vertex) return;
    context.drawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC) load(userptr, "glDrawElementsBaseVertex");
    context.drawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) load(userptr, "glDrawElementsInstancedBaseVertex");
    context.drawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) load(userptr, "glDrawRangeElementsBaseVertex");
    context.multiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) load(userptr, "glMultiDrawElementsBaseVertex");
}
static void glad_gl_load_GL_ARB_draw_instanced(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_draw_instanced) return;
    context.drawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC) load(userptr, "glDrawArraysInstancedARB");
    context.drawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC) load(userptr, "glDrawElementsInstancedARB");
}
static void glad_gl_load_GL_ARB_framebuffer_object(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_framebuffer_object) return;
    context.bindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC) load(userptr, "glBindFramebuffer");
    context.bindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC) load(userptr, "glBindRenderbuffer");
    context.blitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) load(userptr, "glBlitFramebuffer");
    context.checkFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) load(userptr, "glCheckFramebufferStatus");
    context.deleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) load(userptr, "glDeleteFramebuffers");
    context.deleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) load(userptr, "glDeleteRenderbuffers");
    context.framebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) load(userptr, "glFramebufferRenderbuffer");
    context.framebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC) load(userptr, "glFramebufferTexture1D");
    context.framebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) load(userptr, "glFramebufferTexture2D");
    context.framebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC) load(userptr, "glFramebufferTexture3D");
    context.framebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) load(userptr, "glFramebufferTextureLayer");
    context.genFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) load(userptr, "glGenFramebuffers");
    context.genRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) load(userptr, "glGenRenderbuffers");
    context.generateMipmap = (PFNGLGENERATEMIPMAPPROC) load(userptr, "glGenerateMipmap");
    context.getFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) load(userptr, "glGetFramebufferAttachmentParameteriv");
    context.getRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) load(userptr, "glGetRenderbufferParameteriv");
    context.isFramebuffer = (PFNGLISFRAMEBUFFERPROC) load(userptr, "glIsFramebuffer");
    context.isRenderbuffer = (PFNGLISRENDERBUFFERPROC) load(userptr, "glIsRenderbuffer");
    context.renderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) load(userptr, "glRenderbufferStorage");
    context.renderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) load(userptr, "glRenderbufferStorageMultisample");
}
static void glad_gl_load_GL_ARB_geometry_shader4(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_geometry_shader4) return;
    context.framebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC) load(userptr, "glFramebufferTextureARB");
    context.framebufferTextureFaceARB = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) load(userptr, "glFramebufferTextureFaceARB");
    context.framebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) load(userptr, "glFramebufferTextureLayerARB");
    context.programParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC) load(userptr, "glProgramParameteriARB");
}
static void glad_gl_load_GL_ARB_imaging(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_imaging) return;
    context.blendColor = (PFNGLBLENDCOLORPROC) load(userptr, "glBlendColor");
    context.blendEquation = (PFNGLBLENDEQUATIONPROC) load(userptr, "glBlendEquation");
}
static void glad_gl_load_GL_ARB_map_buffer_range(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_map_buffer_range) return;
    context.flushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC) load(userptr, "glFlushMappedBufferRange");
    context.mapBufferRange = (PFNGLMAPBUFFERRANGEPROC) load(userptr, "glMapBufferRange");
}
static void glad_gl_load_GL_ARB_multisample(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_multisample) return;
    context.sampleCoverageARB = (PFNGLSAMPLECOVERAGEARBPROC) load(userptr, "glSampleCoverageARB");
}
static void glad_gl_load_GL_ARB_multitexture(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_multitexture) return;
    context.activeTextureARB = (PFNGLACTIVETEXTUREARBPROC) load(userptr, "glActiveTextureARB");
    context.clientActiveTextureARB = (PFNGLCLIENTACTIVETEXTUREARBPROC) load(userptr, "glClientActiveTextureARB");
    context.multiTexCoord1dARB = (PFNGLMULTITEXCOORD1DARBPROC) load(userptr, "glMultiTexCoord1dARB");
    context.multiTexCoord1dvARB = (PFNGLMULTITEXCOORD1DVARBPROC) load(userptr, "glMultiTexCoord1dvARB");
    context.multiTexCoord1fARB = (PFNGLMULTITEXCOORD1FARBPROC) load(userptr, "glMultiTexCoord1fARB");
    context.multiTexCoord1fvARB = (PFNGLMULTITEXCOORD1FVARBPROC) load(userptr, "glMultiTexCoord1fvARB");
    context.multiTexCoord1iARB = (PFNGLMULTITEXCOORD1IARBPROC) load(userptr, "glMultiTexCoord1iARB");
    context.multiTexCoord1ivARB = (PFNGLMULTITEXCOORD1IVARBPROC) load(userptr, "glMultiTexCoord1ivARB");
    context.multiTexCoord1sARB = (PFNGLMULTITEXCOORD1SARBPROC) load(userptr, "glMultiTexCoord1sARB");
    context.multiTexCoord1svARB = (PFNGLMULTITEXCOORD1SVARBPROC) load(userptr, "glMultiTexCoord1svARB");
    context.multiTexCoord2dARB = (PFNGLMULTITEXCOORD2DARBPROC) load(userptr, "glMultiTexCoord2dARB");
    context.multiTexCoord2dvARB = (PFNGLMULTITEXCOORD2DVARBPROC) load(userptr, "glMultiTexCoord2dvARB");
    context.multiTexCoord2fARB = (PFNGLMULTITEXCOORD2FARBPROC) load(userptr, "glMultiTexCoord2fARB");
    context.multiTexCoord2fvARB = (PFNGLMULTITEXCOORD2FVARBPROC) load(userptr, "glMultiTexCoord2fvARB");
    context.multiTexCoord2iARB = (PFNGLMULTITEXCOORD2IARBPROC) load(userptr, "glMultiTexCoord2iARB");
    context.multiTexCoord2ivARB = (PFNGLMULTITEXCOORD2IVARBPROC) load(userptr, "glMultiTexCoord2ivARB");
    context.multiTexCoord2sARB = (PFNGLMULTITEXCOORD2SARBPROC) load(userptr, "glMultiTexCoord2sARB");
    context.multiTexCoord2svARB = (PFNGLMULTITEXCOORD2SVARBPROC) load(userptr, "glMultiTexCoord2svARB");
    context.multiTexCoord3dARB = (PFNGLMULTITEXCOORD3DARBPROC) load(userptr, "glMultiTexCoord3dARB");
    context.multiTexCoord3dvARB = (PFNGLMULTITEXCOORD3DVARBPROC) load(userptr, "glMultiTexCoord3dvARB");
    context.multiTexCoord3fARB = (PFNGLMULTITEXCOORD3FARBPROC) load(userptr, "glMultiTexCoord3fARB");
    context.multiTexCoord3fvARB = (PFNGLMULTITEXCOORD3FVARBPROC) load(userptr, "glMultiTexCoord3fvARB");
    context.multiTexCoord3iARB = (PFNGLMULTITEXCOORD3IARBPROC) load(userptr, "glMultiTexCoord3iARB");
    context.multiTexCoord3ivARB = (PFNGLMULTITEXCOORD3IVARBPROC) load(userptr, "glMultiTexCoord3ivARB");
    context.multiTexCoord3sARB = (PFNGLMULTITEXCOORD3SARBPROC) load(userptr, "glMultiTexCoord3sARB");
    context.multiTexCoord3svARB = (PFNGLMULTITEXCOORD3SVARBPROC) load(userptr, "glMultiTexCoord3svARB");
    context.multiTexCoord4dARB = (PFNGLMULTITEXCOORD4DARBPROC) load(userptr, "glMultiTexCoord4dARB");
    context.multiTexCoord4dvARB = (PFNGLMULTITEXCOORD4DVARBPROC) load(userptr, "glMultiTexCoord4dvARB");
    context.multiTexCoord4fARB = (PFNGLMULTITEXCOORD4FARBPROC) load(userptr, "glMultiTexCoord4fARB");
    context.multiTexCoord4fvARB = (PFNGLMULTITEXCOORD4FVARBPROC) load(userptr, "glMultiTexCoord4fvARB");
    context.multiTexCoord4iARB = (PFNGLMULTITEXCOORD4IARBPROC) load(userptr, "glMultiTexCoord4iARB");
    context.multiTexCoord4ivARB = (PFNGLMULTITEXCOORD4IVARBPROC) load(userptr, "glMultiTexCoord4ivARB");
    context.multiTexCoord4sARB = (PFNGLMULTITEXCOORD4SARBPROC) load(userptr, "glMultiTexCoord4sARB");
    context.multiTexCoord4svARB = (PFNGLMULTITEXCOORD4SVARBPROC) load(userptr, "glMultiTexCoord4svARB");
}
static void glad_gl_load_GL_ARB_occlusion_query(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_occlusion_query) return;
    context.beginQueryARB = (PFNGLBEGINQUERYARBPROC) load(userptr, "glBeginQueryARB");
    context.deleteQueriesARB = (PFNGLDELETEQUERIESARBPROC) load(userptr, "glDeleteQueriesARB");
    context.endQueryARB = (PFNGLENDQUERYARBPROC) load(userptr, "glEndQueryARB");
    context.genQueriesARB = (PFNGLGENQUERIESARBPROC) load(userptr, "glGenQueriesARB");
    context.getQueryObjectivARB = (PFNGLGETQUERYOBJECTIVARBPROC) load(userptr, "glGetQueryObjectivARB");
    context.getQueryObjectuivARB = (PFNGLGETQUERYOBJECTUIVARBPROC) load(userptr, "glGetQueryObjectuivARB");
    context.getQueryivARB = (PFNGLGETQUERYIVARBPROC) load(userptr, "glGetQueryivARB");
    context.isQueryARB = (PFNGLISQUERYARBPROC) load(userptr, "glIsQueryARB");
}
static void glad_gl_load_GL_ARB_point_parameters(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_point_parameters) return;
    context.pointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC) load(userptr, "glPointParameterfARB");
    context.pointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC) load(userptr, "glPointParameterfvARB");
}
static void glad_gl_load_GL_ARB_provoking_vertex(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_provoking_vertex) return;
    context.provokingVertex = (PFNGLPROVOKINGVERTEXPROC) load(userptr, "glProvokingVertex");
}
static void glad_gl_load_GL_ARB_shader_objects(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_shader_objects) return;
    context.attachObjectARB = (PFNGLATTACHOBJECTARBPROC) load(userptr, "glAttachObjectARB");
    context.compileShaderARB = (PFNGLCOMPILESHADERARBPROC) load(userptr, "glCompileShaderARB");
    context.createProgramObjectARB = (PFNGLCREATEPROGRAMOBJECTARBPROC) load(userptr, "glCreateProgramObjectARB");
    context.createShaderObjectARB = (PFNGLCREATESHADEROBJECTARBPROC) load(userptr, "glCreateShaderObjectARB");
    context.deleteObjectARB = (PFNGLDELETEOBJECTARBPROC) load(userptr, "glDeleteObjectARB");
    context.detachObjectARB = (PFNGLDETACHOBJECTARBPROC) load(userptr, "glDetachObjectARB");
    context.getActiveUniformARB = (PFNGLGETACTIVEUNIFORMARBPROC) load(userptr, "glGetActiveUniformARB");
    context.getAttachedObjectsARB = (PFNGLGETATTACHEDOBJECTSARBPROC) load(userptr, "glGetAttachedObjectsARB");
    context.getHandleARB = (PFNGLGETHANDLEARBPROC) load(userptr, "glGetHandleARB");
    context.getInfoLogARB = (PFNGLGETINFOLOGARBPROC) load(userptr, "glGetInfoLogARB");
    context.getObjectParameterfvARB = (PFNGLGETOBJECTPARAMETERFVARBPROC) load(userptr, "glGetObjectParameterfvARB");
    context.getObjectParameterivARB = (PFNGLGETOBJECTPARAMETERIVARBPROC) load(userptr, "glGetObjectParameterivARB");
    context.getShaderSourceARB = (PFNGLGETSHADERSOURCEARBPROC) load(userptr, "glGetShaderSourceARB");
    context.getUniformLocationARB = (PFNGLGETUNIFORMLOCATIONARBPROC) load(userptr, "glGetUniformLocationARB");
    context.getUniformfvARB = (PFNGLGETUNIFORMFVARBPROC) load(userptr, "glGetUniformfvARB");
    context.getUniformivARB = (PFNGLGETUNIFORMIVARBPROC) load(userptr, "glGetUniformivARB");
    context.linkProgramARB = (PFNGLLINKPROGRAMARBPROC) load(userptr, "glLinkProgramARB");
    context.shaderSourceARB = (PFNGLSHADERSOURCEARBPROC) load(userptr, "glShaderSourceARB");
    context.uniform1fARB = (PFNGLUNIFORM1FARBPROC) load(userptr, "glUniform1fARB");
    context.uniform1fvARB = (PFNGLUNIFORM1FVARBPROC) load(userptr, "glUniform1fvARB");
    context.uniform1iARB = (PFNGLUNIFORM1IARBPROC) load(userptr, "glUniform1iARB");
    context.uniform1ivARB = (PFNGLUNIFORM1IVARBPROC) load(userptr, "glUniform1ivARB");
    context.uniform2fARB = (PFNGLUNIFORM2FARBPROC) load(userptr, "glUniform2fARB");
    context.uniform2fvARB = (PFNGLUNIFORM2FVARBPROC) load(userptr, "glUniform2fvARB");
    context.uniform2iARB = (PFNGLUNIFORM2IARBPROC) load(userptr, "glUniform2iARB");
    context.uniform2ivARB = (PFNGLUNIFORM2IVARBPROC) load(userptr, "glUniform2ivARB");
    context.uniform3fARB = (PFNGLUNIFORM3FARBPROC) load(userptr, "glUniform3fARB");
    context.uniform3fvARB = (PFNGLUNIFORM3FVARBPROC) load(userptr, "glUniform3fvARB");
    context.uniform3iARB = (PFNGLUNIFORM3IARBPROC) load(userptr, "glUniform3iARB");
    context.uniform3ivARB = (PFNGLUNIFORM3IVARBPROC) load(userptr, "glUniform3ivARB");
    context.uniform4fARB = (PFNGLUNIFORM4FARBPROC) load(userptr, "glUniform4fARB");
    context.uniform4fvARB = (PFNGLUNIFORM4FVARBPROC) load(userptr, "glUniform4fvARB");
    context.uniform4iARB = (PFNGLUNIFORM4IARBPROC) load(userptr, "glUniform4iARB");
    context.uniform4ivARB = (PFNGLUNIFORM4IVARBPROC) load(userptr, "glUniform4ivARB");
    context.uniformMatrix2fvARB = (PFNGLUNIFORMMATRIX2FVARBPROC) load(userptr, "glUniformMatrix2fvARB");
    context.uniformMatrix3fvARB = (PFNGLUNIFORMMATRIX3FVARBPROC) load(userptr, "glUniformMatrix3fvARB");
    context.uniformMatrix4fvARB = (PFNGLUNIFORMMATRIX4FVARBPROC) load(userptr, "glUniformMatrix4fvARB");
    context.useProgramObjectARB = (PFNGLUSEPROGRAMOBJECTARBPROC) load(userptr, "glUseProgramObjectARB");
    context.validateProgramARB = (PFNGLVALIDATEPROGRAMARBPROC) load(userptr, "glValidateProgramARB");
}
static void glad_gl_load_GL_ARB_sync(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_sync) return;
    context.clientWaitSync = (PFNGLCLIENTWAITSYNCPROC) load(userptr, "glClientWaitSync");
    context.deleteSync = (PFNGLDELETESYNCPROC) load(userptr, "glDeleteSync");
    context.fenceSync = (PFNGLFENCESYNCPROC) load(userptr, "glFenceSync");
    context.getInteger64v = (PFNGLGETINTEGER64VPROC) load(userptr, "glGetInteger64v");
    context.getSynciv = (PFNGLGETSYNCIVPROC) load(userptr, "glGetSynciv");
    context.isSync = (PFNGLISSYNCPROC) load(userptr, "glIsSync");
    context.waitSync = (PFNGLWAITSYNCPROC) load(userptr, "glWaitSync");
}
static void glad_gl_load_GL_ARB_texture_buffer_object(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_texture_buffer_object) return;
    context.texBufferARB = (PFNGLTEXBUFFERARBPROC) load(userptr, "glTexBufferARB");
}
static void glad_gl_load_GL_ARB_texture_compression(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_texture_compression) return;
    context.compressedTexImage1DARB = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) load(userptr, "glCompressedTexImage1DARB");
    context.compressedTexImage2DARB = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) load(userptr, "glCompressedTexImage2DARB");
    context.compressedTexImage3DARB = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) load(userptr, "glCompressedTexImage3DARB");
    context.compressedTexSubImage1DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) load(userptr, "glCompressedTexSubImage1DARB");
    context.compressedTexSubImage2DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) load(userptr, "glCompressedTexSubImage2DARB");
    context.compressedTexSubImage3DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) load(userptr, "glCompressedTexSubImage3DARB");
    context.getCompressedTexImageARB = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) load(userptr, "glGetCompressedTexImageARB");
}
static void glad_gl_load_GL_ARB_texture_multisample(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_texture_multisample) return;
    context.getMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC) load(userptr, "glGetMultisamplefv");
    context.sampleMaski = (PFNGLSAMPLEMASKIPROC) load(userptr, "glSampleMaski");
    context.texImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC) load(userptr, "glTexImage2DMultisample");
    context.texImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC) load(userptr, "glTexImage3DMultisample");
}
static void glad_gl_load_GL_ARB_uniform_buffer_object(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_uniform_buffer_object) return;
    context.bindBufferBase = (PFNGLBINDBUFFERBASEPROC) load(userptr, "glBindBufferBase");
    context.bindBufferRange = (PFNGLBINDBUFFERRANGEPROC) load(userptr, "glBindBufferRange");
    context.getActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) load(userptr, "glGetActiveUniformBlockName");
    context.getActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC) load(userptr, "glGetActiveUniformBlockiv");
    context.getActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC) load(userptr, "glGetActiveUniformName");
    context.getActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC) load(userptr, "glGetActiveUniformsiv");
    context.getIntegeri_v = (PFNGLGETINTEGERI_VPROC) load(userptr, "glGetIntegeri_v");
    context.getUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC) load(userptr, "glGetUniformBlockIndex");
    context.getUniformIndices = (PFNGLGETUNIFORMINDICESPROC) load(userptr, "glGetUniformIndices");
    context.uniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC) load(userptr, "glUniformBlockBinding");
}
static void glad_gl_load_GL_ARB_vertex_array_object(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_vertex_array_object) return;
    context.bindVertexArray = (PFNGLBINDVERTEXARRAYPROC) load(userptr, "glBindVertexArray");
    context.deleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC) load(userptr, "glDeleteVertexArrays");
    context.genVertexArrays = (PFNGLGENVERTEXARRAYSPROC) load(userptr, "glGenVertexArrays");
    context.isVertexArray = (PFNGLISVERTEXARRAYPROC) load(userptr, "glIsVertexArray");
}
static void glad_gl_load_GL_ARB_vertex_buffer_object(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_vertex_buffer_object) return;
    context.bindBufferARB = (PFNGLBINDBUFFERARBPROC) load(userptr, "glBindBufferARB");
    context.bufferDataARB = (PFNGLBUFFERDATAARBPROC) load(userptr, "glBufferDataARB");
    context.bufferSubDataARB = (PFNGLBUFFERSUBDATAARBPROC) load(userptr, "glBufferSubDataARB");
    context.deleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC) load(userptr, "glDeleteBuffersARB");
    context.genBuffersARB = (PFNGLGENBUFFERSARBPROC) load(userptr, "glGenBuffersARB");
    context.getBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC) load(userptr, "glGetBufferParameterivARB");
    context.getBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC) load(userptr, "glGetBufferPointervARB");
    context.getBufferSubDataARB = (PFNGLGETBUFFERSUBDATAARBPROC) load(userptr, "glGetBufferSubDataARB");
    context.isBufferARB = (PFNGLISBUFFERARBPROC) load(userptr, "glIsBufferARB");
    context.mapBufferARB = (PFNGLMAPBUFFERARBPROC) load(userptr, "glMapBufferARB");
    context.unmapBufferARB = (PFNGLUNMAPBUFFERARBPROC) load(userptr, "glUnmapBufferARB");
}
static void glad_gl_load_GL_ARB_vertex_program(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_vertex_program) return;
    context.bindProgramARB = (PFNGLBINDPROGRAMARBPROC) load(userptr, "glBindProgramARB");
    context.deleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC) load(userptr, "glDeleteProgramsARB");
    context.disableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) load(userptr, "glDisableVertexAttribArrayARB");
    context.enableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC) load(userptr, "glEnableVertexAttribArrayARB");
    context.genProgramsARB = (PFNGLGENPROGRAMSARBPROC) load(userptr, "glGenProgramsARB");
    context.getProgramEnvParameterdvARB = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC) load(userptr, "glGetProgramEnvParameterdvARB");
    context.getProgramEnvParameterfvARB = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC) load(userptr, "glGetProgramEnvParameterfvARB");
    context.getProgramLocalParameterdvARB = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) load(userptr, "glGetProgramLocalParameterdvARB");
    context.getProgramLocalParameterfvARB = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) load(userptr, "glGetProgramLocalParameterfvARB");
    context.getProgramStringARB = (PFNGLGETPROGRAMSTRINGARBPROC) load(userptr, "glGetProgramStringARB");
    context.getProgramivARB = (PFNGLGETPROGRAMIVARBPROC) load(userptr, "glGetProgramivARB");
    context.getVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC) load(userptr, "glGetVertexAttribPointervARB");
    context.getVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC) load(userptr, "glGetVertexAttribdvARB");
    context.getVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC) load(userptr, "glGetVertexAttribfvARB");
    context.getVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC) load(userptr, "glGetVertexAttribivARB");
    context.isProgramARB = (PFNGLISPROGRAMARBPROC) load(userptr, "glIsProgramARB");
    context.programEnvParameter4dARB = (PFNGLPROGRAMENVPARAMETER4DARBPROC) load(userptr, "glProgramEnvParameter4dARB");
    context.programEnvParameter4dvARB = (PFNGLPROGRAMENVPARAMETER4DVARBPROC) load(userptr, "glProgramEnvParameter4dvARB");
    context.programEnvParameter4fARB = (PFNGLPROGRAMENVPARAMETER4FARBPROC) load(userptr, "glProgramEnvParameter4fARB");
    context.programEnvParameter4fvARB = (PFNGLPROGRAMENVPARAMETER4FVARBPROC) load(userptr, "glProgramEnvParameter4fvARB");
    context.programLocalParameter4dARB = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC) load(userptr, "glProgramLocalParameter4dARB");
    context.programLocalParameter4dvARB = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) load(userptr, "glProgramLocalParameter4dvARB");
    context.programLocalParameter4fARB = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC) load(userptr, "glProgramLocalParameter4fARB");
    context.programLocalParameter4fvARB = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) load(userptr, "glProgramLocalParameter4fvARB");
    context.programStringARB = (PFNGLPROGRAMSTRINGARBPROC) load(userptr, "glProgramStringARB");
    context.vertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC) load(userptr, "glVertexAttrib1dARB");
    context.vertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC) load(userptr, "glVertexAttrib1dvARB");
    context.vertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC) load(userptr, "glVertexAttrib1fARB");
    context.vertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC) load(userptr, "glVertexAttrib1fvARB");
    context.vertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC) load(userptr, "glVertexAttrib1sARB");
    context.vertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC) load(userptr, "glVertexAttrib1svARB");
    context.vertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC) load(userptr, "glVertexAttrib2dARB");
    context.vertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC) load(userptr, "glVertexAttrib2dvARB");
    context.vertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC) load(userptr, "glVertexAttrib2fARB");
    context.vertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC) load(userptr, "glVertexAttrib2fvARB");
    context.vertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC) load(userptr, "glVertexAttrib2sARB");
    context.vertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC) load(userptr, "glVertexAttrib2svARB");
    context.vertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC) load(userptr, "glVertexAttrib3dARB");
    context.vertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC) load(userptr, "glVertexAttrib3dvARB");
    context.vertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC) load(userptr, "glVertexAttrib3fARB");
    context.vertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC) load(userptr, "glVertexAttrib3fvARB");
    context.vertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC) load(userptr, "glVertexAttrib3sARB");
    context.vertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC) load(userptr, "glVertexAttrib3svARB");
    context.vertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC) load(userptr, "glVertexAttrib4NbvARB");
    context.vertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC) load(userptr, "glVertexAttrib4NivARB");
    context.vertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC) load(userptr, "glVertexAttrib4NsvARB");
    context.vertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC) load(userptr, "glVertexAttrib4NubARB");
    context.vertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC) load(userptr, "glVertexAttrib4NubvARB");
    context.vertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC) load(userptr, "glVertexAttrib4NuivARB");
    context.vertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC) load(userptr, "glVertexAttrib4NusvARB");
    context.vertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC) load(userptr, "glVertexAttrib4bvARB");
    context.vertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC) load(userptr, "glVertexAttrib4dARB");
    context.vertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC) load(userptr, "glVertexAttrib4dvARB");
    context.vertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC) load(userptr, "glVertexAttrib4fARB");
    context.vertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC) load(userptr, "glVertexAttrib4fvARB");
    context.vertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC) load(userptr, "glVertexAttrib4ivARB");
    context.vertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC) load(userptr, "glVertexAttrib4sARB");
    context.vertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC) load(userptr, "glVertexAttrib4svARB");
    context.vertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC) load(userptr, "glVertexAttrib4ubvARB");
    context.vertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC) load(userptr, "glVertexAttrib4uivARB");
    context.vertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC) load(userptr, "glVertexAttrib4usvARB");
    context.vertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC) load(userptr, "glVertexAttribPointerARB");
}
static void glad_gl_load_GL_ARB_vertex_shader(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ARB_vertex_shader) return;
    context.bindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC) load(userptr, "glBindAttribLocationARB");
    context.disableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) load(userptr, "glDisableVertexAttribArrayARB");
    context.enableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC) load(userptr, "glEnableVertexAttribArrayARB");
    context.getActiveAttribARB = (PFNGLGETACTIVEATTRIBARBPROC) load(userptr, "glGetActiveAttribARB");
    context.getAttribLocationARB = (PFNGLGETATTRIBLOCATIONARBPROC) load(userptr, "glGetAttribLocationARB");
    context.getVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC) load(userptr, "glGetVertexAttribPointervARB");
    context.getVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC) load(userptr, "glGetVertexAttribdvARB");
    context.getVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC) load(userptr, "glGetVertexAttribfvARB");
    context.getVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC) load(userptr, "glGetVertexAttribivARB");
    context.vertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC) load(userptr, "glVertexAttrib1dARB");
    context.vertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC) load(userptr, "glVertexAttrib1dvARB");
    context.vertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC) load(userptr, "glVertexAttrib1fARB");
    context.vertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC) load(userptr, "glVertexAttrib1fvARB");
    context.vertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC) load(userptr, "glVertexAttrib1sARB");
    context.vertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC) load(userptr, "glVertexAttrib1svARB");
    context.vertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC) load(userptr, "glVertexAttrib2dARB");
    context.vertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC) load(userptr, "glVertexAttrib2dvARB");
    context.vertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC) load(userptr, "glVertexAttrib2fARB");
    context.vertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC) load(userptr, "glVertexAttrib2fvARB");
    context.vertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC) load(userptr, "glVertexAttrib2sARB");
    context.vertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC) load(userptr, "glVertexAttrib2svARB");
    context.vertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC) load(userptr, "glVertexAttrib3dARB");
    context.vertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC) load(userptr, "glVertexAttrib3dvARB");
    context.vertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC) load(userptr, "glVertexAttrib3fARB");
    context.vertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC) load(userptr, "glVertexAttrib3fvARB");
    context.vertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC) load(userptr, "glVertexAttrib3sARB");
    context.vertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC) load(userptr, "glVertexAttrib3svARB");
    context.vertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC) load(userptr, "glVertexAttrib4NbvARB");
    context.vertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC) load(userptr, "glVertexAttrib4NivARB");
    context.vertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC) load(userptr, "glVertexAttrib4NsvARB");
    context.vertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC) load(userptr, "glVertexAttrib4NubARB");
    context.vertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC) load(userptr, "glVertexAttrib4NubvARB");
    context.vertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC) load(userptr, "glVertexAttrib4NuivARB");
    context.vertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC) load(userptr, "glVertexAttrib4NusvARB");
    context.vertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC) load(userptr, "glVertexAttrib4bvARB");
    context.vertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC) load(userptr, "glVertexAttrib4dARB");
    context.vertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC) load(userptr, "glVertexAttrib4dvARB");
    context.vertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC) load(userptr, "glVertexAttrib4fARB");
    context.vertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC) load(userptr, "glVertexAttrib4fvARB");
    context.vertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC) load(userptr, "glVertexAttrib4ivARB");
    context.vertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC) load(userptr, "glVertexAttrib4sARB");
    context.vertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC) load(userptr, "glVertexAttrib4svARB");
    context.vertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC) load(userptr, "glVertexAttrib4ubvARB");
    context.vertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC) load(userptr, "glVertexAttrib4uivARB");
    context.vertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC) load(userptr, "glVertexAttrib4usvARB");
    context.vertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC) load(userptr, "glVertexAttribPointerARB");
}
static void glad_gl_load_GL_ATI_draw_buffers(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ATI_draw_buffers) return;
    context.drawBuffersATI = (PFNGLDRAWBUFFERSATIPROC) load(userptr, "glDrawBuffersATI");
}
static void glad_gl_load_GL_ATI_separate_stencil(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ATI_separate_stencil) return;
    context.stencilFuncSeparateATI = (PFNGLSTENCILFUNCSEPARATEATIPROC) load(userptr, "glStencilFuncSeparateATI");
    context.stencilOpSeparateATI = (PFNGLSTENCILOPSEPARATEATIPROC) load(userptr, "glStencilOpSeparateATI");
}
static void glad_gl_load_GL_EXT_blend_color(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_blend_color) return;
    context.blendColorEXT = (PFNGLBLENDCOLOREXTPROC) load(userptr, "glBlendColorEXT");
}
static void glad_gl_load_GL_EXT_blend_equation_separate(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_blend_equation_separate) return;
    context.blendEquationSeparateEXT = (PFNGLBLENDEQUATIONSEPARATEEXTPROC) load(userptr, "glBlendEquationSeparateEXT");
}
static void glad_gl_load_GL_EXT_blend_func_separate(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_blend_func_separate) return;
    context.blendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC) load(userptr, "glBlendFuncSeparateEXT");
}
static void glad_gl_load_GL_EXT_blend_minmax(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_blend_minmax) return;
    context.blendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC) load(userptr, "glBlendEquationEXT");
}
static void glad_gl_load_GL_EXT_copy_texture(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_copy_texture) return;
    context.copyTexImage1DEXT = (PFNGLCOPYTEXIMAGE1DEXTPROC) load(userptr, "glCopyTexImage1DEXT");
    context.copyTexImage2DEXT = (PFNGLCOPYTEXIMAGE2DEXTPROC) load(userptr, "glCopyTexImage2DEXT");
    context.copyTexSubImage1DEXT = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC) load(userptr, "glCopyTexSubImage1DEXT");
    context.copyTexSubImage2DEXT = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC) load(userptr, "glCopyTexSubImage2DEXT");
    context.copyTexSubImage3DEXT = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC) load(userptr, "glCopyTexSubImage3DEXT");
}
static void glad_gl_load_GL_EXT_direct_state_access(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_direct_state_access) return;
    context.bindMultiTextureEXT = (PFNGLBINDMULTITEXTUREEXTPROC) load(userptr, "glBindMultiTextureEXT");
    context.checkNamedFramebufferStatusEXT = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) load(userptr, "glCheckNamedFramebufferStatusEXT");
    context.clearNamedBufferDataEXT = (PFNGLCLEARNAMEDBUFFERDATAEXTPROC) load(userptr, "glClearNamedBufferDataEXT");
    context.clearNamedBufferSubDataEXT = (PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) load(userptr, "glClearNamedBufferSubDataEXT");
    context.clientAttribDefaultEXT = (PFNGLCLIENTATTRIBDEFAULTEXTPROC) load(userptr, "glClientAttribDefaultEXT");
    context.compressedMultiTexImage1DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) load(userptr, "glCompressedMultiTexImage1DEXT");
    context.compressedMultiTexImage2DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) load(userptr, "glCompressedMultiTexImage2DEXT");
    context.compressedMultiTexImage3DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) load(userptr, "glCompressedMultiTexImage3DEXT");
    context.compressedMultiTexSubImage1DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) load(userptr, "glCompressedMultiTexSubImage1DEXT");
    context.compressedMultiTexSubImage2DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) load(userptr, "glCompressedMultiTexSubImage2DEXT");
    context.compressedMultiTexSubImage3DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) load(userptr, "glCompressedMultiTexSubImage3DEXT");
    context.compressedTextureImage1DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) load(userptr, "glCompressedTextureImage1DEXT");
    context.compressedTextureImage2DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) load(userptr, "glCompressedTextureImage2DEXT");
    context.compressedTextureImage3DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) load(userptr, "glCompressedTextureImage3DEXT");
    context.compressedTextureSubImage1DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) load(userptr, "glCompressedTextureSubImage1DEXT");
    context.compressedTextureSubImage2DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) load(userptr, "glCompressedTextureSubImage2DEXT");
    context.compressedTextureSubImage3DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) load(userptr, "glCompressedTextureSubImage3DEXT");
    context.copyMultiTexImage1DEXT = (PFNGLCOPYMULTITEXIMAGE1DEXTPROC) load(userptr, "glCopyMultiTexImage1DEXT");
    context.copyMultiTexImage2DEXT = (PFNGLCOPYMULTITEXIMAGE2DEXTPROC) load(userptr, "glCopyMultiTexImage2DEXT");
    context.copyMultiTexSubImage1DEXT = (PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) load(userptr, "glCopyMultiTexSubImage1DEXT");
    context.copyMultiTexSubImage2DEXT = (PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) load(userptr, "glCopyMultiTexSubImage2DEXT");
    context.copyMultiTexSubImage3DEXT = (PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) load(userptr, "glCopyMultiTexSubImage3DEXT");
    context.copyTextureImage1DEXT = (PFNGLCOPYTEXTUREIMAGE1DEXTPROC) load(userptr, "glCopyTextureImage1DEXT");
    context.copyTextureImage2DEXT = (PFNGLCOPYTEXTUREIMAGE2DEXTPROC) load(userptr, "glCopyTextureImage2DEXT");
    context.copyTextureSubImage1DEXT = (PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) load(userptr, "glCopyTextureSubImage1DEXT");
    context.copyTextureSubImage2DEXT = (PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) load(userptr, "glCopyTextureSubImage2DEXT");
    context.copyTextureSubImage3DEXT = (PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) load(userptr, "glCopyTextureSubImage3DEXT");
    context.disableClientStateIndexedEXT = (PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) load(userptr, "glDisableClientStateIndexedEXT");
    context.disableClientStateiEXT = (PFNGLDISABLECLIENTSTATEIEXTPROC) load(userptr, "glDisableClientStateiEXT");
    context.disableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC) load(userptr, "glDisableIndexedEXT");
    context.disableVertexArrayAttribEXT = (PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC) load(userptr, "glDisableVertexArrayAttribEXT");
    context.disableVertexArrayEXT = (PFNGLDISABLEVERTEXARRAYEXTPROC) load(userptr, "glDisableVertexArrayEXT");
    context.enableClientStateIndexedEXT = (PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) load(userptr, "glEnableClientStateIndexedEXT");
    context.enableClientStateiEXT = (PFNGLENABLECLIENTSTATEIEXTPROC) load(userptr, "glEnableClientStateiEXT");
    context.enableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC) load(userptr, "glEnableIndexedEXT");
    context.enableVertexArrayAttribEXT = (PFNGLENABLEVERTEXARRAYATTRIBEXTPROC) load(userptr, "glEnableVertexArrayAttribEXT");
    context.enableVertexArrayEXT = (PFNGLENABLEVERTEXARRAYEXTPROC) load(userptr, "glEnableVertexArrayEXT");
    context.flushMappedNamedBufferRangeEXT = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) load(userptr, "glFlushMappedNamedBufferRangeEXT");
    context.framebufferDrawBufferEXT = (PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) load(userptr, "glFramebufferDrawBufferEXT");
    context.framebufferDrawBuffersEXT = (PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) load(userptr, "glFramebufferDrawBuffersEXT");
    context.framebufferReadBufferEXT = (PFNGLFRAMEBUFFERREADBUFFEREXTPROC) load(userptr, "glFramebufferReadBufferEXT");
    context.generateMultiTexMipmapEXT = (PFNGLGENERATEMULTITEXMIPMAPEXTPROC) load(userptr, "glGenerateMultiTexMipmapEXT");
    context.generateTextureMipmapEXT = (PFNGLGENERATETEXTUREMIPMAPEXTPROC) load(userptr, "glGenerateTextureMipmapEXT");
    context.getBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC) load(userptr, "glGetBooleanIndexedvEXT");
    context.getCompressedMultiTexImageEXT = (PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) load(userptr, "glGetCompressedMultiTexImageEXT");
    context.getCompressedTextureImageEXT = (PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) load(userptr, "glGetCompressedTextureImageEXT");
    context.getDoubleIndexedvEXT = (PFNGLGETDOUBLEINDEXEDVEXTPROC) load(userptr, "glGetDoubleIndexedvEXT");
    context.getDoublei_vEXT = (PFNGLGETDOUBLEI_VEXTPROC) load(userptr, "glGetDoublei_vEXT");
    context.getFloatIndexedvEXT = (PFNGLGETFLOATINDEXEDVEXTPROC) load(userptr, "glGetFloatIndexedvEXT");
    context.getFloati_vEXT = (PFNGLGETFLOATI_VEXTPROC) load(userptr, "glGetFloati_vEXT");
    context.getFramebufferParameterivEXT = (PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) load(userptr, "glGetFramebufferParameterivEXT");
    context.getIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC) load(userptr, "glGetIntegerIndexedvEXT");
    context.getMultiTexEnvfvEXT = (PFNGLGETMULTITEXENVFVEXTPROC) load(userptr, "glGetMultiTexEnvfvEXT");
    context.getMultiTexEnvivEXT = (PFNGLGETMULTITEXENVIVEXTPROC) load(userptr, "glGetMultiTexEnvivEXT");
    context.getMultiTexGendvEXT = (PFNGLGETMULTITEXGENDVEXTPROC) load(userptr, "glGetMultiTexGendvEXT");
    context.getMultiTexGenfvEXT = (PFNGLGETMULTITEXGENFVEXTPROC) load(userptr, "glGetMultiTexGenfvEXT");
    context.getMultiTexGenivEXT = (PFNGLGETMULTITEXGENIVEXTPROC) load(userptr, "glGetMultiTexGenivEXT");
    context.getMultiTexImageEXT = (PFNGLGETMULTITEXIMAGEEXTPROC) load(userptr, "glGetMultiTexImageEXT");
    context.getMultiTexLevelParameterfvEXT = (PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) load(userptr, "glGetMultiTexLevelParameterfvEXT");
    context.getMultiTexLevelParameterivEXT = (PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) load(userptr, "glGetMultiTexLevelParameterivEXT");
    context.getMultiTexParameterIivEXT = (PFNGLGETMULTITEXPARAMETERIIVEXTPROC) load(userptr, "glGetMultiTexParameterIivEXT");
    context.getMultiTexParameterIuivEXT = (PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) load(userptr, "glGetMultiTexParameterIuivEXT");
    context.getMultiTexParameterfvEXT = (PFNGLGETMULTITEXPARAMETERFVEXTPROC) load(userptr, "glGetMultiTexParameterfvEXT");
    context.getMultiTexParameterivEXT = (PFNGLGETMULTITEXPARAMETERIVEXTPROC) load(userptr, "glGetMultiTexParameterivEXT");
    context.getNamedBufferParameterivEXT = (PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) load(userptr, "glGetNamedBufferParameterivEXT");
    context.getNamedBufferPointervEXT = (PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) load(userptr, "glGetNamedBufferPointervEXT");
    context.getNamedBufferSubDataEXT = (PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) load(userptr, "glGetNamedBufferSubDataEXT");
    context.getNamedFramebufferAttachmentParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) load(userptr, "glGetNamedFramebufferAttachmentParameterivEXT");
    context.getNamedFramebufferParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) load(userptr, "glGetNamedFramebufferParameterivEXT");
    context.getNamedProgramLocalParameterIivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) load(userptr, "glGetNamedProgramLocalParameterIivEXT");
    context.getNamedProgramLocalParameterIuivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) load(userptr, "glGetNamedProgramLocalParameterIuivEXT");
    context.getNamedProgramLocalParameterdvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) load(userptr, "glGetNamedProgramLocalParameterdvEXT");
    context.getNamedProgramLocalParameterfvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) load(userptr, "glGetNamedProgramLocalParameterfvEXT");
    context.getNamedProgramStringEXT = (PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) load(userptr, "glGetNamedProgramStringEXT");
    context.getNamedProgramivEXT = (PFNGLGETNAMEDPROGRAMIVEXTPROC) load(userptr, "glGetNamedProgramivEXT");
    context.getNamedRenderbufferParameterivEXT = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) load(userptr, "glGetNamedRenderbufferParameterivEXT");
    context.getPointerIndexedvEXT = (PFNGLGETPOINTERINDEXEDVEXTPROC) load(userptr, "glGetPointerIndexedvEXT");
    context.getPointeri_vEXT = (PFNGLGETPOINTERI_VEXTPROC) load(userptr, "glGetPointeri_vEXT");
    context.getTextureImageEXT = (PFNGLGETTEXTUREIMAGEEXTPROC) load(userptr, "glGetTextureImageEXT");
    context.getTextureLevelParameterfvEXT = (PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) load(userptr, "glGetTextureLevelParameterfvEXT");
    context.getTextureLevelParameterivEXT = (PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) load(userptr, "glGetTextureLevelParameterivEXT");
    context.getTextureParameterIivEXT = (PFNGLGETTEXTUREPARAMETERIIVEXTPROC) load(userptr, "glGetTextureParameterIivEXT");
    context.getTextureParameterIuivEXT = (PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) load(userptr, "glGetTextureParameterIuivEXT");
    context.getTextureParameterfvEXT = (PFNGLGETTEXTUREPARAMETERFVEXTPROC) load(userptr, "glGetTextureParameterfvEXT");
    context.getTextureParameterivEXT = (PFNGLGETTEXTUREPARAMETERIVEXTPROC) load(userptr, "glGetTextureParameterivEXT");
    context.getVertexArrayIntegeri_vEXT = (PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) load(userptr, "glGetVertexArrayIntegeri_vEXT");
    context.getVertexArrayIntegervEXT = (PFNGLGETVERTEXARRAYINTEGERVEXTPROC) load(userptr, "glGetVertexArrayIntegervEXT");
    context.getVertexArrayPointeri_vEXT = (PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) load(userptr, "glGetVertexArrayPointeri_vEXT");
    context.getVertexArrayPointervEXT = (PFNGLGETVERTEXARRAYPOINTERVEXTPROC) load(userptr, "glGetVertexArrayPointervEXT");
    context.isEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC) load(userptr, "glIsEnabledIndexedEXT");
    context.mapNamedBufferEXT = (PFNGLMAPNAMEDBUFFEREXTPROC) load(userptr, "glMapNamedBufferEXT");
    context.mapNamedBufferRangeEXT = (PFNGLMAPNAMEDBUFFERRANGEEXTPROC) load(userptr, "glMapNamedBufferRangeEXT");
    context.matrixFrustumEXT = (PFNGLMATRIXFRUSTUMEXTPROC) load(userptr, "glMatrixFrustumEXT");
    context.matrixLoadIdentityEXT = (PFNGLMATRIXLOADIDENTITYEXTPROC) load(userptr, "glMatrixLoadIdentityEXT");
    context.matrixLoadTransposedEXT = (PFNGLMATRIXLOADTRANSPOSEDEXTPROC) load(userptr, "glMatrixLoadTransposedEXT");
    context.matrixLoadTransposefEXT = (PFNGLMATRIXLOADTRANSPOSEFEXTPROC) load(userptr, "glMatrixLoadTransposefEXT");
    context.matrixLoaddEXT = (PFNGLMATRIXLOADDEXTPROC) load(userptr, "glMatrixLoaddEXT");
    context.matrixLoadfEXT = (PFNGLMATRIXLOADFEXTPROC) load(userptr, "glMatrixLoadfEXT");
    context.matrixMultTransposedEXT = (PFNGLMATRIXMULTTRANSPOSEDEXTPROC) load(userptr, "glMatrixMultTransposedEXT");
    context.matrixMultTransposefEXT = (PFNGLMATRIXMULTTRANSPOSEFEXTPROC) load(userptr, "glMatrixMultTransposefEXT");
    context.matrixMultdEXT = (PFNGLMATRIXMULTDEXTPROC) load(userptr, "glMatrixMultdEXT");
    context.matrixMultfEXT = (PFNGLMATRIXMULTFEXTPROC) load(userptr, "glMatrixMultfEXT");
    context.matrixOrthoEXT = (PFNGLMATRIXORTHOEXTPROC) load(userptr, "glMatrixOrthoEXT");
    context.matrixPopEXT = (PFNGLMATRIXPOPEXTPROC) load(userptr, "glMatrixPopEXT");
    context.matrixPushEXT = (PFNGLMATRIXPUSHEXTPROC) load(userptr, "glMatrixPushEXT");
    context.matrixRotatedEXT = (PFNGLMATRIXROTATEDEXTPROC) load(userptr, "glMatrixRotatedEXT");
    context.matrixRotatefEXT = (PFNGLMATRIXROTATEFEXTPROC) load(userptr, "glMatrixRotatefEXT");
    context.matrixScaledEXT = (PFNGLMATRIXSCALEDEXTPROC) load(userptr, "glMatrixScaledEXT");
    context.matrixScalefEXT = (PFNGLMATRIXSCALEFEXTPROC) load(userptr, "glMatrixScalefEXT");
    context.matrixTranslatedEXT = (PFNGLMATRIXTRANSLATEDEXTPROC) load(userptr, "glMatrixTranslatedEXT");
    context.matrixTranslatefEXT = (PFNGLMATRIXTRANSLATEFEXTPROC) load(userptr, "glMatrixTranslatefEXT");
    context.multiTexBufferEXT = (PFNGLMULTITEXBUFFEREXTPROC) load(userptr, "glMultiTexBufferEXT");
    context.multiTexCoordPointerEXT = (PFNGLMULTITEXCOORDPOINTEREXTPROC) load(userptr, "glMultiTexCoordPointerEXT");
    context.multiTexEnvfEXT = (PFNGLMULTITEXENVFEXTPROC) load(userptr, "glMultiTexEnvfEXT");
    context.multiTexEnvfvEXT = (PFNGLMULTITEXENVFVEXTPROC) load(userptr, "glMultiTexEnvfvEXT");
    context.multiTexEnviEXT = (PFNGLMULTITEXENVIEXTPROC) load(userptr, "glMultiTexEnviEXT");
    context.multiTexEnvivEXT = (PFNGLMULTITEXENVIVEXTPROC) load(userptr, "glMultiTexEnvivEXT");
    context.multiTexGendEXT = (PFNGLMULTITEXGENDEXTPROC) load(userptr, "glMultiTexGendEXT");
    context.multiTexGendvEXT = (PFNGLMULTITEXGENDVEXTPROC) load(userptr, "glMultiTexGendvEXT");
    context.multiTexGenfEXT = (PFNGLMULTITEXGENFEXTPROC) load(userptr, "glMultiTexGenfEXT");
    context.multiTexGenfvEXT = (PFNGLMULTITEXGENFVEXTPROC) load(userptr, "glMultiTexGenfvEXT");
    context.multiTexGeniEXT = (PFNGLMULTITEXGENIEXTPROC) load(userptr, "glMultiTexGeniEXT");
    context.multiTexGenivEXT = (PFNGLMULTITEXGENIVEXTPROC) load(userptr, "glMultiTexGenivEXT");
    context.multiTexImage1DEXT = (PFNGLMULTITEXIMAGE1DEXTPROC) load(userptr, "glMultiTexImage1DEXT");
    context.multiTexImage2DEXT = (PFNGLMULTITEXIMAGE2DEXTPROC) load(userptr, "glMultiTexImage2DEXT");
    context.multiTexImage3DEXT = (PFNGLMULTITEXIMAGE3DEXTPROC) load(userptr, "glMultiTexImage3DEXT");
    context.multiTexParameterIivEXT = (PFNGLMULTITEXPARAMETERIIVEXTPROC) load(userptr, "glMultiTexParameterIivEXT");
    context.multiTexParameterIuivEXT = (PFNGLMULTITEXPARAMETERIUIVEXTPROC) load(userptr, "glMultiTexParameterIuivEXT");
    context.multiTexParameterfEXT = (PFNGLMULTITEXPARAMETERFEXTPROC) load(userptr, "glMultiTexParameterfEXT");
    context.multiTexParameterfvEXT = (PFNGLMULTITEXPARAMETERFVEXTPROC) load(userptr, "glMultiTexParameterfvEXT");
    context.multiTexParameteriEXT = (PFNGLMULTITEXPARAMETERIEXTPROC) load(userptr, "glMultiTexParameteriEXT");
    context.multiTexParameterivEXT = (PFNGLMULTITEXPARAMETERIVEXTPROC) load(userptr, "glMultiTexParameterivEXT");
    context.multiTexRenderbufferEXT = (PFNGLMULTITEXRENDERBUFFEREXTPROC) load(userptr, "glMultiTexRenderbufferEXT");
    context.multiTexSubImage1DEXT = (PFNGLMULTITEXSUBIMAGE1DEXTPROC) load(userptr, "glMultiTexSubImage1DEXT");
    context.multiTexSubImage2DEXT = (PFNGLMULTITEXSUBIMAGE2DEXTPROC) load(userptr, "glMultiTexSubImage2DEXT");
    context.multiTexSubImage3DEXT = (PFNGLMULTITEXSUBIMAGE3DEXTPROC) load(userptr, "glMultiTexSubImage3DEXT");
    context.namedBufferDataEXT = (PFNGLNAMEDBUFFERDATAEXTPROC) load(userptr, "glNamedBufferDataEXT");
    context.namedBufferStorageEXT = (PFNGLNAMEDBUFFERSTORAGEEXTPROC) load(userptr, "glNamedBufferStorageEXT");
    context.namedBufferSubDataEXT = (PFNGLNAMEDBUFFERSUBDATAEXTPROC) load(userptr, "glNamedBufferSubDataEXT");
    context.namedCopyBufferSubDataEXT = (PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) load(userptr, "glNamedCopyBufferSubDataEXT");
    context.namedFramebufferParameteriEXT = (PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) load(userptr, "glNamedFramebufferParameteriEXT");
    context.namedFramebufferRenderbufferEXT = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) load(userptr, "glNamedFramebufferRenderbufferEXT");
    context.namedFramebufferTexture1DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) load(userptr, "glNamedFramebufferTexture1DEXT");
    context.namedFramebufferTexture2DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) load(userptr, "glNamedFramebufferTexture2DEXT");
    context.namedFramebufferTexture3DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) load(userptr, "glNamedFramebufferTexture3DEXT");
    context.namedFramebufferTextureEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) load(userptr, "glNamedFramebufferTextureEXT");
    context.namedFramebufferTextureFaceEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) load(userptr, "glNamedFramebufferTextureFaceEXT");
    context.namedFramebufferTextureLayerEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) load(userptr, "glNamedFramebufferTextureLayerEXT");
    context.namedProgramLocalParameter4dEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) load(userptr, "glNamedProgramLocalParameter4dEXT");
    context.namedProgramLocalParameter4dvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) load(userptr, "glNamedProgramLocalParameter4dvEXT");
    context.namedProgramLocalParameter4fEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) load(userptr, "glNamedProgramLocalParameter4fEXT");
    context.namedProgramLocalParameter4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) load(userptr, "glNamedProgramLocalParameter4fvEXT");
    context.namedProgramLocalParameterI4iEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) load(userptr, "glNamedProgramLocalParameterI4iEXT");
    context.namedProgramLocalParameterI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) load(userptr, "glNamedProgramLocalParameterI4ivEXT");
    context.namedProgramLocalParameterI4uiEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) load(userptr, "glNamedProgramLocalParameterI4uiEXT");
    context.namedProgramLocalParameterI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) load(userptr, "glNamedProgramLocalParameterI4uivEXT");
    context.namedProgramLocalParameters4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) load(userptr, "glNamedProgramLocalParameters4fvEXT");
    context.namedProgramLocalParametersI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) load(userptr, "glNamedProgramLocalParametersI4ivEXT");
    context.namedProgramLocalParametersI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) load(userptr, "glNamedProgramLocalParametersI4uivEXT");
    context.namedProgramStringEXT = (PFNGLNAMEDPROGRAMSTRINGEXTPROC) load(userptr, "glNamedProgramStringEXT");
    context.namedRenderbufferStorageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) load(userptr, "glNamedRenderbufferStorageEXT");
    context.namedRenderbufferStorageMultisampleCoverageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) load(userptr, "glNamedRenderbufferStorageMultisampleCoverageEXT");
    context.namedRenderbufferStorageMultisampleEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) load(userptr, "glNamedRenderbufferStorageMultisampleEXT");
    context.programUniform1dEXT = (PFNGLPROGRAMUNIFORM1DEXTPROC) load(userptr, "glProgramUniform1dEXT");
    context.programUniform1dvEXT = (PFNGLPROGRAMUNIFORM1DVEXTPROC) load(userptr, "glProgramUniform1dvEXT");
    context.programUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC) load(userptr, "glProgramUniform1fEXT");
    context.programUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC) load(userptr, "glProgramUniform1fvEXT");
    context.programUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC) load(userptr, "glProgramUniform1iEXT");
    context.programUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC) load(userptr, "glProgramUniform1ivEXT");
    context.programUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC) load(userptr, "glProgramUniform1uiEXT");
    context.programUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC) load(userptr, "glProgramUniform1uivEXT");
    context.programUniform2dEXT = (PFNGLPROGRAMUNIFORM2DEXTPROC) load(userptr, "glProgramUniform2dEXT");
    context.programUniform2dvEXT = (PFNGLPROGRAMUNIFORM2DVEXTPROC) load(userptr, "glProgramUniform2dvEXT");
    context.programUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC) load(userptr, "glProgramUniform2fEXT");
    context.programUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC) load(userptr, "glProgramUniform2fvEXT");
    context.programUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC) load(userptr, "glProgramUniform2iEXT");
    context.programUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC) load(userptr, "glProgramUniform2ivEXT");
    context.programUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC) load(userptr, "glProgramUniform2uiEXT");
    context.programUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC) load(userptr, "glProgramUniform2uivEXT");
    context.programUniform3dEXT = (PFNGLPROGRAMUNIFORM3DEXTPROC) load(userptr, "glProgramUniform3dEXT");
    context.programUniform3dvEXT = (PFNGLPROGRAMUNIFORM3DVEXTPROC) load(userptr, "glProgramUniform3dvEXT");
    context.programUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC) load(userptr, "glProgramUniform3fEXT");
    context.programUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC) load(userptr, "glProgramUniform3fvEXT");
    context.programUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC) load(userptr, "glProgramUniform3iEXT");
    context.programUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC) load(userptr, "glProgramUniform3ivEXT");
    context.programUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC) load(userptr, "glProgramUniform3uiEXT");
    context.programUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC) load(userptr, "glProgramUniform3uivEXT");
    context.programUniform4dEXT = (PFNGLPROGRAMUNIFORM4DEXTPROC) load(userptr, "glProgramUniform4dEXT");
    context.programUniform4dvEXT = (PFNGLPROGRAMUNIFORM4DVEXTPROC) load(userptr, "glProgramUniform4dvEXT");
    context.programUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC) load(userptr, "glProgramUniform4fEXT");
    context.programUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC) load(userptr, "glProgramUniform4fvEXT");
    context.programUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC) load(userptr, "glProgramUniform4iEXT");
    context.programUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC) load(userptr, "glProgramUniform4ivEXT");
    context.programUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC) load(userptr, "glProgramUniform4uiEXT");
    context.programUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC) load(userptr, "glProgramUniform4uivEXT");
    context.programUniformMatrix2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC) load(userptr, "glProgramUniformMatrix2dvEXT");
    context.programUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) load(userptr, "glProgramUniformMatrix2fvEXT");
    context.programUniformMatrix2x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC) load(userptr, "glProgramUniformMatrix2x3dvEXT");
    context.programUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) load(userptr, "glProgramUniformMatrix2x3fvEXT");
    context.programUniformMatrix2x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC) load(userptr, "glProgramUniformMatrix2x4dvEXT");
    context.programUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) load(userptr, "glProgramUniformMatrix2x4fvEXT");
    context.programUniformMatrix3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC) load(userptr, "glProgramUniformMatrix3dvEXT");
    context.programUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) load(userptr, "glProgramUniformMatrix3fvEXT");
    context.programUniformMatrix3x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC) load(userptr, "glProgramUniformMatrix3x2dvEXT");
    context.programUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) load(userptr, "glProgramUniformMatrix3x2fvEXT");
    context.programUniformMatrix3x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC) load(userptr, "glProgramUniformMatrix3x4dvEXT");
    context.programUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) load(userptr, "glProgramUniformMatrix3x4fvEXT");
    context.programUniformMatrix4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC) load(userptr, "glProgramUniformMatrix4dvEXT");
    context.programUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) load(userptr, "glProgramUniformMatrix4fvEXT");
    context.programUniformMatrix4x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC) load(userptr, "glProgramUniformMatrix4x2dvEXT");
    context.programUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) load(userptr, "glProgramUniformMatrix4x2fvEXT");
    context.programUniformMatrix4x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC) load(userptr, "glProgramUniformMatrix4x3dvEXT");
    context.programUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) load(userptr, "glProgramUniformMatrix4x3fvEXT");
    context.pushClientAttribDefaultEXT = (PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) load(userptr, "glPushClientAttribDefaultEXT");
    context.textureBufferEXT = (PFNGLTEXTUREBUFFEREXTPROC) load(userptr, "glTextureBufferEXT");
    context.textureBufferRangeEXT = (PFNGLTEXTUREBUFFERRANGEEXTPROC) load(userptr, "glTextureBufferRangeEXT");
    context.textureImage1DEXT = (PFNGLTEXTUREIMAGE1DEXTPROC) load(userptr, "glTextureImage1DEXT");
    context.textureImage2DEXT = (PFNGLTEXTUREIMAGE2DEXTPROC) load(userptr, "glTextureImage2DEXT");
    context.textureImage3DEXT = (PFNGLTEXTUREIMAGE3DEXTPROC) load(userptr, "glTextureImage3DEXT");
    context.texturePageCommitmentEXT = (PFNGLTEXTUREPAGECOMMITMENTEXTPROC) load(userptr, "glTexturePageCommitmentEXT");
    context.textureParameterIivEXT = (PFNGLTEXTUREPARAMETERIIVEXTPROC) load(userptr, "glTextureParameterIivEXT");
    context.textureParameterIuivEXT = (PFNGLTEXTUREPARAMETERIUIVEXTPROC) load(userptr, "glTextureParameterIuivEXT");
    context.textureParameterfEXT = (PFNGLTEXTUREPARAMETERFEXTPROC) load(userptr, "glTextureParameterfEXT");
    context.textureParameterfvEXT = (PFNGLTEXTUREPARAMETERFVEXTPROC) load(userptr, "glTextureParameterfvEXT");
    context.textureParameteriEXT = (PFNGLTEXTUREPARAMETERIEXTPROC) load(userptr, "glTextureParameteriEXT");
    context.textureParameterivEXT = (PFNGLTEXTUREPARAMETERIVEXTPROC) load(userptr, "glTextureParameterivEXT");
    context.textureRenderbufferEXT = (PFNGLTEXTURERENDERBUFFEREXTPROC) load(userptr, "glTextureRenderbufferEXT");
    context.textureStorage1DEXT = (PFNGLTEXTURESTORAGE1DEXTPROC) load(userptr, "glTextureStorage1DEXT");
    context.textureStorage2DEXT = (PFNGLTEXTURESTORAGE2DEXTPROC) load(userptr, "glTextureStorage2DEXT");
    context.textureStorage2DMultisampleEXT = (PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) load(userptr, "glTextureStorage2DMultisampleEXT");
    context.textureStorage3DEXT = (PFNGLTEXTURESTORAGE3DEXTPROC) load(userptr, "glTextureStorage3DEXT");
    context.textureStorage3DMultisampleEXT = (PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) load(userptr, "glTextureStorage3DMultisampleEXT");
    context.textureSubImage1DEXT = (PFNGLTEXTURESUBIMAGE1DEXTPROC) load(userptr, "glTextureSubImage1DEXT");
    context.textureSubImage2DEXT = (PFNGLTEXTURESUBIMAGE2DEXTPROC) load(userptr, "glTextureSubImage2DEXT");
    context.textureSubImage3DEXT = (PFNGLTEXTURESUBIMAGE3DEXTPROC) load(userptr, "glTextureSubImage3DEXT");
    context.unmapNamedBufferEXT = (PFNGLUNMAPNAMEDBUFFEREXTPROC) load(userptr, "glUnmapNamedBufferEXT");
    context.vertexArrayBindVertexBufferEXT = (PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) load(userptr, "glVertexArrayBindVertexBufferEXT");
    context.vertexArrayColorOffsetEXT = (PFNGLVERTEXARRAYCOLOROFFSETEXTPROC) load(userptr, "glVertexArrayColorOffsetEXT");
    context.vertexArrayEdgeFlagOffsetEXT = (PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC) load(userptr, "glVertexArrayEdgeFlagOffsetEXT");
    context.vertexArrayFogCoordOffsetEXT = (PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC) load(userptr, "glVertexArrayFogCoordOffsetEXT");
    context.vertexArrayIndexOffsetEXT = (PFNGLVERTEXARRAYINDEXOFFSETEXTPROC) load(userptr, "glVertexArrayIndexOffsetEXT");
    context.vertexArrayMultiTexCoordOffsetEXT = (PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC) load(userptr, "glVertexArrayMultiTexCoordOffsetEXT");
    context.vertexArrayNormalOffsetEXT = (PFNGLVERTEXARRAYNORMALOFFSETEXTPROC) load(userptr, "glVertexArrayNormalOffsetEXT");
    context.vertexArraySecondaryColorOffsetEXT = (PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC) load(userptr, "glVertexArraySecondaryColorOffsetEXT");
    context.vertexArrayTexCoordOffsetEXT = (PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC) load(userptr, "glVertexArrayTexCoordOffsetEXT");
    context.vertexArrayVertexAttribBindingEXT = (PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) load(userptr, "glVertexArrayVertexAttribBindingEXT");
    context.vertexArrayVertexAttribDivisorEXT = (PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC) load(userptr, "glVertexArrayVertexAttribDivisorEXT");
    context.vertexArrayVertexAttribFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) load(userptr, "glVertexArrayVertexAttribFormatEXT");
    context.vertexArrayVertexAttribIFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) load(userptr, "glVertexArrayVertexAttribIFormatEXT");
    context.vertexArrayVertexAttribIOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC) load(userptr, "glVertexArrayVertexAttribIOffsetEXT");
    context.vertexArrayVertexAttribLFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) load(userptr, "glVertexArrayVertexAttribLFormatEXT");
    context.vertexArrayVertexAttribLOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) load(userptr, "glVertexArrayVertexAttribLOffsetEXT");
    context.vertexArrayVertexAttribOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC) load(userptr, "glVertexArrayVertexAttribOffsetEXT");
    context.vertexArrayVertexBindingDivisorEXT = (PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) load(userptr, "glVertexArrayVertexBindingDivisorEXT");
    context.vertexArrayVertexOffsetEXT = (PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC) load(userptr, "glVertexArrayVertexOffsetEXT");
}
static void glad_gl_load_GL_EXT_draw_buffers2(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_draw_buffers2) return;
    context.colorMaskIndexedEXT = (PFNGLCOLORMASKINDEXEDEXTPROC) load(userptr, "glColorMaskIndexedEXT");
    context.disableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC) load(userptr, "glDisableIndexedEXT");
    context.enableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC) load(userptr, "glEnableIndexedEXT");
    context.getBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC) load(userptr, "glGetBooleanIndexedvEXT");
    context.getIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC) load(userptr, "glGetIntegerIndexedvEXT");
    context.isEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC) load(userptr, "glIsEnabledIndexedEXT");
}
static void glad_gl_load_GL_EXT_draw_instanced(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_draw_instanced) return;
    context.drawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC) load(userptr, "glDrawArraysInstancedEXT");
    context.drawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC) load(userptr, "glDrawElementsInstancedEXT");
}
static void glad_gl_load_GL_EXT_draw_range_elements(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_draw_range_elements) return;
    context.drawRangeElementsEXT = (PFNGLDRAWRANGEELEMENTSEXTPROC) load(userptr, "glDrawRangeElementsEXT");
}
static void glad_gl_load_GL_EXT_framebuffer_blit(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_framebuffer_blit) return;
    context.blitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC) load(userptr, "glBlitFramebufferEXT");
}
static void glad_gl_load_GL_EXT_framebuffer_multisample(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_framebuffer_multisample) return;
    context.renderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) load(userptr, "glRenderbufferStorageMultisampleEXT");
}
static void glad_gl_load_GL_EXT_framebuffer_object(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_framebuffer_object) return;
    context.bindFramebufferEXT = (PFNGLBINDFRAMEBUFFEREXTPROC) load(userptr, "glBindFramebufferEXT");
    context.bindRenderbufferEXT = (PFNGLBINDRENDERBUFFEREXTPROC) load(userptr, "glBindRenderbufferEXT");
    context.checkFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) load(userptr, "glCheckFramebufferStatusEXT");
    context.deleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC) load(userptr, "glDeleteFramebuffersEXT");
    context.deleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC) load(userptr, "glDeleteRenderbuffersEXT");
    context.framebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) load(userptr, "glFramebufferRenderbufferEXT");
    context.framebufferTexture1DEXT = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) load(userptr, "glFramebufferTexture1DEXT");
    context.framebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) load(userptr, "glFramebufferTexture2DEXT");
    context.framebufferTexture3DEXT = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) load(userptr, "glFramebufferTexture3DEXT");
    context.genFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC) load(userptr, "glGenFramebuffersEXT");
    context.genRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC) load(userptr, "glGenRenderbuffersEXT");
    context.generateMipmapEXT = (PFNGLGENERATEMIPMAPEXTPROC) load(userptr, "glGenerateMipmapEXT");
    context.getFramebufferAttachmentParameterivEXT = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) load(userptr, "glGetFramebufferAttachmentParameterivEXT");
    context.getRenderbufferParameterivEXT = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) load(userptr, "glGetRenderbufferParameterivEXT");
    context.isFramebufferEXT = (PFNGLISFRAMEBUFFEREXTPROC) load(userptr, "glIsFramebufferEXT");
    context.isRenderbufferEXT = (PFNGLISRENDERBUFFEREXTPROC) load(userptr, "glIsRenderbufferEXT");
    context.renderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC) load(userptr, "glRenderbufferStorageEXT");
}
static void glad_gl_load_GL_EXT_gpu_shader4(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_gpu_shader4) return;
    context.bindFragDataLocationEXT = (PFNGLBINDFRAGDATALOCATIONEXTPROC) load(userptr, "glBindFragDataLocationEXT");
    context.getFragDataLocationEXT = (PFNGLGETFRAGDATALOCATIONEXTPROC) load(userptr, "glGetFragDataLocationEXT");
    context.getUniformuivEXT = (PFNGLGETUNIFORMUIVEXTPROC) load(userptr, "glGetUniformuivEXT");
    context.getVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC) load(userptr, "glGetVertexAttribIivEXT");
    context.getVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC) load(userptr, "glGetVertexAttribIuivEXT");
    context.uniform1uiEXT = (PFNGLUNIFORM1UIEXTPROC) load(userptr, "glUniform1uiEXT");
    context.uniform1uivEXT = (PFNGLUNIFORM1UIVEXTPROC) load(userptr, "glUniform1uivEXT");
    context.uniform2uiEXT = (PFNGLUNIFORM2UIEXTPROC) load(userptr, "glUniform2uiEXT");
    context.uniform2uivEXT = (PFNGLUNIFORM2UIVEXTPROC) load(userptr, "glUniform2uivEXT");
    context.uniform3uiEXT = (PFNGLUNIFORM3UIEXTPROC) load(userptr, "glUniform3uiEXT");
    context.uniform3uivEXT = (PFNGLUNIFORM3UIVEXTPROC) load(userptr, "glUniform3uivEXT");
    context.uniform4uiEXT = (PFNGLUNIFORM4UIEXTPROC) load(userptr, "glUniform4uiEXT");
    context.uniform4uivEXT = (PFNGLUNIFORM4UIVEXTPROC) load(userptr, "glUniform4uivEXT");
    context.vertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC) load(userptr, "glVertexAttribI1iEXT");
    context.vertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC) load(userptr, "glVertexAttribI1ivEXT");
    context.vertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC) load(userptr, "glVertexAttribI1uiEXT");
    context.vertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC) load(userptr, "glVertexAttribI1uivEXT");
    context.vertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC) load(userptr, "glVertexAttribI2iEXT");
    context.vertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC) load(userptr, "glVertexAttribI2ivEXT");
    context.vertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC) load(userptr, "glVertexAttribI2uiEXT");
    context.vertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC) load(userptr, "glVertexAttribI2uivEXT");
    context.vertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC) load(userptr, "glVertexAttribI3iEXT");
    context.vertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC) load(userptr, "glVertexAttribI3ivEXT");
    context.vertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC) load(userptr, "glVertexAttribI3uiEXT");
    context.vertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC) load(userptr, "glVertexAttribI3uivEXT");
    context.vertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC) load(userptr, "glVertexAttribI4bvEXT");
    context.vertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC) load(userptr, "glVertexAttribI4iEXT");
    context.vertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC) load(userptr, "glVertexAttribI4ivEXT");
    context.vertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC) load(userptr, "glVertexAttribI4svEXT");
    context.vertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC) load(userptr, "glVertexAttribI4ubvEXT");
    context.vertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC) load(userptr, "glVertexAttribI4uiEXT");
    context.vertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC) load(userptr, "glVertexAttribI4uivEXT");
    context.vertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC) load(userptr, "glVertexAttribI4usvEXT");
    context.vertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC) load(userptr, "glVertexAttribIPointerEXT");
}
static void glad_gl_load_GL_EXT_multi_draw_arrays(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_multi_draw_arrays) return;
    context.multiDrawArraysEXT = (PFNGLMULTIDRAWARRAYSEXTPROC) load(userptr, "glMultiDrawArraysEXT");
    context.multiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC) load(userptr, "glMultiDrawElementsEXT");
}
static void glad_gl_load_GL_EXT_point_parameters(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_point_parameters) return;
    context.pointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC) load(userptr, "glPointParameterfEXT");
    context.pointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC) load(userptr, "glPointParameterfvEXT");
}
static void glad_gl_load_GL_EXT_provoking_vertex(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_provoking_vertex) return;
    context.provokingVertexEXT = (PFNGLPROVOKINGVERTEXEXTPROC) load(userptr, "glProvokingVertexEXT");
}
static void glad_gl_load_GL_EXT_subtexture(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_subtexture) return;
    context.texSubImage1DEXT = (PFNGLTEXSUBIMAGE1DEXTPROC) load(userptr, "glTexSubImage1DEXT");
    context.texSubImage2DEXT = (PFNGLTEXSUBIMAGE2DEXTPROC) load(userptr, "glTexSubImage2DEXT");
}
static void glad_gl_load_GL_EXT_texture3D(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_texture3D) return;
    context.texImage3DEXT = (PFNGLTEXIMAGE3DEXTPROC) load(userptr, "glTexImage3DEXT");
    context.texSubImage3DEXT = (PFNGLTEXSUBIMAGE3DEXTPROC) load(userptr, "glTexSubImage3DEXT");
}
static void glad_gl_load_GL_EXT_texture_array(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_texture_array) return;
    context.framebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) load(userptr, "glFramebufferTextureLayerEXT");
}
static void glad_gl_load_GL_EXT_texture_buffer_object(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_texture_buffer_object) return;
    context.texBufferEXT = (PFNGLTEXBUFFEREXTPROC) load(userptr, "glTexBufferEXT");
}
static void glad_gl_load_GL_EXT_texture_integer(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_texture_integer) return;
    context.clearColorIiEXT = (PFNGLCLEARCOLORIIEXTPROC) load(userptr, "glClearColorIiEXT");
    context.clearColorIuiEXT = (PFNGLCLEARCOLORIUIEXTPROC) load(userptr, "glClearColorIuiEXT");
    context.getTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC) load(userptr, "glGetTexParameterIivEXT");
    context.getTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC) load(userptr, "glGetTexParameterIuivEXT");
    context.texParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC) load(userptr, "glTexParameterIivEXT");
    context.texParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC) load(userptr, "glTexParameterIuivEXT");
}
static void glad_gl_load_GL_EXT_texture_object(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_texture_object) return;
    context.areTexturesResidentEXT = (PFNGLARETEXTURESRESIDENTEXTPROC) load(userptr, "glAreTexturesResidentEXT");
    context.bindTextureEXT = (PFNGLBINDTEXTUREEXTPROC) load(userptr, "glBindTextureEXT");
    context.deleteTexturesEXT = (PFNGLDELETETEXTURESEXTPROC) load(userptr, "glDeleteTexturesEXT");
    context.genTexturesEXT = (PFNGLGENTEXTURESEXTPROC) load(userptr, "glGenTexturesEXT");
    context.isTextureEXT = (PFNGLISTEXTUREEXTPROC) load(userptr, "glIsTextureEXT");
    context.prioritizeTexturesEXT = (PFNGLPRIORITIZETEXTURESEXTPROC) load(userptr, "glPrioritizeTexturesEXT");
}
static void glad_gl_load_GL_EXT_transform_feedback(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_transform_feedback) return;
    context.beginTransformFeedbackEXT = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) load(userptr, "glBeginTransformFeedbackEXT");
    context.bindBufferBaseEXT = (PFNGLBINDBUFFERBASEEXTPROC) load(userptr, "glBindBufferBaseEXT");
    context.bindBufferOffsetEXT = (PFNGLBINDBUFFEROFFSETEXTPROC) load(userptr, "glBindBufferOffsetEXT");
    context.bindBufferRangeEXT = (PFNGLBINDBUFFERRANGEEXTPROC) load(userptr, "glBindBufferRangeEXT");
    context.endTransformFeedbackEXT = (PFNGLENDTRANSFORMFEEDBACKEXTPROC) load(userptr, "glEndTransformFeedbackEXT");
    context.getTransformFeedbackVaryingEXT = (PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) load(userptr, "glGetTransformFeedbackVaryingEXT");
    context.transformFeedbackVaryingsEXT = (PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) load(userptr, "glTransformFeedbackVaryingsEXT");
}
static void glad_gl_load_GL_EXT_vertex_array(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_vertex_array) return;
    context.arrayElementEXT = (PFNGLARRAYELEMENTEXTPROC) load(userptr, "glArrayElementEXT");
    context.colorPointerEXT = (PFNGLCOLORPOINTEREXTPROC) load(userptr, "glColorPointerEXT");
    context.drawArraysEXT = (PFNGLDRAWARRAYSEXTPROC) load(userptr, "glDrawArraysEXT");
    context.edgeFlagPointerEXT = (PFNGLEDGEFLAGPOINTEREXTPROC) load(userptr, "glEdgeFlagPointerEXT");
    context.getPointervEXT = (PFNGLGETPOINTERVEXTPROC) load(userptr, "glGetPointervEXT");
    context.indexPointerEXT = (PFNGLINDEXPOINTEREXTPROC) load(userptr, "glIndexPointerEXT");
    context.normalPointerEXT = (PFNGLNORMALPOINTEREXTPROC) load(userptr, "glNormalPointerEXT");
    context.texCoordPointerEXT = (PFNGLTEXCOORDPOINTEREXTPROC) load(userptr, "glTexCoordPointerEXT");
    context.vertexPointerEXT = (PFNGLVERTEXPOINTEREXTPROC) load(userptr, "glVertexPointerEXT");
}
static void glad_gl_load_GL_INGR_blend_func_separate(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.INGR_blend_func_separate) return;
    context.blendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC) load(userptr, "glBlendFuncSeparateINGR");
}
static void glad_gl_load_GL_NVX_conditional_render(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.NVX_conditional_render) return;
    context.beginConditionalRenderNVX = (PFNGLBEGINCONDITIONALRENDERNVXPROC) load(userptr, "glBeginConditionalRenderNVX");
    context.endConditionalRenderNVX = (PFNGLENDCONDITIONALRENDERNVXPROC) load(userptr, "glEndConditionalRenderNVX");
}
static void glad_gl_load_GL_NV_conditional_render(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.NV_conditional_render) return;
    context.beginConditionalRenderNV = (PFNGLBEGINCONDITIONALRENDERNVPROC) load(userptr, "glBeginConditionalRenderNV");
    context.endConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC) load(userptr, "glEndConditionalRenderNV");
}
static void glad_gl_load_GL_NV_explicit_multisample(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.NV_explicit_multisample) return;
    context.getMultisamplefvNV = (PFNGLGETMULTISAMPLEFVNVPROC) load(userptr, "glGetMultisamplefvNV");
    context.sampleMaskIndexedNV = (PFNGLSAMPLEMASKINDEXEDNVPROC) load(userptr, "glSampleMaskIndexedNV");
    context.texRenderbufferNV = (PFNGLTEXRENDERBUFFERNVPROC) load(userptr, "glTexRenderbufferNV");
}
static void glad_gl_load_GL_NV_geometry_program4(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.NV_geometry_program4) return;
    context.framebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC) load(userptr, "glFramebufferTextureEXT");
    context.framebufferTextureFaceEXT = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) load(userptr, "glFramebufferTextureFaceEXT");
    context.framebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) load(userptr, "glFramebufferTextureLayerEXT");
    context.programVertexLimitNV = (PFNGLPROGRAMVERTEXLIMITNVPROC) load(userptr, "glProgramVertexLimitNV");
}
static void glad_gl_load_GL_NV_point_sprite(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.NV_point_sprite) return;
    context.pointParameteriNV = (PFNGLPOINTPARAMETERINVPROC) load(userptr, "glPointParameteriNV");
    context.pointParameterivNV = (PFNGLPOINTPARAMETERIVNVPROC) load(userptr, "glPointParameterivNV");
}
static void glad_gl_load_GL_NV_transform_feedback(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.NV_transform_feedback) return;
    context.activeVaryingNV = (PFNGLACTIVEVARYINGNVPROC) load(userptr, "glActiveVaryingNV");
    context.beginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC) load(userptr, "glBeginTransformFeedbackNV");
    context.bindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC) load(userptr, "glBindBufferBaseNV");
    context.bindBufferOffsetNV = (PFNGLBINDBUFFEROFFSETNVPROC) load(userptr, "glBindBufferOffsetNV");
    context.bindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC) load(userptr, "glBindBufferRangeNV");
    context.endTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC) load(userptr, "glEndTransformFeedbackNV");
    context.getActiveVaryingNV = (PFNGLGETACTIVEVARYINGNVPROC) load(userptr, "glGetActiveVaryingNV");
    context.getTransformFeedbackVaryingNV = (PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) load(userptr, "glGetTransformFeedbackVaryingNV");
    context.getVaryingLocationNV = (PFNGLGETVARYINGLOCATIONNVPROC) load(userptr, "glGetVaryingLocationNV");
    context.transformFeedbackAttribsNV = (PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) load(userptr, "glTransformFeedbackAttribsNV");
    context.transformFeedbackStreamAttribsNV = (PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC) load(userptr, "glTransformFeedbackStreamAttribsNV");
    context.transformFeedbackVaryingsNV = (PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) load(userptr, "glTransformFeedbackVaryingsNV");
}
static void glad_gl_load_GL_NV_vertex_program(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.NV_vertex_program) return;
    context.areProgramsResidentNV = (PFNGLAREPROGRAMSRESIDENTNVPROC) load(userptr, "glAreProgramsResidentNV");
    context.bindProgramNV = (PFNGLBINDPROGRAMNVPROC) load(userptr, "glBindProgramNV");
    context.deleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC) load(userptr, "glDeleteProgramsNV");
    context.executeProgramNV = (PFNGLEXECUTEPROGRAMNVPROC) load(userptr, "glExecuteProgramNV");
    context.genProgramsNV = (PFNGLGENPROGRAMSNVPROC) load(userptr, "glGenProgramsNV");
    context.getProgramParameterdvNV = (PFNGLGETPROGRAMPARAMETERDVNVPROC) load(userptr, "glGetProgramParameterdvNV");
    context.getProgramParameterfvNV = (PFNGLGETPROGRAMPARAMETERFVNVPROC) load(userptr, "glGetProgramParameterfvNV");
    context.getProgramStringNV = (PFNGLGETPROGRAMSTRINGNVPROC) load(userptr, "glGetProgramStringNV");
    context.getProgramivNV = (PFNGLGETPROGRAMIVNVPROC) load(userptr, "glGetProgramivNV");
    context.getTrackMatrixivNV = (PFNGLGETTRACKMATRIXIVNVPROC) load(userptr, "glGetTrackMatrixivNV");
    context.getVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC) load(userptr, "glGetVertexAttribPointervNV");
    context.getVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC) load(userptr, "glGetVertexAttribdvNV");
    context.getVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC) load(userptr, "glGetVertexAttribfvNV");
    context.getVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC) load(userptr, "glGetVertexAttribivNV");
    context.isProgramNV = (PFNGLISPROGRAMNVPROC) load(userptr, "glIsProgramNV");
    context.loadProgramNV = (PFNGLLOADPROGRAMNVPROC) load(userptr, "glLoadProgramNV");
    context.programParameter4dNV = (PFNGLPROGRAMPARAMETER4DNVPROC) load(userptr, "glProgramParameter4dNV");
    context.programParameter4dvNV = (PFNGLPROGRAMPARAMETER4DVNVPROC) load(userptr, "glProgramParameter4dvNV");
    context.programParameter4fNV = (PFNGLPROGRAMPARAMETER4FNVPROC) load(userptr, "glProgramParameter4fNV");
    context.programParameter4fvNV = (PFNGLPROGRAMPARAMETER4FVNVPROC) load(userptr, "glProgramParameter4fvNV");
    context.programParameters4dvNV = (PFNGLPROGRAMPARAMETERS4DVNVPROC) load(userptr, "glProgramParameters4dvNV");
    context.programParameters4fvNV = (PFNGLPROGRAMPARAMETERS4FVNVPROC) load(userptr, "glProgramParameters4fvNV");
    context.requestResidentProgramsNV = (PFNGLREQUESTRESIDENTPROGRAMSNVPROC) load(userptr, "glRequestResidentProgramsNV");
    context.trackMatrixNV = (PFNGLTRACKMATRIXNVPROC) load(userptr, "glTrackMatrixNV");
    context.vertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC) load(userptr, "glVertexAttrib1dNV");
    context.vertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC) load(userptr, "glVertexAttrib1dvNV");
    context.vertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC) load(userptr, "glVertexAttrib1fNV");
    context.vertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC) load(userptr, "glVertexAttrib1fvNV");
    context.vertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC) load(userptr, "glVertexAttrib1sNV");
    context.vertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC) load(userptr, "glVertexAttrib1svNV");
    context.vertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC) load(userptr, "glVertexAttrib2dNV");
    context.vertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC) load(userptr, "glVertexAttrib2dvNV");
    context.vertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC) load(userptr, "glVertexAttrib2fNV");
    context.vertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC) load(userptr, "glVertexAttrib2fvNV");
    context.vertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC) load(userptr, "glVertexAttrib2sNV");
    context.vertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC) load(userptr, "glVertexAttrib2svNV");
    context.vertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC) load(userptr, "glVertexAttrib3dNV");
    context.vertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC) load(userptr, "glVertexAttrib3dvNV");
    context.vertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC) load(userptr, "glVertexAttrib3fNV");
    context.vertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC) load(userptr, "glVertexAttrib3fvNV");
    context.vertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC) load(userptr, "glVertexAttrib3sNV");
    context.vertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC) load(userptr, "glVertexAttrib3svNV");
    context.vertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC) load(userptr, "glVertexAttrib4dNV");
    context.vertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC) load(userptr, "glVertexAttrib4dvNV");
    context.vertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC) load(userptr, "glVertexAttrib4fNV");
    context.vertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC) load(userptr, "glVertexAttrib4fvNV");
    context.vertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC) load(userptr, "glVertexAttrib4sNV");
    context.vertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC) load(userptr, "glVertexAttrib4svNV");
    context.vertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC) load(userptr, "glVertexAttrib4ubNV");
    context.vertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC) load(userptr, "glVertexAttrib4ubvNV");
    context.vertexAttribPointerNV = (PFNGLVERTEXATTRIBPOINTERNVPROC) load(userptr, "glVertexAttribPointerNV");
    context.vertexAttribs1dvNV = (PFNGLVERTEXATTRIBS1DVNVPROC) load(userptr, "glVertexAttribs1dvNV");
    context.vertexAttribs1fvNV = (PFNGLVERTEXATTRIBS1FVNVPROC) load(userptr, "glVertexAttribs1fvNV");
    context.vertexAttribs1svNV = (PFNGLVERTEXATTRIBS1SVNVPROC) load(userptr, "glVertexAttribs1svNV");
    context.vertexAttribs2dvNV = (PFNGLVERTEXATTRIBS2DVNVPROC) load(userptr, "glVertexAttribs2dvNV");
    context.vertexAttribs2fvNV = (PFNGLVERTEXATTRIBS2FVNVPROC) load(userptr, "glVertexAttribs2fvNV");
    context.vertexAttribs2svNV = (PFNGLVERTEXATTRIBS2SVNVPROC) load(userptr, "glVertexAttribs2svNV");
    context.vertexAttribs3dvNV = (PFNGLVERTEXATTRIBS3DVNVPROC) load(userptr, "glVertexAttribs3dvNV");
    context.vertexAttribs3fvNV = (PFNGLVERTEXATTRIBS3FVNVPROC) load(userptr, "glVertexAttribs3fvNV");
    context.vertexAttribs3svNV = (PFNGLVERTEXATTRIBS3SVNVPROC) load(userptr, "glVertexAttribs3svNV");
    context.vertexAttribs4dvNV = (PFNGLVERTEXATTRIBS4DVNVPROC) load(userptr, "glVertexAttribs4dvNV");
    context.vertexAttribs4fvNV = (PFNGLVERTEXATTRIBS4FVNVPROC) load(userptr, "glVertexAttribs4fvNV");
    context.vertexAttribs4svNV = (PFNGLVERTEXATTRIBS4SVNVPROC) load(userptr, "glVertexAttribs4svNV");
    context.vertexAttribs4ubvNV = (PFNGLVERTEXATTRIBS4UBVNVPROC) load(userptr, "glVertexAttribs4ubvNV");
}
static void glad_gl_load_GL_NV_vertex_program4(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.NV_vertex_program4) return;
    context.getVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC) load(userptr, "glGetVertexAttribIivEXT");
    context.getVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC) load(userptr, "glGetVertexAttribIuivEXT");
    context.vertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC) load(userptr, "glVertexAttribI1iEXT");
    context.vertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC) load(userptr, "glVertexAttribI1ivEXT");
    context.vertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC) load(userptr, "glVertexAttribI1uiEXT");
    context.vertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC) load(userptr, "glVertexAttribI1uivEXT");
    context.vertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC) load(userptr, "glVertexAttribI2iEXT");
    context.vertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC) load(userptr, "glVertexAttribI2ivEXT");
    context.vertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC) load(userptr, "glVertexAttribI2uiEXT");
    context.vertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC) load(userptr, "glVertexAttribI2uivEXT");
    context.vertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC) load(userptr, "glVertexAttribI3iEXT");
    context.vertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC) load(userptr, "glVertexAttribI3ivEXT");
    context.vertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC) load(userptr, "glVertexAttribI3uiEXT");
    context.vertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC) load(userptr, "glVertexAttribI3uivEXT");
    context.vertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC) load(userptr, "glVertexAttribI4bvEXT");
    context.vertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC) load(userptr, "glVertexAttribI4iEXT");
    context.vertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC) load(userptr, "glVertexAttribI4ivEXT");
    context.vertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC) load(userptr, "glVertexAttribI4svEXT");
    context.vertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC) load(userptr, "glVertexAttribI4ubvEXT");
    context.vertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC) load(userptr, "glVertexAttribI4uiEXT");
    context.vertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC) load(userptr, "glVertexAttribI4uivEXT");
    context.vertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC) load(userptr, "glVertexAttribI4usvEXT");
    context.vertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC) load(userptr, "glVertexAttribIPointerEXT");
}
static void glad_gl_load_GL_SGIS_point_parameters(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.SGIS_point_parameters) return;
    context.pointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC) load(userptr, "glPointParameterfSGIS");
    context.pointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC) load(userptr, "glPointParameterfvSGIS");
}
static void glad_gl_load_GL_ANGLE_instanced_arrays(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.ANGLE_instanced_arrays) return;
    context.drawArraysInstancedANGLE = (PFNGLDRAWARRAYSINSTANCEDANGLEPROC) load(userptr, "glDrawArraysInstancedANGLE");
    context.drawElementsInstancedANGLE = (PFNGLDRAWELEMENTSINSTANCEDANGLEPROC) load(userptr, "glDrawElementsInstancedANGLE");
    context.vertexAttribDivisorANGLE = (PFNGLVERTEXATTRIBDIVISORANGLEPROC) load(userptr, "glVertexAttribDivisorANGLE");
}
static void glad_gl_load_GL_APPLE_sync(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.APPLE_sync) return;
    context.clientWaitSyncAPPLE = (PFNGLCLIENTWAITSYNCAPPLEPROC) load(userptr, "glClientWaitSyncAPPLE");
    context.deleteSyncAPPLE = (PFNGLDELETESYNCAPPLEPROC) load(userptr, "glDeleteSyncAPPLE");
    context.fenceSyncAPPLE = (PFNGLFENCESYNCAPPLEPROC) load(userptr, "glFenceSyncAPPLE");
    context.getInteger64vAPPLE = (PFNGLGETINTEGER64VAPPLEPROC) load(userptr, "glGetInteger64vAPPLE");
    context.getSyncivAPPLE = (PFNGLGETSYNCIVAPPLEPROC) load(userptr, "glGetSyncivAPPLE");
    context.isSyncAPPLE = (PFNGLISSYNCAPPLEPROC) load(userptr, "glIsSyncAPPLE");
    context.waitSyncAPPLE = (PFNGLWAITSYNCAPPLEPROC) load(userptr, "glWaitSyncAPPLE");
}
static void glad_gl_load_GL_EXT_copy_image(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_copy_image) return;
    context.copyImageSubDataEXT = (PFNGLCOPYIMAGESUBDATAEXTPROC) load(userptr, "glCopyImageSubDataEXT");
}
static void glad_gl_load_GL_EXT_disjoint_timer_query(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_disjoint_timer_query) return;
    context.beginQueryEXT = (PFNGLBEGINQUERYEXTPROC) load(userptr, "glBeginQueryEXT");
    context.deleteQueriesEXT = (PFNGLDELETEQUERIESEXTPROC) load(userptr, "glDeleteQueriesEXT");
    context.endQueryEXT = (PFNGLENDQUERYEXTPROC) load(userptr, "glEndQueryEXT");
    context.genQueriesEXT = (PFNGLGENQUERIESEXTPROC) load(userptr, "glGenQueriesEXT");
    context.getInteger64vEXT = (PFNGLGETINTEGER64VEXTPROC) load(userptr, "glGetInteger64vEXT");
    context.getQueryObjecti64vEXT = (PFNGLGETQUERYOBJECTI64VEXTPROC) load(userptr, "glGetQueryObjecti64vEXT");
    context.getQueryObjectivEXT = (PFNGLGETQUERYOBJECTIVEXTPROC) load(userptr, "glGetQueryObjectivEXT");
    context.getQueryObjectui64vEXT = (PFNGLGETQUERYOBJECTUI64VEXTPROC) load(userptr, "glGetQueryObjectui64vEXT");
    context.getQueryObjectuivEXT = (PFNGLGETQUERYOBJECTUIVEXTPROC) load(userptr, "glGetQueryObjectuivEXT");
    context.getQueryivEXT = (PFNGLGETQUERYIVEXTPROC) load(userptr, "glGetQueryivEXT");
    context.isQueryEXT = (PFNGLISQUERYEXTPROC) load(userptr, "glIsQueryEXT");
    context.queryCounterEXT = (PFNGLQUERYCOUNTEREXTPROC) load(userptr, "glQueryCounterEXT");
}
static void glad_gl_load_GL_EXT_draw_buffers(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_draw_buffers) return;
    context.drawBuffersEXT = (PFNGLDRAWBUFFERSEXTPROC) load(userptr, "glDrawBuffersEXT");
}
static void glad_gl_load_GL_EXT_draw_buffers_indexed(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_draw_buffers_indexed) return;
    context.blendEquationSeparateiEXT = (PFNGLBLENDEQUATIONSEPARATEIEXTPROC) load(userptr, "glBlendEquationSeparateiEXT");
    context.blendEquationiEXT = (PFNGLBLENDEQUATIONIEXTPROC) load(userptr, "glBlendEquationiEXT");
    context.blendFuncSeparateiEXT = (PFNGLBLENDFUNCSEPARATEIEXTPROC) load(userptr, "glBlendFuncSeparateiEXT");
    context.blendFunciEXT = (PFNGLBLENDFUNCIEXTPROC) load(userptr, "glBlendFunciEXT");
    context.colorMaskiEXT = (PFNGLCOLORMASKIEXTPROC) load(userptr, "glColorMaskiEXT");
    context.disableiEXT = (PFNGLDISABLEIEXTPROC) load(userptr, "glDisableiEXT");
    context.enableiEXT = (PFNGLENABLEIEXTPROC) load(userptr, "glEnableiEXT");
    context.isEnablediEXT = (PFNGLISENABLEDIEXTPROC) load(userptr, "glIsEnablediEXT");
}
static void glad_gl_load_GL_EXT_draw_elements_base_vertex(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_draw_elements_base_vertex) return;
    context.drawElementsBaseVertexEXT = (PFNGLDRAWELEMENTSBASEVERTEXEXTPROC) load(userptr, "glDrawElementsBaseVertexEXT");
    context.drawElementsInstancedBaseVertexEXT = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC) load(userptr, "glDrawElementsInstancedBaseVertexEXT");
    context.drawRangeElementsBaseVertexEXT = (PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC) load(userptr, "glDrawRangeElementsBaseVertexEXT");
    context.multiDrawElementsBaseVertexEXT = (PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC) load(userptr, "glMultiDrawElementsBaseVertexEXT");
}
static void glad_gl_load_GL_EXT_geometry_shader(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_geometry_shader) return;
    context.framebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC) load(userptr, "glFramebufferTextureEXT");
}
static void glad_gl_load_GL_EXT_instanced_arrays(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_instanced_arrays) return;
    context.drawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC) load(userptr, "glDrawArraysInstancedEXT");
    context.drawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC) load(userptr, "glDrawElementsInstancedEXT");
    context.vertexAttribDivisorEXT = (PFNGLVERTEXATTRIBDIVISOREXTPROC) load(userptr, "glVertexAttribDivisorEXT");
}
static void glad_gl_load_GL_EXT_map_buffer_range(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_map_buffer_range) return;
    context.flushMappedBufferRangeEXT = (PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC) load(userptr, "glFlushMappedBufferRangeEXT");
    context.mapBufferRangeEXT = (PFNGLMAPBUFFERRANGEEXTPROC) load(userptr, "glMapBufferRangeEXT");
}
static void glad_gl_load_GL_EXT_multisampled_render_to_texture(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_multisampled_render_to_texture) return;
    context.framebufferTexture2DMultisampleEXT = (PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC) load(userptr, "glFramebufferTexture2DMultisampleEXT");
    context.renderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) load(userptr, "glRenderbufferStorageMultisampleEXT");
}
static void glad_gl_load_GL_EXT_primitive_bounding_box(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_primitive_bounding_box) return;
    context.primitiveBoundingBoxEXT = (PFNGLPRIMITIVEBOUNDINGBOXEXTPROC) load(userptr, "glPrimitiveBoundingBoxEXT");
}
static void glad_gl_load_GL_EXT_robustness(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_robustness) return;
    context.getGraphicsResetStatusEXT = (PFNGLGETGRAPHICSRESETSTATUSEXTPROC) load(userptr, "glGetGraphicsResetStatusEXT");
    context.getnUniformfvEXT = (PFNGLGETNUNIFORMFVEXTPROC) load(userptr, "glGetnUniformfvEXT");
    context.getnUniformivEXT = (PFNGLGETNUNIFORMIVEXTPROC) load(userptr, "glGetnUniformivEXT");
    context.readnPixelsEXT = (PFNGLREADNPIXELSEXTPROC) load(userptr, "glReadnPixelsEXT");
}
static void glad_gl_load_GL_EXT_separate_shader_objects(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_separate_shader_objects) return;
    context.activeShaderProgramEXT = (PFNGLACTIVESHADERPROGRAMEXTPROC) load(userptr, "glActiveShaderProgramEXT");
    context.bindProgramPipelineEXT = (PFNGLBINDPROGRAMPIPELINEEXTPROC) load(userptr, "glBindProgramPipelineEXT");
    context.createShaderProgramvEXT = (PFNGLCREATESHADERPROGRAMVEXTPROC) load(userptr, "glCreateShaderProgramvEXT");
    context.deleteProgramPipelinesEXT = (PFNGLDELETEPROGRAMPIPELINESEXTPROC) load(userptr, "glDeleteProgramPipelinesEXT");
    context.genProgramPipelinesEXT = (PFNGLGENPROGRAMPIPELINESEXTPROC) load(userptr, "glGenProgramPipelinesEXT");
    context.getProgramPipelineInfoLogEXT = (PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC) load(userptr, "glGetProgramPipelineInfoLogEXT");
    context.getProgramPipelineivEXT = (PFNGLGETPROGRAMPIPELINEIVEXTPROC) load(userptr, "glGetProgramPipelineivEXT");
    context.isProgramPipelineEXT = (PFNGLISPROGRAMPIPELINEEXTPROC) load(userptr, "glIsProgramPipelineEXT");
    context.programParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC) load(userptr, "glProgramParameteriEXT");
    context.programUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC) load(userptr, "glProgramUniform1fEXT");
    context.programUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC) load(userptr, "glProgramUniform1fvEXT");
    context.programUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC) load(userptr, "glProgramUniform1iEXT");
    context.programUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC) load(userptr, "glProgramUniform1ivEXT");
    context.programUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC) load(userptr, "glProgramUniform1uiEXT");
    context.programUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC) load(userptr, "glProgramUniform1uivEXT");
    context.programUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC) load(userptr, "glProgramUniform2fEXT");
    context.programUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC) load(userptr, "glProgramUniform2fvEXT");
    context.programUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC) load(userptr, "glProgramUniform2iEXT");
    context.programUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC) load(userptr, "glProgramUniform2ivEXT");
    context.programUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC) load(userptr, "glProgramUniform2uiEXT");
    context.programUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC) load(userptr, "glProgramUniform2uivEXT");
    context.programUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC) load(userptr, "glProgramUniform3fEXT");
    context.programUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC) load(userptr, "glProgramUniform3fvEXT");
    context.programUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC) load(userptr, "glProgramUniform3iEXT");
    context.programUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC) load(userptr, "glProgramUniform3ivEXT");
    context.programUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC) load(userptr, "glProgramUniform3uiEXT");
    context.programUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC) load(userptr, "glProgramUniform3uivEXT");
    context.programUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC) load(userptr, "glProgramUniform4fEXT");
    context.programUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC) load(userptr, "glProgramUniform4fvEXT");
    context.programUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC) load(userptr, "glProgramUniform4iEXT");
    context.programUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC) load(userptr, "glProgramUniform4ivEXT");
    context.programUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC) load(userptr, "glProgramUniform4uiEXT");
    context.programUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC) load(userptr, "glProgramUniform4uivEXT");
    context.programUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) load(userptr, "glProgramUniformMatrix2fvEXT");
    context.programUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) load(userptr, "glProgramUniformMatrix2x3fvEXT");
    context.programUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) load(userptr, "glProgramUniformMatrix2x4fvEXT");
    context.programUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) load(userptr, "glProgramUniformMatrix3fvEXT");
    context.programUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) load(userptr, "glProgramUniformMatrix3x2fvEXT");
    context.programUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) load(userptr, "glProgramUniformMatrix3x4fvEXT");
    context.programUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) load(userptr, "glProgramUniformMatrix4fvEXT");
    context.programUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) load(userptr, "glProgramUniformMatrix4x2fvEXT");
    context.programUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) load(userptr, "glProgramUniformMatrix4x3fvEXT");
    context.useProgramStagesEXT = (PFNGLUSEPROGRAMSTAGESEXTPROC) load(userptr, "glUseProgramStagesEXT");
    context.validateProgramPipelineEXT = (PFNGLVALIDATEPROGRAMPIPELINEEXTPROC) load(userptr, "glValidateProgramPipelineEXT");
}
static void glad_gl_load_GL_EXT_tessellation_shader(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_tessellation_shader) return;
    context.patchParameteriEXT = (PFNGLPATCHPARAMETERIEXTPROC) load(userptr, "glPatchParameteriEXT");
}
static void glad_gl_load_GL_EXT_texture_border_clamp(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_texture_border_clamp) return;
    context.getSamplerParameterIivEXT = (PFNGLGETSAMPLERPARAMETERIIVEXTPROC) load(userptr, "glGetSamplerParameterIivEXT");
    context.getSamplerParameterIuivEXT = (PFNGLGETSAMPLERPARAMETERIUIVEXTPROC) load(userptr, "glGetSamplerParameterIuivEXT");
    context.getTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC) load(userptr, "glGetTexParameterIivEXT");
    context.getTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC) load(userptr, "glGetTexParameterIuivEXT");
    context.samplerParameterIivEXT = (PFNGLSAMPLERPARAMETERIIVEXTPROC) load(userptr, "glSamplerParameterIivEXT");
    context.samplerParameterIuivEXT = (PFNGLSAMPLERPARAMETERIUIVEXTPROC) load(userptr, "glSamplerParameterIuivEXT");
    context.texParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC) load(userptr, "glTexParameterIivEXT");
    context.texParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC) load(userptr, "glTexParameterIuivEXT");
}
static void glad_gl_load_GL_EXT_texture_buffer(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_texture_buffer) return;
    context.texBufferEXT = (PFNGLTEXBUFFEREXTPROC) load(userptr, "glTexBufferEXT");
    context.texBufferRangeEXT = (PFNGLTEXBUFFERRANGEEXTPROC) load(userptr, "glTexBufferRangeEXT");
}
static void glad_gl_load_GL_EXT_texture_storage(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.EXT_texture_storage) return;
    context.texStorage1DEXT = (PFNGLTEXSTORAGE1DEXTPROC) load(userptr, "glTexStorage1DEXT");
    context.texStorage2DEXT = (PFNGLTEXSTORAGE2DEXTPROC) load(userptr, "glTexStorage2DEXT");
    context.texStorage3DEXT = (PFNGLTEXSTORAGE3DEXTPROC) load(userptr, "glTexStorage3DEXT");
    context.textureStorage1DEXT = (PFNGLTEXTURESTORAGE1DEXTPROC) load(userptr, "glTextureStorage1DEXT");
    context.textureStorage2DEXT = (PFNGLTEXTURESTORAGE2DEXTPROC) load(userptr, "glTextureStorage2DEXT");
    context.textureStorage3DEXT = (PFNGLTEXTURESTORAGE3DEXTPROC) load(userptr, "glTextureStorage3DEXT");
}
static void glad_gl_load_GL_KHR_blend_equation_advanced(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.KHR_blend_equation_advanced) return;
    context.blendBarrierKHR = (PFNGLBLENDBARRIERKHRPROC) load(userptr, "glBlendBarrierKHR");
}
static void glad_gl_load_GL_KHR_debug(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.KHR_debug) return;
    context.debugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC) load(userptr, "glDebugMessageCallback");
    context.debugMessageCallbackKHR = (PFNGLDEBUGMESSAGECALLBACKKHRPROC) load(userptr, "glDebugMessageCallbackKHR");
    context.debugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC) load(userptr, "glDebugMessageControl");
    context.debugMessageControlKHR = (PFNGLDEBUGMESSAGECONTROLKHRPROC) load(userptr, "glDebugMessageControlKHR");
    context.debugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC) load(userptr, "glDebugMessageInsert");
    context.debugMessageInsertKHR = (PFNGLDEBUGMESSAGEINSERTKHRPROC) load(userptr, "glDebugMessageInsertKHR");
    context.getDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC) load(userptr, "glGetDebugMessageLog");
    context.getDebugMessageLogKHR = (PFNGLGETDEBUGMESSAGELOGKHRPROC) load(userptr, "glGetDebugMessageLogKHR");
    context.getObjectLabel = (PFNGLGETOBJECTLABELPROC) load(userptr, "glGetObjectLabel");
    context.getObjectLabelKHR = (PFNGLGETOBJECTLABELKHRPROC) load(userptr, "glGetObjectLabelKHR");
    context.getObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC) load(userptr, "glGetObjectPtrLabel");
    context.getObjectPtrLabelKHR = (PFNGLGETOBJECTPTRLABELKHRPROC) load(userptr, "glGetObjectPtrLabelKHR");
    context.getPointerv = (PFNGLGETPOINTERVPROC) load(userptr, "glGetPointerv");
    context.getPointervKHR = (PFNGLGETPOINTERVKHRPROC) load(userptr, "glGetPointervKHR");
    context.objectLabel = (PFNGLOBJECTLABELPROC) load(userptr, "glObjectLabel");
    context.objectLabelKHR = (PFNGLOBJECTLABELKHRPROC) load(userptr, "glObjectLabelKHR");
    context.objectPtrLabel = (PFNGLOBJECTPTRLABELPROC) load(userptr, "glObjectPtrLabel");
    context.objectPtrLabelKHR = (PFNGLOBJECTPTRLABELKHRPROC) load(userptr, "glObjectPtrLabelKHR");
    context.popDebugGroup = (PFNGLPOPDEBUGGROUPPROC) load(userptr, "glPopDebugGroup");
    context.popDebugGroupKHR = (PFNGLPOPDEBUGGROUPKHRPROC) load(userptr, "glPopDebugGroupKHR");
    context.pushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC) load(userptr, "glPushDebugGroup");
    context.pushDebugGroupKHR = (PFNGLPUSHDEBUGGROUPKHRPROC) load(userptr, "glPushDebugGroupKHR");
}
static void glad_gl_load_GL_KHR_robustness(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.KHR_robustness) return;
    context.getGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC) load(userptr, "glGetGraphicsResetStatus");
    context.getGraphicsResetStatusKHR = (PFNGLGETGRAPHICSRESETSTATUSKHRPROC) load(userptr, "glGetGraphicsResetStatusKHR");
    context.getnUniformfv = (PFNGLGETNUNIFORMFVPROC) load(userptr, "glGetnUniformfv");
    context.getnUniformfvKHR = (PFNGLGETNUNIFORMFVKHRPROC) load(userptr, "glGetnUniformfvKHR");
    context.getnUniformiv = (PFNGLGETNUNIFORMIVPROC) load(userptr, "glGetnUniformiv");
    context.getnUniformivKHR = (PFNGLGETNUNIFORMIVKHRPROC) load(userptr, "glGetnUniformivKHR");
    context.getnUniformuiv = (PFNGLGETNUNIFORMUIVPROC) load(userptr, "glGetnUniformuiv");
    context.getnUniformuivKHR = (PFNGLGETNUNIFORMUIVKHRPROC) load(userptr, "glGetnUniformuivKHR");
    context.readnPixels = (PFNGLREADNPIXELSPROC) load(userptr, "glReadnPixels");
    context.readnPixelsKHR = (PFNGLREADNPIXELSKHRPROC) load(userptr, "glReadnPixelsKHR");
}
static void glad_gl_load_GL_NV_blend_equation_advanced(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.NV_blend_equation_advanced) return;
    context.blendBarrierNV = (PFNGLBLENDBARRIERNVPROC) load(userptr, "glBlendBarrierNV");
    context.blendParameteriNV = (PFNGLBLENDPARAMETERINVPROC) load(userptr, "glBlendParameteriNV");
}
static void glad_gl_load_GL_NV_copy_buffer(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.NV_copy_buffer) return;
    context.copyBufferSubDataNV = (PFNGLCOPYBUFFERSUBDATANVPROC) load(userptr, "glCopyBufferSubDataNV");
}
static void glad_gl_load_GL_NV_draw_instanced(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.NV_draw_instanced) return;
    context.drawArraysInstancedNV = (PFNGLDRAWARRAYSINSTANCEDNVPROC) load(userptr, "glDrawArraysInstancedNV");
    context.drawElementsInstancedNV = (PFNGLDRAWELEMENTSINSTANCEDNVPROC) load(userptr, "glDrawElementsInstancedNV");
}
static void glad_gl_load_GL_NV_framebuffer_blit(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.NV_framebuffer_blit) return;
    context.blitFramebufferNV = (PFNGLBLITFRAMEBUFFERNVPROC) load(userptr, "glBlitFramebufferNV");
}
static void glad_gl_load_GL_NV_framebuffer_multisample(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.NV_framebuffer_multisample) return;
    context.renderbufferStorageMultisampleNV = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC) load(userptr, "glRenderbufferStorageMultisampleNV");
}
static void glad_gl_load_GL_NV_instanced_arrays(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.NV_instanced_arrays) return;
    context.vertexAttribDivisorNV = (PFNGLVERTEXATTRIBDIVISORNVPROC) load(userptr, "glVertexAttribDivisorNV");
}
static void glad_gl_load_GL_NV_non_square_matrices(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.NV_non_square_matrices) return;
    context.uniformMatrix2x3fvNV = (PFNGLUNIFORMMATRIX2X3FVNVPROC) load(userptr, "glUniformMatrix2x3fvNV");
    context.uniformMatrix2x4fvNV = (PFNGLUNIFORMMATRIX2X4FVNVPROC) load(userptr, "glUniformMatrix2x4fvNV");
    context.uniformMatrix3x2fvNV = (PFNGLUNIFORMMATRIX3X2FVNVPROC) load(userptr, "glUniformMatrix3x2fvNV");
    context.uniformMatrix3x4fvNV = (PFNGLUNIFORMMATRIX3X4FVNVPROC) load(userptr, "glUniformMatrix3x4fvNV");
    context.uniformMatrix4x2fvNV = (PFNGLUNIFORMMATRIX4X2FVNVPROC) load(userptr, "glUniformMatrix4x2fvNV");
    context.uniformMatrix4x3fvNV = (PFNGLUNIFORMMATRIX4X3FVNVPROC) load(userptr, "glUniformMatrix4x3fvNV");
}
static void glad_gl_load_GL_NV_viewport_array(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.NV_viewport_array) return;
    context.depthRangeArrayfvNV = (PFNGLDEPTHRANGEARRAYFVNVPROC) load(userptr, "glDepthRangeArrayfvNV");
    context.depthRangeIndexedfNV = (PFNGLDEPTHRANGEINDEXEDFNVPROC) load(userptr, "glDepthRangeIndexedfNV");
    context.disableiNV = (PFNGLDISABLEINVPROC) load(userptr, "glDisableiNV");
    context.enableiNV = (PFNGLENABLEINVPROC) load(userptr, "glEnableiNV");
    context.getFloati_vNV = (PFNGLGETFLOATI_VNVPROC) load(userptr, "glGetFloati_vNV");
    context.isEnablediNV = (PFNGLISENABLEDINVPROC) load(userptr, "glIsEnablediNV");
    context.scissorArrayvNV = (PFNGLSCISSORARRAYVNVPROC) load(userptr, "glScissorArrayvNV");
    context.scissorIndexedNV = (PFNGLSCISSORINDEXEDNVPROC) load(userptr, "glScissorIndexedNV");
    context.scissorIndexedvNV = (PFNGLSCISSORINDEXEDVNVPROC) load(userptr, "glScissorIndexedvNV");
    context.viewportArrayvNV = (PFNGLVIEWPORTARRAYVNVPROC) load(userptr, "glViewportArrayvNV");
    context.viewportIndexedfNV = (PFNGLVIEWPORTINDEXEDFNVPROC) load(userptr, "glViewportIndexedfNV");
    context.viewportIndexedfvNV = (PFNGLVIEWPORTINDEXEDFVNVPROC) load(userptr, "glViewportIndexedfvNV");
}
static void glad_gl_load_GL_OES_copy_image(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.OES_copy_image) return;
    context.copyImageSubDataOES = (PFNGLCOPYIMAGESUBDATAOESPROC) load(userptr, "glCopyImageSubDataOES");
}
static void glad_gl_load_GL_OES_draw_buffers_indexed(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.OES_draw_buffers_indexed) return;
    context.blendEquationSeparateiOES = (PFNGLBLENDEQUATIONSEPARATEIOESPROC) load(userptr, "glBlendEquationSeparateiOES");
    context.blendEquationiOES = (PFNGLBLENDEQUATIONIOESPROC) load(userptr, "glBlendEquationiOES");
    context.blendFuncSeparateiOES = (PFNGLBLENDFUNCSEPARATEIOESPROC) load(userptr, "glBlendFuncSeparateiOES");
    context.blendFunciOES = (PFNGLBLENDFUNCIOESPROC) load(userptr, "glBlendFunciOES");
    context.colorMaskiOES = (PFNGLCOLORMASKIOESPROC) load(userptr, "glColorMaskiOES");
    context.disableiOES = (PFNGLDISABLEIOESPROC) load(userptr, "glDisableiOES");
    context.enableiOES = (PFNGLENABLEIOESPROC) load(userptr, "glEnableiOES");
    context.isEnablediOES = (PFNGLISENABLEDIOESPROC) load(userptr, "glIsEnablediOES");
}
static void glad_gl_load_GL_OES_draw_elements_base_vertex(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.OES_draw_elements_base_vertex) return;
    context.drawElementsBaseVertexOES = (PFNGLDRAWELEMENTSBASEVERTEXOESPROC) load(userptr, "glDrawElementsBaseVertexOES");
    context.drawElementsInstancedBaseVertexOES = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC) load(userptr, "glDrawElementsInstancedBaseVertexOES");
    context.drawRangeElementsBaseVertexOES = (PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC) load(userptr, "glDrawRangeElementsBaseVertexOES");
    context.multiDrawElementsBaseVertexEXT = (PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC) load(userptr, "glMultiDrawElementsBaseVertexEXT");
}
static void glad_gl_load_GL_OES_geometry_shader(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.OES_geometry_shader) return;
    context.framebufferTextureOES = (PFNGLFRAMEBUFFERTEXTUREOESPROC) load(userptr, "glFramebufferTextureOES");
}
static void glad_gl_load_GL_OES_get_program_binary(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.OES_get_program_binary) return;
    context.getProgramBinaryOES = (PFNGLGETPROGRAMBINARYOESPROC) load(userptr, "glGetProgramBinaryOES");
    context.programBinaryOES = (PFNGLPROGRAMBINARYOESPROC) load(userptr, "glProgramBinaryOES");
}
static void glad_gl_load_GL_OES_mapbuffer(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.OES_mapbuffer) return;
    context.getBufferPointervOES = (PFNGLGETBUFFERPOINTERVOESPROC) load(userptr, "glGetBufferPointervOES");
    context.mapBufferOES = (PFNGLMAPBUFFEROESPROC) load(userptr, "glMapBufferOES");
    context.unmapBufferOES = (PFNGLUNMAPBUFFEROESPROC) load(userptr, "glUnmapBufferOES");
}
static void glad_gl_load_GL_OES_primitive_bounding_box(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.OES_primitive_bounding_box) return;
    context.primitiveBoundingBoxOES = (PFNGLPRIMITIVEBOUNDINGBOXOESPROC) load(userptr, "glPrimitiveBoundingBoxOES");
}
static void glad_gl_load_GL_OES_sample_shading(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.OES_sample_shading) return;
    context.minSampleShadingOES = (PFNGLMINSAMPLESHADINGOESPROC) load(userptr, "glMinSampleShadingOES");
}
static void glad_gl_load_GL_OES_tessellation_shader(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.OES_tessellation_shader) return;
    context.patchParameteriOES = (PFNGLPATCHPARAMETERIOESPROC) load(userptr, "glPatchParameteriOES");
}
static void glad_gl_load_GL_OES_texture_border_clamp(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.OES_texture_border_clamp) return;
    context.getSamplerParameterIivOES = (PFNGLGETSAMPLERPARAMETERIIVOESPROC) load(userptr, "glGetSamplerParameterIivOES");
    context.getSamplerParameterIuivOES = (PFNGLGETSAMPLERPARAMETERIUIVOESPROC) load(userptr, "glGetSamplerParameterIuivOES");
    context.getTexParameterIivOES = (PFNGLGETTEXPARAMETERIIVOESPROC) load(userptr, "glGetTexParameterIivOES");
    context.getTexParameterIuivOES = (PFNGLGETTEXPARAMETERIUIVOESPROC) load(userptr, "glGetTexParameterIuivOES");
    context.samplerParameterIivOES = (PFNGLSAMPLERPARAMETERIIVOESPROC) load(userptr, "glSamplerParameterIivOES");
    context.samplerParameterIuivOES = (PFNGLSAMPLERPARAMETERIUIVOESPROC) load(userptr, "glSamplerParameterIuivOES");
    context.texParameterIivOES = (PFNGLTEXPARAMETERIIVOESPROC) load(userptr, "glTexParameterIivOES");
    context.texParameterIuivOES = (PFNGLTEXPARAMETERIUIVOESPROC) load(userptr, "glTexParameterIuivOES");
}
static void glad_gl_load_GL_OES_texture_buffer(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.OES_texture_buffer) return;
    context.texBufferOES = (PFNGLTEXBUFFEROESPROC) load(userptr, "glTexBufferOES");
    context.texBufferRangeOES = (PFNGLTEXBUFFERRANGEOESPROC) load(userptr, "glTexBufferRangeOES");
}
static void glad_gl_load_GL_OES_texture_storage_multisample_2d_array(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.OES_texture_storage_multisample_2d_array) return;
    context.texStorage3DMultisampleOES = (PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC) load(userptr, "glTexStorage3DMultisampleOES");
}
static void glad_gl_load_GL_OES_vertex_array_object(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.OES_vertex_array_object) return;
    context.bindVertexArrayOES = (PFNGLBINDVERTEXARRAYOESPROC) load(userptr, "glBindVertexArrayOES");
    context.deleteVertexArraysOES = (PFNGLDELETEVERTEXARRAYSOESPROC) load(userptr, "glDeleteVertexArraysOES");
    context.genVertexArraysOES = (PFNGLGENVERTEXARRAYSOESPROC) load(userptr, "glGenVertexArraysOES");
    context.isVertexArrayOES = (PFNGLISVERTEXARRAYOESPROC) load(userptr, "glIsVertexArrayOES");
}
static void glad_gl_load_GL_OES_viewport_array(GL &context, GLADuserptrloadfunc load, void* userptr) {
    if(!context.OES_viewport_array) return;
    context.depthRangeArrayfvOES = (PFNGLDEPTHRANGEARRAYFVOESPROC) load(userptr, "glDepthRangeArrayfvOES");
    context.depthRangeIndexedfOES = (PFNGLDEPTHRANGEINDEXEDFOESPROC) load(userptr, "glDepthRangeIndexedfOES");
    context.disableiOES = (PFNGLDISABLEIOESPROC) load(userptr, "glDisableiOES");
    context.enableiOES = (PFNGLENABLEIOESPROC) load(userptr, "glEnableiOES");
    context.getFloati_vOES = (PFNGLGETFLOATI_VOESPROC) load(userptr, "glGetFloati_vOES");
    context.isEnablediOES = (PFNGLISENABLEDIOESPROC) load(userptr, "glIsEnablediOES");
    context.scissorArrayvOES = (PFNGLSCISSORARRAYVOESPROC) load(userptr, "glScissorArrayvOES");
    context.scissorIndexedOES = (PFNGLSCISSORINDEXEDOESPROC) load(userptr, "glScissorIndexedOES");
    context.scissorIndexedvOES = (PFNGLSCISSORINDEXEDVOESPROC) load(userptr, "glScissorIndexedvOES");
    context.viewportArrayvOES = (PFNGLVIEWPORTARRAYVOESPROC) load(userptr, "glViewportArrayvOES");
    context.viewportIndexedfOES = (PFNGLVIEWPORTINDEXEDFOESPROC) load(userptr, "glViewportIndexedfOES");
    context.viewportIndexedfvOES = (PFNGLVIEWPORTINDEXEDFVOESPROC) load(userptr, "glViewportIndexedfvOES");
}


static void glad_gl_resolve_aliases(GL &context) {
    if (context.activeTexture == NULL && context.activeTextureARB != NULL) context.activeTexture = (PFNGLACTIVETEXTUREPROC)context.activeTextureARB;
    if (context.activeTextureARB == NULL && context.activeTexture != NULL) context.activeTextureARB = (PFNGLACTIVETEXTUREARBPROC)context.activeTexture;
    if (context.attachObjectARB == NULL && context.attachShader != NULL) context.attachObjectARB = (PFNGLATTACHOBJECTARBPROC)context.attachShader;
    if (context.attachShader == NULL && context.attachObjectARB != NULL) context.attachShader = (PFNGLATTACHSHADERPROC)context.attachObjectARB;
    if (context.beginConditionalRender == NULL && context.beginConditionalRenderNV != NULL) context.beginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC)context.beginConditionalRenderNV;
    if (context.beginConditionalRenderNV == NULL && context.beginConditionalRender != NULL) context.beginConditionalRenderNV = (PFNGLBEGINCONDITIONALRENDERNVPROC)context.beginConditionalRender;
    if (context.beginQuery == NULL && context.beginQueryARB != NULL) context.beginQuery = (PFNGLBEGINQUERYPROC)context.beginQueryARB;
    if (context.beginQueryARB == NULL && context.beginQuery != NULL) context.beginQueryARB = (PFNGLBEGINQUERYARBPROC)context.beginQuery;
    if (context.beginTransformFeedback == NULL && context.beginTransformFeedbackEXT != NULL) context.beginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)context.beginTransformFeedbackEXT;
    if (context.beginTransformFeedback == NULL && context.beginTransformFeedbackNV != NULL) context.beginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)context.beginTransformFeedbackNV;
    if (context.beginTransformFeedbackEXT == NULL && context.beginTransformFeedback != NULL) context.beginTransformFeedbackEXT = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)context.beginTransformFeedback;
    if (context.beginTransformFeedbackEXT == NULL && context.beginTransformFeedbackNV != NULL) context.beginTransformFeedbackEXT = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)context.beginTransformFeedbackNV;
    if (context.beginTransformFeedbackNV == NULL && context.beginTransformFeedback != NULL) context.beginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC)context.beginTransformFeedback;
    if (context.beginTransformFeedbackNV == NULL && context.beginTransformFeedbackEXT != NULL) context.beginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC)context.beginTransformFeedbackEXT;
    if (context.bindAttribLocation == NULL && context.bindAttribLocationARB != NULL) context.bindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)context.bindAttribLocationARB;
    if (context.bindAttribLocationARB == NULL && context.bindAttribLocation != NULL) context.bindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC)context.bindAttribLocation;
    if (context.bindBuffer == NULL && context.bindBufferARB != NULL) context.bindBuffer = (PFNGLBINDBUFFERPROC)context.bindBufferARB;
    if (context.bindBufferARB == NULL && context.bindBuffer != NULL) context.bindBufferARB = (PFNGLBINDBUFFERARBPROC)context.bindBuffer;
    if (context.bindBufferBase == NULL && context.bindBufferBaseEXT != NULL) context.bindBufferBase = (PFNGLBINDBUFFERBASEPROC)context.bindBufferBaseEXT;
    if (context.bindBufferBase == NULL && context.bindBufferBaseNV != NULL) context.bindBufferBase = (PFNGLBINDBUFFERBASEPROC)context.bindBufferBaseNV;
    if (context.bindBufferBaseEXT == NULL && context.bindBufferBase != NULL) context.bindBufferBaseEXT = (PFNGLBINDBUFFERBASEEXTPROC)context.bindBufferBase;
    if (context.bindBufferBaseEXT == NULL && context.bindBufferBaseNV != NULL) context.bindBufferBaseEXT = (PFNGLBINDBUFFERBASEEXTPROC)context.bindBufferBaseNV;
    if (context.bindBufferBaseNV == NULL && context.bindBufferBase != NULL) context.bindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC)context.bindBufferBase;
    if (context.bindBufferBaseNV == NULL && context.bindBufferBaseEXT != NULL) context.bindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC)context.bindBufferBaseEXT;
    if (context.bindBufferOffsetEXT == NULL && context.bindBufferOffsetNV != NULL) context.bindBufferOffsetEXT = (PFNGLBINDBUFFEROFFSETEXTPROC)context.bindBufferOffsetNV;
    if (context.bindBufferOffsetNV == NULL && context.bindBufferOffsetEXT != NULL) context.bindBufferOffsetNV = (PFNGLBINDBUFFEROFFSETNVPROC)context.bindBufferOffsetEXT;
    if (context.bindBufferRange == NULL && context.bindBufferRangeEXT != NULL) context.bindBufferRange = (PFNGLBINDBUFFERRANGEPROC)context.bindBufferRangeEXT;
    if (context.bindBufferRange == NULL && context.bindBufferRangeNV != NULL) context.bindBufferRange = (PFNGLBINDBUFFERRANGEPROC)context.bindBufferRangeNV;
    if (context.bindBufferRangeEXT == NULL && context.bindBufferRange != NULL) context.bindBufferRangeEXT = (PFNGLBINDBUFFERRANGEEXTPROC)context.bindBufferRange;
    if (context.bindBufferRangeEXT == NULL && context.bindBufferRangeNV != NULL) context.bindBufferRangeEXT = (PFNGLBINDBUFFERRANGEEXTPROC)context.bindBufferRangeNV;
    if (context.bindBufferRangeNV == NULL && context.bindBufferRange != NULL) context.bindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC)context.bindBufferRange;
    if (context.bindBufferRangeNV == NULL && context.bindBufferRangeEXT != NULL) context.bindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC)context.bindBufferRangeEXT;
    if (context.bindFragDataLocation == NULL && context.bindFragDataLocationEXT != NULL) context.bindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC)context.bindFragDataLocationEXT;
    if (context.bindFragDataLocationEXT == NULL && context.bindFragDataLocation != NULL) context.bindFragDataLocationEXT = (PFNGLBINDFRAGDATALOCATIONEXTPROC)context.bindFragDataLocation;
    if (context.bindProgramARB == NULL && context.bindProgramNV != NULL) context.bindProgramARB = (PFNGLBINDPROGRAMARBPROC)context.bindProgramNV;
    if (context.bindProgramNV == NULL && context.bindProgramARB != NULL) context.bindProgramNV = (PFNGLBINDPROGRAMNVPROC)context.bindProgramARB;
    if (context.bindTexture == NULL && context.bindTextureEXT != NULL) context.bindTexture = (PFNGLBINDTEXTUREPROC)context.bindTextureEXT;
    if (context.bindTextureEXT == NULL && context.bindTexture != NULL) context.bindTextureEXT = (PFNGLBINDTEXTUREEXTPROC)context.bindTexture;
    if (context.bindVertexArray == NULL && context.bindVertexArrayOES != NULL) context.bindVertexArray = (PFNGLBINDVERTEXARRAYPROC)context.bindVertexArrayOES;
    if (context.bindVertexArrayOES == NULL && context.bindVertexArray != NULL) context.bindVertexArrayOES = (PFNGLBINDVERTEXARRAYOESPROC)context.bindVertexArray;
    if (context.blendBarrier == NULL && context.blendBarrierKHR != NULL) context.blendBarrier = (PFNGLBLENDBARRIERPROC)context.blendBarrierKHR;
    if (context.blendBarrier == NULL && context.blendBarrierNV != NULL) context.blendBarrier = (PFNGLBLENDBARRIERPROC)context.blendBarrierNV;
    if (context.blendBarrierKHR == NULL && context.blendBarrier != NULL) context.blendBarrierKHR = (PFNGLBLENDBARRIERKHRPROC)context.blendBarrier;
    if (context.blendBarrierKHR == NULL && context.blendBarrierNV != NULL) context.blendBarrierKHR = (PFNGLBLENDBARRIERKHRPROC)context.blendBarrierNV;
    if (context.blendBarrierNV == NULL && context.blendBarrier != NULL) context.blendBarrierNV = (PFNGLBLENDBARRIERNVPROC)context.blendBarrier;
    if (context.blendBarrierNV == NULL && context.blendBarrierKHR != NULL) context.blendBarrierNV = (PFNGLBLENDBARRIERNVPROC)context.blendBarrierKHR;
    if (context.blendColor == NULL && context.blendColorEXT != NULL) context.blendColor = (PFNGLBLENDCOLORPROC)context.blendColorEXT;
    if (context.blendColorEXT == NULL && context.blendColor != NULL) context.blendColorEXT = (PFNGLBLENDCOLOREXTPROC)context.blendColor;
    if (context.blendEquation == NULL && context.blendEquationEXT != NULL) context.blendEquation = (PFNGLBLENDEQUATIONPROC)context.blendEquationEXT;
    if (context.blendEquationEXT == NULL && context.blendEquation != NULL) context.blendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC)context.blendEquation;
    if (context.blendEquationi == NULL && context.blendEquationiEXT != NULL) context.blendEquationi = (PFNGLBLENDEQUATIONIPROC)context.blendEquationiEXT;
    if (context.blendEquationi == NULL && context.blendEquationiOES != NULL) context.blendEquationi = (PFNGLBLENDEQUATIONIPROC)context.blendEquationiOES;
    if (context.blendEquationiEXT == NULL && context.blendEquationi != NULL) context.blendEquationiEXT = (PFNGLBLENDEQUATIONIEXTPROC)context.blendEquationi;
    if (context.blendEquationiEXT == NULL && context.blendEquationiOES != NULL) context.blendEquationiEXT = (PFNGLBLENDEQUATIONIEXTPROC)context.blendEquationiOES;
    if (context.blendEquationiOES == NULL && context.blendEquationi != NULL) context.blendEquationiOES = (PFNGLBLENDEQUATIONIOESPROC)context.blendEquationi;
    if (context.blendEquationiOES == NULL && context.blendEquationiEXT != NULL) context.blendEquationiOES = (PFNGLBLENDEQUATIONIOESPROC)context.blendEquationiEXT;
    if (context.blendEquationSeparate == NULL && context.blendEquationSeparateEXT != NULL) context.blendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)context.blendEquationSeparateEXT;
    if (context.blendEquationSeparateEXT == NULL && context.blendEquationSeparate != NULL) context.blendEquationSeparateEXT = (PFNGLBLENDEQUATIONSEPARATEEXTPROC)context.blendEquationSeparate;
    if (context.blendEquationSeparatei == NULL && context.blendEquationSeparateiEXT != NULL) context.blendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)context.blendEquationSeparateiEXT;
    if (context.blendEquationSeparatei == NULL && context.blendEquationSeparateiOES != NULL) context.blendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)context.blendEquationSeparateiOES;
    if (context.blendEquationSeparateiEXT == NULL && context.blendEquationSeparatei != NULL) context.blendEquationSeparateiEXT = (PFNGLBLENDEQUATIONSEPARATEIEXTPROC)context.blendEquationSeparatei;
    if (context.blendEquationSeparateiEXT == NULL && context.blendEquationSeparateiOES != NULL) context.blendEquationSeparateiEXT = (PFNGLBLENDEQUATIONSEPARATEIEXTPROC)context.blendEquationSeparateiOES;
    if (context.blendEquationSeparateiOES == NULL && context.blendEquationSeparatei != NULL) context.blendEquationSeparateiOES = (PFNGLBLENDEQUATIONSEPARATEIOESPROC)context.blendEquationSeparatei;
    if (context.blendEquationSeparateiOES == NULL && context.blendEquationSeparateiEXT != NULL) context.blendEquationSeparateiOES = (PFNGLBLENDEQUATIONSEPARATEIOESPROC)context.blendEquationSeparateiEXT;
    if (context.blendFunci == NULL && context.blendFunciEXT != NULL) context.blendFunci = (PFNGLBLENDFUNCIPROC)context.blendFunciEXT;
    if (context.blendFunci == NULL && context.blendFunciOES != NULL) context.blendFunci = (PFNGLBLENDFUNCIPROC)context.blendFunciOES;
    if (context.blendFunciEXT == NULL && context.blendFunci != NULL) context.blendFunciEXT = (PFNGLBLENDFUNCIEXTPROC)context.blendFunci;
    if (context.blendFunciEXT == NULL && context.blendFunciOES != NULL) context.blendFunciEXT = (PFNGLBLENDFUNCIEXTPROC)context.blendFunciOES;
    if (context.blendFunciOES == NULL && context.blendFunci != NULL) context.blendFunciOES = (PFNGLBLENDFUNCIOESPROC)context.blendFunci;
    if (context.blendFunciOES == NULL && context.blendFunciEXT != NULL) context.blendFunciOES = (PFNGLBLENDFUNCIOESPROC)context.blendFunciEXT;
    if (context.blendFuncSeparate == NULL && context.blendFuncSeparateEXT != NULL) context.blendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)context.blendFuncSeparateEXT;
    if (context.blendFuncSeparate == NULL && context.blendFuncSeparateINGR != NULL) context.blendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)context.blendFuncSeparateINGR;
    if (context.blendFuncSeparateEXT == NULL && context.blendFuncSeparate != NULL) context.blendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC)context.blendFuncSeparate;
    if (context.blendFuncSeparateEXT == NULL && context.blendFuncSeparateINGR != NULL) context.blendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC)context.blendFuncSeparateINGR;
    if (context.blendFuncSeparatei == NULL && context.blendFuncSeparateiEXT != NULL) context.blendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)context.blendFuncSeparateiEXT;
    if (context.blendFuncSeparatei == NULL && context.blendFuncSeparateiOES != NULL) context.blendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)context.blendFuncSeparateiOES;
    if (context.blendFuncSeparateiEXT == NULL && context.blendFuncSeparatei != NULL) context.blendFuncSeparateiEXT = (PFNGLBLENDFUNCSEPARATEIEXTPROC)context.blendFuncSeparatei;
    if (context.blendFuncSeparateiEXT == NULL && context.blendFuncSeparateiOES != NULL) context.blendFuncSeparateiEXT = (PFNGLBLENDFUNCSEPARATEIEXTPROC)context.blendFuncSeparateiOES;
    if (context.blendFuncSeparateINGR == NULL && context.blendFuncSeparate != NULL) context.blendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC)context.blendFuncSeparate;
    if (context.blendFuncSeparateINGR == NULL && context.blendFuncSeparateEXT != NULL) context.blendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC)context.blendFuncSeparateEXT;
    if (context.blendFuncSeparateiOES == NULL && context.blendFuncSeparatei != NULL) context.blendFuncSeparateiOES = (PFNGLBLENDFUNCSEPARATEIOESPROC)context.blendFuncSeparatei;
    if (context.blendFuncSeparateiOES == NULL && context.blendFuncSeparateiEXT != NULL) context.blendFuncSeparateiOES = (PFNGLBLENDFUNCSEPARATEIOESPROC)context.blendFuncSeparateiEXT;
    if (context.blitFramebuffer == NULL && context.blitFramebufferEXT != NULL) context.blitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)context.blitFramebufferEXT;
    if (context.blitFramebuffer == NULL && context.blitFramebufferNV != NULL) context.blitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)context.blitFramebufferNV;
    if (context.blitFramebufferEXT == NULL && context.blitFramebuffer != NULL) context.blitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC)context.blitFramebuffer;
    if (context.blitFramebufferEXT == NULL && context.blitFramebufferNV != NULL) context.blitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC)context.blitFramebufferNV;
    if (context.blitFramebufferNV == NULL && context.blitFramebuffer != NULL) context.blitFramebufferNV = (PFNGLBLITFRAMEBUFFERNVPROC)context.blitFramebuffer;
    if (context.blitFramebufferNV == NULL && context.blitFramebufferEXT != NULL) context.blitFramebufferNV = (PFNGLBLITFRAMEBUFFERNVPROC)context.blitFramebufferEXT;
    if (context.bufferData == NULL && context.bufferDataARB != NULL) context.bufferData = (PFNGLBUFFERDATAPROC)context.bufferDataARB;
    if (context.bufferDataARB == NULL && context.bufferData != NULL) context.bufferDataARB = (PFNGLBUFFERDATAARBPROC)context.bufferData;
    if (context.bufferSubData == NULL && context.bufferSubDataARB != NULL) context.bufferSubData = (PFNGLBUFFERSUBDATAPROC)context.bufferSubDataARB;
    if (context.bufferSubDataARB == NULL && context.bufferSubData != NULL) context.bufferSubDataARB = (PFNGLBUFFERSUBDATAARBPROC)context.bufferSubData;
    if (context.checkFramebufferStatus == NULL && context.checkFramebufferStatusEXT != NULL) context.checkFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)context.checkFramebufferStatusEXT;
    if (context.checkFramebufferStatusEXT == NULL && context.checkFramebufferStatus != NULL) context.checkFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)context.checkFramebufferStatus;
    if (context.clampColor == NULL && context.clampColorARB != NULL) context.clampColor = (PFNGLCLAMPCOLORPROC)context.clampColorARB;
    if (context.clampColorARB == NULL && context.clampColor != NULL) context.clampColorARB = (PFNGLCLAMPCOLORARBPROC)context.clampColor;
    if (context.clientWaitSync == NULL && context.clientWaitSyncAPPLE != NULL) context.clientWaitSync = (PFNGLCLIENTWAITSYNCPROC)context.clientWaitSyncAPPLE;
    if (context.clientWaitSyncAPPLE == NULL && context.clientWaitSync != NULL) context.clientWaitSyncAPPLE = (PFNGLCLIENTWAITSYNCAPPLEPROC)context.clientWaitSync;
    if (context.colorMaski == NULL && context.colorMaskIndexedEXT != NULL) context.colorMaski = (PFNGLCOLORMASKIPROC)context.colorMaskIndexedEXT;
    if (context.colorMaski == NULL && context.colorMaskiEXT != NULL) context.colorMaski = (PFNGLCOLORMASKIPROC)context.colorMaskiEXT;
    if (context.colorMaski == NULL && context.colorMaskiOES != NULL) context.colorMaski = (PFNGLCOLORMASKIPROC)context.colorMaskiOES;
    if (context.colorMaskiEXT == NULL && context.colorMaskIndexedEXT != NULL) context.colorMaskiEXT = (PFNGLCOLORMASKIEXTPROC)context.colorMaskIndexedEXT;
    if (context.colorMaskiEXT == NULL && context.colorMaski != NULL) context.colorMaskiEXT = (PFNGLCOLORMASKIEXTPROC)context.colorMaski;
    if (context.colorMaskiEXT == NULL && context.colorMaskiOES != NULL) context.colorMaskiEXT = (PFNGLCOLORMASKIEXTPROC)context.colorMaskiOES;
    if (context.colorMaskIndexedEXT == NULL && context.colorMaski != NULL) context.colorMaskIndexedEXT = (PFNGLCOLORMASKINDEXEDEXTPROC)context.colorMaski;
    if (context.colorMaskIndexedEXT == NULL && context.colorMaskiEXT != NULL) context.colorMaskIndexedEXT = (PFNGLCOLORMASKINDEXEDEXTPROC)context.colorMaskiEXT;
    if (context.colorMaskIndexedEXT == NULL && context.colorMaskiOES != NULL) context.colorMaskIndexedEXT = (PFNGLCOLORMASKINDEXEDEXTPROC)context.colorMaskiOES;
    if (context.colorMaskiOES == NULL && context.colorMaskIndexedEXT != NULL) context.colorMaskiOES = (PFNGLCOLORMASKIOESPROC)context.colorMaskIndexedEXT;
    if (context.colorMaskiOES == NULL && context.colorMaski != NULL) context.colorMaskiOES = (PFNGLCOLORMASKIOESPROC)context.colorMaski;
    if (context.colorMaskiOES == NULL && context.colorMaskiEXT != NULL) context.colorMaskiOES = (PFNGLCOLORMASKIOESPROC)context.colorMaskiEXT;
    if (context.compileShader == NULL && context.compileShaderARB != NULL) context.compileShader = (PFNGLCOMPILESHADERPROC)context.compileShaderARB;
    if (context.compileShaderARB == NULL && context.compileShader != NULL) context.compileShaderARB = (PFNGLCOMPILESHADERARBPROC)context.compileShader;
    if (context.compressedTexImage1D == NULL && context.compressedTexImage1DARB != NULL) context.compressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)context.compressedTexImage1DARB;
    if (context.compressedTexImage1DARB == NULL && context.compressedTexImage1D != NULL) context.compressedTexImage1DARB = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)context.compressedTexImage1D;
    if (context.compressedTexImage2D == NULL && context.compressedTexImage2DARB != NULL) context.compressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)context.compressedTexImage2DARB;
    if (context.compressedTexImage2DARB == NULL && context.compressedTexImage2D != NULL) context.compressedTexImage2DARB = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)context.compressedTexImage2D;
    if (context.compressedTexImage3D == NULL && context.compressedTexImage3DARB != NULL) context.compressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)context.compressedTexImage3DARB;
    if (context.compressedTexImage3DARB == NULL && context.compressedTexImage3D != NULL) context.compressedTexImage3DARB = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)context.compressedTexImage3D;
    if (context.compressedTexSubImage1D == NULL && context.compressedTexSubImage1DARB != NULL) context.compressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)context.compressedTexSubImage1DARB;
    if (context.compressedTexSubImage1DARB == NULL && context.compressedTexSubImage1D != NULL) context.compressedTexSubImage1DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)context.compressedTexSubImage1D;
    if (context.compressedTexSubImage2D == NULL && context.compressedTexSubImage2DARB != NULL) context.compressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)context.compressedTexSubImage2DARB;
    if (context.compressedTexSubImage2DARB == NULL && context.compressedTexSubImage2D != NULL) context.compressedTexSubImage2DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)context.compressedTexSubImage2D;
    if (context.compressedTexSubImage3D == NULL && context.compressedTexSubImage3DARB != NULL) context.compressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)context.compressedTexSubImage3DARB;
    if (context.compressedTexSubImage3DARB == NULL && context.compressedTexSubImage3D != NULL) context.compressedTexSubImage3DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)context.compressedTexSubImage3D;
    if (context.copyBufferSubData == NULL && context.copyBufferSubDataNV != NULL) context.copyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC)context.copyBufferSubDataNV;
    if (context.copyBufferSubDataNV == NULL && context.copyBufferSubData != NULL) context.copyBufferSubDataNV = (PFNGLCOPYBUFFERSUBDATANVPROC)context.copyBufferSubData;
    if (context.copyImageSubData == NULL && context.copyImageSubDataEXT != NULL) context.copyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC)context.copyImageSubDataEXT;
    if (context.copyImageSubData == NULL && context.copyImageSubDataOES != NULL) context.copyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC)context.copyImageSubDataOES;
    if (context.copyImageSubDataEXT == NULL && context.copyImageSubData != NULL) context.copyImageSubDataEXT = (PFNGLCOPYIMAGESUBDATAEXTPROC)context.copyImageSubData;
    if (context.copyImageSubDataEXT == NULL && context.copyImageSubDataOES != NULL) context.copyImageSubDataEXT = (PFNGLCOPYIMAGESUBDATAEXTPROC)context.copyImageSubDataOES;
    if (context.copyImageSubDataOES == NULL && context.copyImageSubData != NULL) context.copyImageSubDataOES = (PFNGLCOPYIMAGESUBDATAOESPROC)context.copyImageSubData;
    if (context.copyImageSubDataOES == NULL && context.copyImageSubDataEXT != NULL) context.copyImageSubDataOES = (PFNGLCOPYIMAGESUBDATAOESPROC)context.copyImageSubDataEXT;
    if (context.copyTexImage1D == NULL && context.copyTexImage1DEXT != NULL) context.copyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC)context.copyTexImage1DEXT;
    if (context.copyTexImage1DEXT == NULL && context.copyTexImage1D != NULL) context.copyTexImage1DEXT = (PFNGLCOPYTEXIMAGE1DEXTPROC)context.copyTexImage1D;
    if (context.copyTexImage2D == NULL && context.copyTexImage2DEXT != NULL) context.copyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC)context.copyTexImage2DEXT;
    if (context.copyTexImage2DEXT == NULL && context.copyTexImage2D != NULL) context.copyTexImage2DEXT = (PFNGLCOPYTEXIMAGE2DEXTPROC)context.copyTexImage2D;
    if (context.copyTexSubImage1D == NULL && context.copyTexSubImage1DEXT != NULL) context.copyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC)context.copyTexSubImage1DEXT;
    if (context.copyTexSubImage1DEXT == NULL && context.copyTexSubImage1D != NULL) context.copyTexSubImage1DEXT = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC)context.copyTexSubImage1D;
    if (context.copyTexSubImage2D == NULL && context.copyTexSubImage2DEXT != NULL) context.copyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC)context.copyTexSubImage2DEXT;
    if (context.copyTexSubImage2DEXT == NULL && context.copyTexSubImage2D != NULL) context.copyTexSubImage2DEXT = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC)context.copyTexSubImage2D;
    if (context.copyTexSubImage3D == NULL && context.copyTexSubImage3DEXT != NULL) context.copyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)context.copyTexSubImage3DEXT;
    if (context.copyTexSubImage3DEXT == NULL && context.copyTexSubImage3D != NULL) context.copyTexSubImage3DEXT = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC)context.copyTexSubImage3D;
    if (context.createProgram == NULL && context.createProgramObjectARB != NULL) context.createProgram = (PFNGLCREATEPROGRAMPROC)context.createProgramObjectARB;
    if (context.createProgramObjectARB == NULL && context.createProgram != NULL) context.createProgramObjectARB = (PFNGLCREATEPROGRAMOBJECTARBPROC)context.createProgram;
    if (context.createShader == NULL && context.createShaderObjectARB != NULL) context.createShader = (PFNGLCREATESHADERPROC)context.createShaderObjectARB;
    if (context.createShaderObjectARB == NULL && context.createShader != NULL) context.createShaderObjectARB = (PFNGLCREATESHADEROBJECTARBPROC)context.createShader;
    if (context.debugMessageCallback == NULL && context.debugMessageCallbackKHR != NULL) context.debugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC)context.debugMessageCallbackKHR;
    if (context.debugMessageCallbackKHR == NULL && context.debugMessageCallback != NULL) context.debugMessageCallbackKHR = (PFNGLDEBUGMESSAGECALLBACKKHRPROC)context.debugMessageCallback;
    if (context.debugMessageControl == NULL && context.debugMessageControlKHR != NULL) context.debugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC)context.debugMessageControlKHR;
    if (context.debugMessageControlKHR == NULL && context.debugMessageControl != NULL) context.debugMessageControlKHR = (PFNGLDEBUGMESSAGECONTROLKHRPROC)context.debugMessageControl;
    if (context.debugMessageInsert == NULL && context.debugMessageInsertKHR != NULL) context.debugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC)context.debugMessageInsertKHR;
    if (context.debugMessageInsertKHR == NULL && context.debugMessageInsert != NULL) context.debugMessageInsertKHR = (PFNGLDEBUGMESSAGEINSERTKHRPROC)context.debugMessageInsert;
    if (context.deleteBuffers == NULL && context.deleteBuffersARB != NULL) context.deleteBuffers = (PFNGLDELETEBUFFERSPROC)context.deleteBuffersARB;
    if (context.deleteBuffersARB == NULL && context.deleteBuffers != NULL) context.deleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC)context.deleteBuffers;
    if (context.deleteFramebuffers == NULL && context.deleteFramebuffersEXT != NULL) context.deleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)context.deleteFramebuffersEXT;
    if (context.deleteFramebuffersEXT == NULL && context.deleteFramebuffers != NULL) context.deleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC)context.deleteFramebuffers;
    if (context.deleteProgramsARB == NULL && context.deleteProgramsNV != NULL) context.deleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC)context.deleteProgramsNV;
    if (context.deleteProgramsNV == NULL && context.deleteProgramsARB != NULL) context.deleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC)context.deleteProgramsARB;
    if (context.deleteQueries == NULL && context.deleteQueriesARB != NULL) context.deleteQueries = (PFNGLDELETEQUERIESPROC)context.deleteQueriesARB;
    if (context.deleteQueriesARB == NULL && context.deleteQueries != NULL) context.deleteQueriesARB = (PFNGLDELETEQUERIESARBPROC)context.deleteQueries;
    if (context.deleteRenderbuffers == NULL && context.deleteRenderbuffersEXT != NULL) context.deleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)context.deleteRenderbuffersEXT;
    if (context.deleteRenderbuffersEXT == NULL && context.deleteRenderbuffers != NULL) context.deleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC)context.deleteRenderbuffers;
    if (context.deleteSync == NULL && context.deleteSyncAPPLE != NULL) context.deleteSync = (PFNGLDELETESYNCPROC)context.deleteSyncAPPLE;
    if (context.deleteSyncAPPLE == NULL && context.deleteSync != NULL) context.deleteSyncAPPLE = (PFNGLDELETESYNCAPPLEPROC)context.deleteSync;
    if (context.deleteVertexArrays == NULL && context.deleteVertexArraysAPPLE != NULL) context.deleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC)context.deleteVertexArraysAPPLE;
    if (context.deleteVertexArrays == NULL && context.deleteVertexArraysOES != NULL) context.deleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC)context.deleteVertexArraysOES;
    if (context.deleteVertexArraysAPPLE == NULL && context.deleteVertexArrays != NULL) context.deleteVertexArraysAPPLE = (PFNGLDELETEVERTEXARRAYSAPPLEPROC)context.deleteVertexArrays;
    if (context.deleteVertexArraysAPPLE == NULL && context.deleteVertexArraysOES != NULL) context.deleteVertexArraysAPPLE = (PFNGLDELETEVERTEXARRAYSAPPLEPROC)context.deleteVertexArraysOES;
    if (context.deleteVertexArraysOES == NULL && context.deleteVertexArrays != NULL) context.deleteVertexArraysOES = (PFNGLDELETEVERTEXARRAYSOESPROC)context.deleteVertexArrays;
    if (context.deleteVertexArraysOES == NULL && context.deleteVertexArraysAPPLE != NULL) context.deleteVertexArraysOES = (PFNGLDELETEVERTEXARRAYSOESPROC)context.deleteVertexArraysAPPLE;
    if (context.detachObjectARB == NULL && context.detachShader != NULL) context.detachObjectARB = (PFNGLDETACHOBJECTARBPROC)context.detachShader;
    if (context.detachShader == NULL && context.detachObjectARB != NULL) context.detachShader = (PFNGLDETACHSHADERPROC)context.detachObjectARB;
    if (context.disablei == NULL && context.disableIndexedEXT != NULL) context.disablei = (PFNGLDISABLEIPROC)context.disableIndexedEXT;
    if (context.disablei == NULL && context.disableiEXT != NULL) context.disablei = (PFNGLDISABLEIPROC)context.disableiEXT;
    if (context.disablei == NULL && context.disableiNV != NULL) context.disablei = (PFNGLDISABLEIPROC)context.disableiNV;
    if (context.disablei == NULL && context.disableiOES != NULL) context.disablei = (PFNGLDISABLEIPROC)context.disableiOES;
    if (context.disableiEXT == NULL && context.disableIndexedEXT != NULL) context.disableiEXT = (PFNGLDISABLEIEXTPROC)context.disableIndexedEXT;
    if (context.disableiEXT == NULL && context.disablei != NULL) context.disableiEXT = (PFNGLDISABLEIEXTPROC)context.disablei;
    if (context.disableiEXT == NULL && context.disableiNV != NULL) context.disableiEXT = (PFNGLDISABLEIEXTPROC)context.disableiNV;
    if (context.disableiEXT == NULL && context.disableiOES != NULL) context.disableiEXT = (PFNGLDISABLEIEXTPROC)context.disableiOES;
    if (context.disableIndexedEXT == NULL && context.disablei != NULL) context.disableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC)context.disablei;
    if (context.disableIndexedEXT == NULL && context.disableiEXT != NULL) context.disableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC)context.disableiEXT;
    if (context.disableIndexedEXT == NULL && context.disableiNV != NULL) context.disableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC)context.disableiNV;
    if (context.disableIndexedEXT == NULL && context.disableiOES != NULL) context.disableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC)context.disableiOES;
    if (context.disableiNV == NULL && context.disableIndexedEXT != NULL) context.disableiNV = (PFNGLDISABLEINVPROC)context.disableIndexedEXT;
    if (context.disableiNV == NULL && context.disablei != NULL) context.disableiNV = (PFNGLDISABLEINVPROC)context.disablei;
    if (context.disableiNV == NULL && context.disableiEXT != NULL) context.disableiNV = (PFNGLDISABLEINVPROC)context.disableiEXT;
    if (context.disableiNV == NULL && context.disableiOES != NULL) context.disableiNV = (PFNGLDISABLEINVPROC)context.disableiOES;
    if (context.disableiOES == NULL && context.disableIndexedEXT != NULL) context.disableiOES = (PFNGLDISABLEIOESPROC)context.disableIndexedEXT;
    if (context.disableiOES == NULL && context.disablei != NULL) context.disableiOES = (PFNGLDISABLEIOESPROC)context.disablei;
    if (context.disableiOES == NULL && context.disableiEXT != NULL) context.disableiOES = (PFNGLDISABLEIOESPROC)context.disableiEXT;
    if (context.disableiOES == NULL && context.disableiNV != NULL) context.disableiOES = (PFNGLDISABLEIOESPROC)context.disableiNV;
    if (context.disableVertexAttribArray == NULL && context.disableVertexAttribArrayARB != NULL) context.disableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)context.disableVertexAttribArrayARB;
    if (context.disableVertexAttribArrayARB == NULL && context.disableVertexAttribArray != NULL) context.disableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)context.disableVertexAttribArray;
    if (context.drawArrays == NULL && context.drawArraysEXT != NULL) context.drawArrays = (PFNGLDRAWARRAYSPROC)context.drawArraysEXT;
    if (context.drawArraysEXT == NULL && context.drawArrays != NULL) context.drawArraysEXT = (PFNGLDRAWARRAYSEXTPROC)context.drawArrays;
    if (context.drawArraysInstanced == NULL && context.drawArraysInstancedANGLE != NULL) context.drawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)context.drawArraysInstancedANGLE;
    if (context.drawArraysInstanced == NULL && context.drawArraysInstancedARB != NULL) context.drawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)context.drawArraysInstancedARB;
    if (context.drawArraysInstanced == NULL && context.drawArraysInstancedEXT != NULL) context.drawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)context.drawArraysInstancedEXT;
    if (context.drawArraysInstanced == NULL && context.drawArraysInstancedNV != NULL) context.drawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)context.drawArraysInstancedNV;
    if (context.drawArraysInstancedANGLE == NULL && context.drawArraysInstanced != NULL) context.drawArraysInstancedANGLE = (PFNGLDRAWARRAYSINSTANCEDANGLEPROC)context.drawArraysInstanced;
    if (context.drawArraysInstancedANGLE == NULL && context.drawArraysInstancedARB != NULL) context.drawArraysInstancedANGLE = (PFNGLDRAWARRAYSINSTANCEDANGLEPROC)context.drawArraysInstancedARB;
    if (context.drawArraysInstancedANGLE == NULL && context.drawArraysInstancedEXT != NULL) context.drawArraysInstancedANGLE = (PFNGLDRAWARRAYSINSTANCEDANGLEPROC)context.drawArraysInstancedEXT;
    if (context.drawArraysInstancedANGLE == NULL && context.drawArraysInstancedNV != NULL) context.drawArraysInstancedANGLE = (PFNGLDRAWARRAYSINSTANCEDANGLEPROC)context.drawArraysInstancedNV;
    if (context.drawArraysInstancedARB == NULL && context.drawArraysInstanced != NULL) context.drawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC)context.drawArraysInstanced;
    if (context.drawArraysInstancedARB == NULL && context.drawArraysInstancedANGLE != NULL) context.drawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC)context.drawArraysInstancedANGLE;
    if (context.drawArraysInstancedARB == NULL && context.drawArraysInstancedEXT != NULL) context.drawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC)context.drawArraysInstancedEXT;
    if (context.drawArraysInstancedARB == NULL && context.drawArraysInstancedNV != NULL) context.drawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC)context.drawArraysInstancedNV;
    if (context.drawArraysInstancedEXT == NULL && context.drawArraysInstanced != NULL) context.drawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)context.drawArraysInstanced;
    if (context.drawArraysInstancedEXT == NULL && context.drawArraysInstancedANGLE != NULL) context.drawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)context.drawArraysInstancedANGLE;
    if (context.drawArraysInstancedEXT == NULL && context.drawArraysInstancedARB != NULL) context.drawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)context.drawArraysInstancedARB;
    if (context.drawArraysInstancedEXT == NULL && context.drawArraysInstancedNV != NULL) context.drawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)context.drawArraysInstancedNV;
    if (context.drawArraysInstancedNV == NULL && context.drawArraysInstanced != NULL) context.drawArraysInstancedNV = (PFNGLDRAWARRAYSINSTANCEDNVPROC)context.drawArraysInstanced;
    if (context.drawArraysInstancedNV == NULL && context.drawArraysInstancedANGLE != NULL) context.drawArraysInstancedNV = (PFNGLDRAWARRAYSINSTANCEDNVPROC)context.drawArraysInstancedANGLE;
    if (context.drawArraysInstancedNV == NULL && context.drawArraysInstancedARB != NULL) context.drawArraysInstancedNV = (PFNGLDRAWARRAYSINSTANCEDNVPROC)context.drawArraysInstancedARB;
    if (context.drawArraysInstancedNV == NULL && context.drawArraysInstancedEXT != NULL) context.drawArraysInstancedNV = (PFNGLDRAWARRAYSINSTANCEDNVPROC)context.drawArraysInstancedEXT;
    if (context.drawBuffers == NULL && context.drawBuffersARB != NULL) context.drawBuffers = (PFNGLDRAWBUFFERSPROC)context.drawBuffersARB;
    if (context.drawBuffers == NULL && context.drawBuffersATI != NULL) context.drawBuffers = (PFNGLDRAWBUFFERSPROC)context.drawBuffersATI;
    if (context.drawBuffers == NULL && context.drawBuffersEXT != NULL) context.drawBuffers = (PFNGLDRAWBUFFERSPROC)context.drawBuffersEXT;
    if (context.drawBuffersARB == NULL && context.drawBuffers != NULL) context.drawBuffersARB = (PFNGLDRAWBUFFERSARBPROC)context.drawBuffers;
    if (context.drawBuffersARB == NULL && context.drawBuffersATI != NULL) context.drawBuffersARB = (PFNGLDRAWBUFFERSARBPROC)context.drawBuffersATI;
    if (context.drawBuffersARB == NULL && context.drawBuffersEXT != NULL) context.drawBuffersARB = (PFNGLDRAWBUFFERSARBPROC)context.drawBuffersEXT;
    if (context.drawBuffersATI == NULL && context.drawBuffers != NULL) context.drawBuffersATI = (PFNGLDRAWBUFFERSATIPROC)context.drawBuffers;
    if (context.drawBuffersATI == NULL && context.drawBuffersARB != NULL) context.drawBuffersATI = (PFNGLDRAWBUFFERSATIPROC)context.drawBuffersARB;
    if (context.drawBuffersATI == NULL && context.drawBuffersEXT != NULL) context.drawBuffersATI = (PFNGLDRAWBUFFERSATIPROC)context.drawBuffersEXT;
    if (context.drawBuffersEXT == NULL && context.drawBuffers != NULL) context.drawBuffersEXT = (PFNGLDRAWBUFFERSEXTPROC)context.drawBuffers;
    if (context.drawBuffersEXT == NULL && context.drawBuffersARB != NULL) context.drawBuffersEXT = (PFNGLDRAWBUFFERSEXTPROC)context.drawBuffersARB;
    if (context.drawBuffersEXT == NULL && context.drawBuffersATI != NULL) context.drawBuffersEXT = (PFNGLDRAWBUFFERSEXTPROC)context.drawBuffersATI;
    if (context.drawElementsBaseVertex == NULL && context.drawElementsBaseVertexEXT != NULL) context.drawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC)context.drawElementsBaseVertexEXT;
    if (context.drawElementsBaseVertex == NULL && context.drawElementsBaseVertexOES != NULL) context.drawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC)context.drawElementsBaseVertexOES;
    if (context.drawElementsBaseVertexEXT == NULL && context.drawElementsBaseVertex != NULL) context.drawElementsBaseVertexEXT = (PFNGLDRAWELEMENTSBASEVERTEXEXTPROC)context.drawElementsBaseVertex;
    if (context.drawElementsBaseVertexEXT == NULL && context.drawElementsBaseVertexOES != NULL) context.drawElementsBaseVertexEXT = (PFNGLDRAWELEMENTSBASEVERTEXEXTPROC)context.drawElementsBaseVertexOES;
    if (context.drawElementsBaseVertexOES == NULL && context.drawElementsBaseVertex != NULL) context.drawElementsBaseVertexOES = (PFNGLDRAWELEMENTSBASEVERTEXOESPROC)context.drawElementsBaseVertex;
    if (context.drawElementsBaseVertexOES == NULL && context.drawElementsBaseVertexEXT != NULL) context.drawElementsBaseVertexOES = (PFNGLDRAWELEMENTSBASEVERTEXOESPROC)context.drawElementsBaseVertexEXT;
    if (context.drawElementsInstanced == NULL && context.drawElementsInstancedANGLE != NULL) context.drawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)context.drawElementsInstancedANGLE;
    if (context.drawElementsInstanced == NULL && context.drawElementsInstancedARB != NULL) context.drawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)context.drawElementsInstancedARB;
    if (context.drawElementsInstanced == NULL && context.drawElementsInstancedEXT != NULL) context.drawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)context.drawElementsInstancedEXT;
    if (context.drawElementsInstanced == NULL && context.drawElementsInstancedNV != NULL) context.drawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)context.drawElementsInstancedNV;
    if (context.drawElementsInstancedANGLE == NULL && context.drawElementsInstanced != NULL) context.drawElementsInstancedANGLE = (PFNGLDRAWELEMENTSINSTANCEDANGLEPROC)context.drawElementsInstanced;
    if (context.drawElementsInstancedANGLE == NULL && context.drawElementsInstancedARB != NULL) context.drawElementsInstancedANGLE = (PFNGLDRAWELEMENTSINSTANCEDANGLEPROC)context.drawElementsInstancedARB;
    if (context.drawElementsInstancedANGLE == NULL && context.drawElementsInstancedEXT != NULL) context.drawElementsInstancedANGLE = (PFNGLDRAWELEMENTSINSTANCEDANGLEPROC)context.drawElementsInstancedEXT;
    if (context.drawElementsInstancedANGLE == NULL && context.drawElementsInstancedNV != NULL) context.drawElementsInstancedANGLE = (PFNGLDRAWELEMENTSINSTANCEDANGLEPROC)context.drawElementsInstancedNV;
    if (context.drawElementsInstancedARB == NULL && context.drawElementsInstanced != NULL) context.drawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC)context.drawElementsInstanced;
    if (context.drawElementsInstancedARB == NULL && context.drawElementsInstancedANGLE != NULL) context.drawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC)context.drawElementsInstancedANGLE;
    if (context.drawElementsInstancedARB == NULL && context.drawElementsInstancedEXT != NULL) context.drawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC)context.drawElementsInstancedEXT;
    if (context.drawElementsInstancedARB == NULL && context.drawElementsInstancedNV != NULL) context.drawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC)context.drawElementsInstancedNV;
    if (context.drawElementsInstancedBaseVertex == NULL && context.drawElementsInstancedBaseVertexEXT != NULL) context.drawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)context.drawElementsInstancedBaseVertexEXT;
    if (context.drawElementsInstancedBaseVertex == NULL && context.drawElementsInstancedBaseVertexOES != NULL) context.drawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)context.drawElementsInstancedBaseVertexOES;
    if (context.drawElementsInstancedBaseVertexEXT == NULL && context.drawElementsInstancedBaseVertex != NULL) context.drawElementsInstancedBaseVertexEXT = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC)context.drawElementsInstancedBaseVertex;
    if (context.drawElementsInstancedBaseVertexEXT == NULL && context.drawElementsInstancedBaseVertexOES != NULL) context.drawElementsInstancedBaseVertexEXT = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC)context.drawElementsInstancedBaseVertexOES;
    if (context.drawElementsInstancedBaseVertexOES == NULL && context.drawElementsInstancedBaseVertex != NULL) context.drawElementsInstancedBaseVertexOES = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC)context.drawElementsInstancedBaseVertex;
    if (context.drawElementsInstancedBaseVertexOES == NULL && context.drawElementsInstancedBaseVertexEXT != NULL) context.drawElementsInstancedBaseVertexOES = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC)context.drawElementsInstancedBaseVertexEXT;
    if (context.drawElementsInstancedEXT == NULL && context.drawElementsInstanced != NULL) context.drawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)context.drawElementsInstanced;
    if (context.drawElementsInstancedEXT == NULL && context.drawElementsInstancedANGLE != NULL) context.drawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)context.drawElementsInstancedANGLE;
    if (context.drawElementsInstancedEXT == NULL && context.drawElementsInstancedARB != NULL) context.drawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)context.drawElementsInstancedARB;
    if (context.drawElementsInstancedEXT == NULL && context.drawElementsInstancedNV != NULL) context.drawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)context.drawElementsInstancedNV;
    if (context.drawElementsInstancedNV == NULL && context.drawElementsInstanced != NULL) context.drawElementsInstancedNV = (PFNGLDRAWELEMENTSINSTANCEDNVPROC)context.drawElementsInstanced;
    if (context.drawElementsInstancedNV == NULL && context.drawElementsInstancedANGLE != NULL) context.drawElementsInstancedNV = (PFNGLDRAWELEMENTSINSTANCEDNVPROC)context.drawElementsInstancedANGLE;
    if (context.drawElementsInstancedNV == NULL && context.drawElementsInstancedARB != NULL) context.drawElementsInstancedNV = (PFNGLDRAWELEMENTSINSTANCEDNVPROC)context.drawElementsInstancedARB;
    if (context.drawElementsInstancedNV == NULL && context.drawElementsInstancedEXT != NULL) context.drawElementsInstancedNV = (PFNGLDRAWELEMENTSINSTANCEDNVPROC)context.drawElementsInstancedEXT;
    if (context.drawRangeElements == NULL && context.drawRangeElementsEXT != NULL) context.drawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)context.drawRangeElementsEXT;
    if (context.drawRangeElementsBaseVertex == NULL && context.drawRangeElementsBaseVertexEXT != NULL) context.drawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)context.drawRangeElementsBaseVertexEXT;
    if (context.drawRangeElementsBaseVertex == NULL && context.drawRangeElementsBaseVertexOES != NULL) context.drawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)context.drawRangeElementsBaseVertexOES;
    if (context.drawRangeElementsBaseVertexEXT == NULL && context.drawRangeElementsBaseVertex != NULL) context.drawRangeElementsBaseVertexEXT = (PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC)context.drawRangeElementsBaseVertex;
    if (context.drawRangeElementsBaseVertexEXT == NULL && context.drawRangeElementsBaseVertexOES != NULL) context.drawRangeElementsBaseVertexEXT = (PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC)context.drawRangeElementsBaseVertexOES;
    if (context.drawRangeElementsBaseVertexOES == NULL && context.drawRangeElementsBaseVertex != NULL) context.drawRangeElementsBaseVertexOES = (PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC)context.drawRangeElementsBaseVertex;
    if (context.drawRangeElementsBaseVertexOES == NULL && context.drawRangeElementsBaseVertexEXT != NULL) context.drawRangeElementsBaseVertexOES = (PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC)context.drawRangeElementsBaseVertexEXT;
    if (context.drawRangeElementsEXT == NULL && context.drawRangeElements != NULL) context.drawRangeElementsEXT = (PFNGLDRAWRANGEELEMENTSEXTPROC)context.drawRangeElements;
    if (context.enablei == NULL && context.enableIndexedEXT != NULL) context.enablei = (PFNGLENABLEIPROC)context.enableIndexedEXT;
    if (context.enablei == NULL && context.enableiEXT != NULL) context.enablei = (PFNGLENABLEIPROC)context.enableiEXT;
    if (context.enablei == NULL && context.enableiNV != NULL) context.enablei = (PFNGLENABLEIPROC)context.enableiNV;
    if (context.enablei == NULL && context.enableiOES != NULL) context.enablei = (PFNGLENABLEIPROC)context.enableiOES;
    if (context.enableiEXT == NULL && context.enableIndexedEXT != NULL) context.enableiEXT = (PFNGLENABLEIEXTPROC)context.enableIndexedEXT;
    if (context.enableiEXT == NULL && context.enablei != NULL) context.enableiEXT = (PFNGLENABLEIEXTPROC)context.enablei;
    if (context.enableiEXT == NULL && context.enableiNV != NULL) context.enableiEXT = (PFNGLENABLEIEXTPROC)context.enableiNV;
    if (context.enableiEXT == NULL && context.enableiOES != NULL) context.enableiEXT = (PFNGLENABLEIEXTPROC)context.enableiOES;
    if (context.enableIndexedEXT == NULL && context.enablei != NULL) context.enableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC)context.enablei;
    if (context.enableIndexedEXT == NULL && context.enableiEXT != NULL) context.enableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC)context.enableiEXT;
    if (context.enableIndexedEXT == NULL && context.enableiNV != NULL) context.enableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC)context.enableiNV;
    if (context.enableIndexedEXT == NULL && context.enableiOES != NULL) context.enableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC)context.enableiOES;
    if (context.enableiNV == NULL && context.enableIndexedEXT != NULL) context.enableiNV = (PFNGLENABLEINVPROC)context.enableIndexedEXT;
    if (context.enableiNV == NULL && context.enablei != NULL) context.enableiNV = (PFNGLENABLEINVPROC)context.enablei;
    if (context.enableiNV == NULL && context.enableiEXT != NULL) context.enableiNV = (PFNGLENABLEINVPROC)context.enableiEXT;
    if (context.enableiNV == NULL && context.enableiOES != NULL) context.enableiNV = (PFNGLENABLEINVPROC)context.enableiOES;
    if (context.enableiOES == NULL && context.enableIndexedEXT != NULL) context.enableiOES = (PFNGLENABLEIOESPROC)context.enableIndexedEXT;
    if (context.enableiOES == NULL && context.enablei != NULL) context.enableiOES = (PFNGLENABLEIOESPROC)context.enablei;
    if (context.enableiOES == NULL && context.enableiEXT != NULL) context.enableiOES = (PFNGLENABLEIOESPROC)context.enableiEXT;
    if (context.enableiOES == NULL && context.enableiNV != NULL) context.enableiOES = (PFNGLENABLEIOESPROC)context.enableiNV;
    if (context.enableVertexAttribArray == NULL && context.enableVertexAttribArrayARB != NULL) context.enableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)context.enableVertexAttribArrayARB;
    if (context.enableVertexAttribArrayARB == NULL && context.enableVertexAttribArray != NULL) context.enableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC)context.enableVertexAttribArray;
    if (context.endConditionalRender == NULL && context.endConditionalRenderNV != NULL) context.endConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)context.endConditionalRenderNV;
    if (context.endConditionalRender == NULL && context.endConditionalRenderNVX != NULL) context.endConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)context.endConditionalRenderNVX;
    if (context.endConditionalRenderNV == NULL && context.endConditionalRender != NULL) context.endConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC)context.endConditionalRender;
    if (context.endConditionalRenderNV == NULL && context.endConditionalRenderNVX != NULL) context.endConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC)context.endConditionalRenderNVX;
    if (context.endConditionalRenderNVX == NULL && context.endConditionalRender != NULL) context.endConditionalRenderNVX = (PFNGLENDCONDITIONALRENDERNVXPROC)context.endConditionalRender;
    if (context.endConditionalRenderNVX == NULL && context.endConditionalRenderNV != NULL) context.endConditionalRenderNVX = (PFNGLENDCONDITIONALRENDERNVXPROC)context.endConditionalRenderNV;
    if (context.endQuery == NULL && context.endQueryARB != NULL) context.endQuery = (PFNGLENDQUERYPROC)context.endQueryARB;
    if (context.endQueryARB == NULL && context.endQuery != NULL) context.endQueryARB = (PFNGLENDQUERYARBPROC)context.endQuery;
    if (context.endTransformFeedback == NULL && context.endTransformFeedbackEXT != NULL) context.endTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)context.endTransformFeedbackEXT;
    if (context.endTransformFeedback == NULL && context.endTransformFeedbackNV != NULL) context.endTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)context.endTransformFeedbackNV;
    if (context.endTransformFeedbackEXT == NULL && context.endTransformFeedback != NULL) context.endTransformFeedbackEXT = (PFNGLENDTRANSFORMFEEDBACKEXTPROC)context.endTransformFeedback;
    if (context.endTransformFeedbackEXT == NULL && context.endTransformFeedbackNV != NULL) context.endTransformFeedbackEXT = (PFNGLENDTRANSFORMFEEDBACKEXTPROC)context.endTransformFeedbackNV;
    if (context.endTransformFeedbackNV == NULL && context.endTransformFeedback != NULL) context.endTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC)context.endTransformFeedback;
    if (context.endTransformFeedbackNV == NULL && context.endTransformFeedbackEXT != NULL) context.endTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC)context.endTransformFeedbackEXT;
    if (context.fenceSync == NULL && context.fenceSyncAPPLE != NULL) context.fenceSync = (PFNGLFENCESYNCPROC)context.fenceSyncAPPLE;
    if (context.fenceSyncAPPLE == NULL && context.fenceSync != NULL) context.fenceSyncAPPLE = (PFNGLFENCESYNCAPPLEPROC)context.fenceSync;
    if (context.flushMappedBufferRange == NULL && context.flushMappedBufferRangeAPPLE != NULL) context.flushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)context.flushMappedBufferRangeAPPLE;
    if (context.flushMappedBufferRange == NULL && context.flushMappedBufferRangeEXT != NULL) context.flushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)context.flushMappedBufferRangeEXT;
    if (context.flushMappedBufferRangeAPPLE == NULL && context.flushMappedBufferRange != NULL) context.flushMappedBufferRangeAPPLE = (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)context.flushMappedBufferRange;
    if (context.flushMappedBufferRangeAPPLE == NULL && context.flushMappedBufferRangeEXT != NULL) context.flushMappedBufferRangeAPPLE = (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)context.flushMappedBufferRangeEXT;
    if (context.flushMappedBufferRangeEXT == NULL && context.flushMappedBufferRange != NULL) context.flushMappedBufferRangeEXT = (PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC)context.flushMappedBufferRange;
    if (context.flushMappedBufferRangeEXT == NULL && context.flushMappedBufferRangeAPPLE != NULL) context.flushMappedBufferRangeEXT = (PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC)context.flushMappedBufferRangeAPPLE;
    if (context.framebufferRenderbuffer == NULL && context.framebufferRenderbufferEXT != NULL) context.framebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)context.framebufferRenderbufferEXT;
    if (context.framebufferRenderbufferEXT == NULL && context.framebufferRenderbuffer != NULL) context.framebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)context.framebufferRenderbuffer;
    if (context.framebufferTexture == NULL && context.framebufferTextureARB != NULL) context.framebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)context.framebufferTextureARB;
    if (context.framebufferTexture == NULL && context.framebufferTextureEXT != NULL) context.framebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)context.framebufferTextureEXT;
    if (context.framebufferTexture == NULL && context.framebufferTextureOES != NULL) context.framebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)context.framebufferTextureOES;
    if (context.framebufferTexture1D == NULL && context.framebufferTexture1DEXT != NULL) context.framebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC)context.framebufferTexture1DEXT;
    if (context.framebufferTexture1DEXT == NULL && context.framebufferTexture1D != NULL) context.framebufferTexture1DEXT = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)context.framebufferTexture1D;
    if (context.framebufferTexture2D == NULL && context.framebufferTexture2DEXT != NULL) context.framebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)context.framebufferTexture2DEXT;
    if (context.framebufferTexture2DEXT == NULL && context.framebufferTexture2D != NULL) context.framebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)context.framebufferTexture2D;
    if (context.framebufferTexture3D == NULL && context.framebufferTexture3DEXT != NULL) context.framebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC)context.framebufferTexture3DEXT;
    if (context.framebufferTexture3DEXT == NULL && context.framebufferTexture3D != NULL) context.framebufferTexture3DEXT = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)context.framebufferTexture3D;
    if (context.framebufferTextureARB == NULL && context.framebufferTexture != NULL) context.framebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC)context.framebufferTexture;
    if (context.framebufferTextureARB == NULL && context.framebufferTextureEXT != NULL) context.framebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC)context.framebufferTextureEXT;
    if (context.framebufferTextureARB == NULL && context.framebufferTextureOES != NULL) context.framebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC)context.framebufferTextureOES;
    if (context.framebufferTextureEXT == NULL && context.framebufferTexture != NULL) context.framebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)context.framebufferTexture;
    if (context.framebufferTextureEXT == NULL && context.framebufferTextureARB != NULL) context.framebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)context.framebufferTextureARB;
    if (context.framebufferTextureEXT == NULL && context.framebufferTextureOES != NULL) context.framebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)context.framebufferTextureOES;
    if (context.framebufferTextureFaceARB == NULL && context.framebufferTextureFaceEXT != NULL) context.framebufferTextureFaceARB = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)context.framebufferTextureFaceEXT;
    if (context.framebufferTextureFaceEXT == NULL && context.framebufferTextureFaceARB != NULL) context.framebufferTextureFaceEXT = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)context.framebufferTextureFaceARB;
    if (context.framebufferTextureLayer == NULL && context.framebufferTextureLayerARB != NULL) context.framebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)context.framebufferTextureLayerARB;
    if (context.framebufferTextureLayer == NULL && context.framebufferTextureLayerEXT != NULL) context.framebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)context.framebufferTextureLayerEXT;
    if (context.framebufferTextureLayerARB == NULL && context.framebufferTextureLayer != NULL) context.framebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)context.framebufferTextureLayer;
    if (context.framebufferTextureLayerARB == NULL && context.framebufferTextureLayerEXT != NULL) context.framebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)context.framebufferTextureLayerEXT;
    if (context.framebufferTextureLayerEXT == NULL && context.framebufferTextureLayer != NULL) context.framebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)context.framebufferTextureLayer;
    if (context.framebufferTextureLayerEXT == NULL && context.framebufferTextureLayerARB != NULL) context.framebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)context.framebufferTextureLayerARB;
    if (context.framebufferTextureOES == NULL && context.framebufferTexture != NULL) context.framebufferTextureOES = (PFNGLFRAMEBUFFERTEXTUREOESPROC)context.framebufferTexture;
    if (context.framebufferTextureOES == NULL && context.framebufferTextureARB != NULL) context.framebufferTextureOES = (PFNGLFRAMEBUFFERTEXTUREOESPROC)context.framebufferTextureARB;
    if (context.framebufferTextureOES == NULL && context.framebufferTextureEXT != NULL) context.framebufferTextureOES = (PFNGLFRAMEBUFFERTEXTUREOESPROC)context.framebufferTextureEXT;
    if (context.genBuffers == NULL && context.genBuffersARB != NULL) context.genBuffers = (PFNGLGENBUFFERSPROC)context.genBuffersARB;
    if (context.genBuffersARB == NULL && context.genBuffers != NULL) context.genBuffersARB = (PFNGLGENBUFFERSARBPROC)context.genBuffers;
    if (context.generateMipmap == NULL && context.generateMipmapEXT != NULL) context.generateMipmap = (PFNGLGENERATEMIPMAPPROC)context.generateMipmapEXT;
    if (context.generateMipmapEXT == NULL && context.generateMipmap != NULL) context.generateMipmapEXT = (PFNGLGENERATEMIPMAPEXTPROC)context.generateMipmap;
    if (context.genFramebuffers == NULL && context.genFramebuffersEXT != NULL) context.genFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)context.genFramebuffersEXT;
    if (context.genFramebuffersEXT == NULL && context.genFramebuffers != NULL) context.genFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC)context.genFramebuffers;
    if (context.genProgramsARB == NULL && context.genProgramsNV != NULL) context.genProgramsARB = (PFNGLGENPROGRAMSARBPROC)context.genProgramsNV;
    if (context.genProgramsNV == NULL && context.genProgramsARB != NULL) context.genProgramsNV = (PFNGLGENPROGRAMSNVPROC)context.genProgramsARB;
    if (context.genQueries == NULL && context.genQueriesARB != NULL) context.genQueries = (PFNGLGENQUERIESPROC)context.genQueriesARB;
    if (context.genQueriesARB == NULL && context.genQueries != NULL) context.genQueriesARB = (PFNGLGENQUERIESARBPROC)context.genQueries;
    if (context.genRenderbuffers == NULL && context.genRenderbuffersEXT != NULL) context.genRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)context.genRenderbuffersEXT;
    if (context.genRenderbuffersEXT == NULL && context.genRenderbuffers != NULL) context.genRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC)context.genRenderbuffers;
    if (context.genVertexArrays == NULL && context.genVertexArraysAPPLE != NULL) context.genVertexArrays = (PFNGLGENVERTEXARRAYSPROC)context.genVertexArraysAPPLE;
    if (context.genVertexArrays == NULL && context.genVertexArraysOES != NULL) context.genVertexArrays = (PFNGLGENVERTEXARRAYSPROC)context.genVertexArraysOES;
    if (context.genVertexArraysAPPLE == NULL && context.genVertexArrays != NULL) context.genVertexArraysAPPLE = (PFNGLGENVERTEXARRAYSAPPLEPROC)context.genVertexArrays;
    if (context.genVertexArraysAPPLE == NULL && context.genVertexArraysOES != NULL) context.genVertexArraysAPPLE = (PFNGLGENVERTEXARRAYSAPPLEPROC)context.genVertexArraysOES;
    if (context.genVertexArraysOES == NULL && context.genVertexArrays != NULL) context.genVertexArraysOES = (PFNGLGENVERTEXARRAYSOESPROC)context.genVertexArrays;
    if (context.genVertexArraysOES == NULL && context.genVertexArraysAPPLE != NULL) context.genVertexArraysOES = (PFNGLGENVERTEXARRAYSOESPROC)context.genVertexArraysAPPLE;
    if (context.getActiveAttrib == NULL && context.getActiveAttribARB != NULL) context.getActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)context.getActiveAttribARB;
    if (context.getActiveAttribARB == NULL && context.getActiveAttrib != NULL) context.getActiveAttribARB = (PFNGLGETACTIVEATTRIBARBPROC)context.getActiveAttrib;
    if (context.getActiveUniform == NULL && context.getActiveUniformARB != NULL) context.getActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)context.getActiveUniformARB;
    if (context.getActiveUniformARB == NULL && context.getActiveUniform != NULL) context.getActiveUniformARB = (PFNGLGETACTIVEUNIFORMARBPROC)context.getActiveUniform;
    if (context.getAttribLocation == NULL && context.getAttribLocationARB != NULL) context.getAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)context.getAttribLocationARB;
    if (context.getAttribLocationARB == NULL && context.getAttribLocation != NULL) context.getAttribLocationARB = (PFNGLGETATTRIBLOCATIONARBPROC)context.getAttribLocation;
    if (context.getBooleani_v == NULL && context.getBooleanIndexedvEXT != NULL) context.getBooleani_v = (PFNGLGETBOOLEANI_VPROC)context.getBooleanIndexedvEXT;
    if (context.getBooleanIndexedvEXT == NULL && context.getBooleani_v != NULL) context.getBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC)context.getBooleani_v;
    if (context.getBufferParameteriv == NULL && context.getBufferParameterivARB != NULL) context.getBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)context.getBufferParameterivARB;
    if (context.getBufferParameterivARB == NULL && context.getBufferParameteriv != NULL) context.getBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC)context.getBufferParameteriv;
    if (context.getBufferPointerv == NULL && context.getBufferPointervARB != NULL) context.getBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)context.getBufferPointervARB;
    if (context.getBufferPointerv == NULL && context.getBufferPointervOES != NULL) context.getBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)context.getBufferPointervOES;
    if (context.getBufferPointervARB == NULL && context.getBufferPointerv != NULL) context.getBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC)context.getBufferPointerv;
    if (context.getBufferPointervARB == NULL && context.getBufferPointervOES != NULL) context.getBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC)context.getBufferPointervOES;
    if (context.getBufferPointervOES == NULL && context.getBufferPointerv != NULL) context.getBufferPointervOES = (PFNGLGETBUFFERPOINTERVOESPROC)context.getBufferPointerv;
    if (context.getBufferPointervOES == NULL && context.getBufferPointervARB != NULL) context.getBufferPointervOES = (PFNGLGETBUFFERPOINTERVOESPROC)context.getBufferPointervARB;
    if (context.getBufferSubData == NULL && context.getBufferSubDataARB != NULL) context.getBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)context.getBufferSubDataARB;
    if (context.getBufferSubDataARB == NULL && context.getBufferSubData != NULL) context.getBufferSubDataARB = (PFNGLGETBUFFERSUBDATAARBPROC)context.getBufferSubData;
    if (context.getCompressedTexImage == NULL && context.getCompressedTexImageARB != NULL) context.getCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)context.getCompressedTexImageARB;
    if (context.getCompressedTexImageARB == NULL && context.getCompressedTexImage != NULL) context.getCompressedTexImageARB = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)context.getCompressedTexImage;
    if (context.getDebugMessageLog == NULL && context.getDebugMessageLogKHR != NULL) context.getDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC)context.getDebugMessageLogKHR;
    if (context.getDebugMessageLogKHR == NULL && context.getDebugMessageLog != NULL) context.getDebugMessageLogKHR = (PFNGLGETDEBUGMESSAGELOGKHRPROC)context.getDebugMessageLog;
    if (context.getFragDataLocation == NULL && context.getFragDataLocationEXT != NULL) context.getFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC)context.getFragDataLocationEXT;
    if (context.getFragDataLocationEXT == NULL && context.getFragDataLocation != NULL) context.getFragDataLocationEXT = (PFNGLGETFRAGDATALOCATIONEXTPROC)context.getFragDataLocation;
    if (context.getFramebufferAttachmentParameteriv == NULL && context.getFramebufferAttachmentParameterivEXT != NULL) context.getFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)context.getFramebufferAttachmentParameterivEXT;
    if (context.getFramebufferAttachmentParameterivEXT == NULL && context.getFramebufferAttachmentParameteriv != NULL) context.getFramebufferAttachmentParameterivEXT = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)context.getFramebufferAttachmentParameteriv;
    if (context.getGraphicsResetStatus == NULL && context.getGraphicsResetStatusEXT != NULL) context.getGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC)context.getGraphicsResetStatusEXT;
    if (context.getGraphicsResetStatus == NULL && context.getGraphicsResetStatusKHR != NULL) context.getGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC)context.getGraphicsResetStatusKHR;
    if (context.getGraphicsResetStatusEXT == NULL && context.getGraphicsResetStatus != NULL) context.getGraphicsResetStatusEXT = (PFNGLGETGRAPHICSRESETSTATUSEXTPROC)context.getGraphicsResetStatus;
    if (context.getGraphicsResetStatusEXT == NULL && context.getGraphicsResetStatusKHR != NULL) context.getGraphicsResetStatusEXT = (PFNGLGETGRAPHICSRESETSTATUSEXTPROC)context.getGraphicsResetStatusKHR;
    if (context.getGraphicsResetStatusKHR == NULL && context.getGraphicsResetStatus != NULL) context.getGraphicsResetStatusKHR = (PFNGLGETGRAPHICSRESETSTATUSKHRPROC)context.getGraphicsResetStatus;
    if (context.getGraphicsResetStatusKHR == NULL && context.getGraphicsResetStatusEXT != NULL) context.getGraphicsResetStatusKHR = (PFNGLGETGRAPHICSRESETSTATUSKHRPROC)context.getGraphicsResetStatusEXT;
    if (context.getInteger64v == NULL && context.getInteger64vAPPLE != NULL) context.getInteger64v = (PFNGLGETINTEGER64VPROC)context.getInteger64vAPPLE;
    if (context.getInteger64v == NULL && context.getInteger64vEXT != NULL) context.getInteger64v = (PFNGLGETINTEGER64VPROC)context.getInteger64vEXT;
    if (context.getInteger64vAPPLE == NULL && context.getInteger64v != NULL) context.getInteger64vAPPLE = (PFNGLGETINTEGER64VAPPLEPROC)context.getInteger64v;
    if (context.getInteger64vAPPLE == NULL && context.getInteger64vEXT != NULL) context.getInteger64vAPPLE = (PFNGLGETINTEGER64VAPPLEPROC)context.getInteger64vEXT;
    if (context.getInteger64vEXT == NULL && context.getInteger64v != NULL) context.getInteger64vEXT = (PFNGLGETINTEGER64VEXTPROC)context.getInteger64v;
    if (context.getInteger64vEXT == NULL && context.getInteger64vAPPLE != NULL) context.getInteger64vEXT = (PFNGLGETINTEGER64VEXTPROC)context.getInteger64vAPPLE;
    if (context.getIntegeri_v == NULL && context.getIntegerIndexedvEXT != NULL) context.getIntegeri_v = (PFNGLGETINTEGERI_VPROC)context.getIntegerIndexedvEXT;
    if (context.getIntegerIndexedvEXT == NULL && context.getIntegeri_v != NULL) context.getIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC)context.getIntegeri_v;
    if (context.getMultisamplefv == NULL && context.getMultisamplefvNV != NULL) context.getMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC)context.getMultisamplefvNV;
    if (context.getMultisamplefvNV == NULL && context.getMultisamplefv != NULL) context.getMultisamplefvNV = (PFNGLGETMULTISAMPLEFVNVPROC)context.getMultisamplefv;
    if (context.getnUniformfv == NULL && context.getnUniformfvEXT != NULL) context.getnUniformfv = (PFNGLGETNUNIFORMFVPROC)context.getnUniformfvEXT;
    if (context.getnUniformfv == NULL && context.getnUniformfvKHR != NULL) context.getnUniformfv = (PFNGLGETNUNIFORMFVPROC)context.getnUniformfvKHR;
    if (context.getnUniformfvEXT == NULL && context.getnUniformfv != NULL) context.getnUniformfvEXT = (PFNGLGETNUNIFORMFVEXTPROC)context.getnUniformfv;
    if (context.getnUniformfvEXT == NULL && context.getnUniformfvKHR != NULL) context.getnUniformfvEXT = (PFNGLGETNUNIFORMFVEXTPROC)context.getnUniformfvKHR;
    if (context.getnUniformfvKHR == NULL && context.getnUniformfv != NULL) context.getnUniformfvKHR = (PFNGLGETNUNIFORMFVKHRPROC)context.getnUniformfv;
    if (context.getnUniformfvKHR == NULL && context.getnUniformfvEXT != NULL) context.getnUniformfvKHR = (PFNGLGETNUNIFORMFVKHRPROC)context.getnUniformfvEXT;
    if (context.getnUniformiv == NULL && context.getnUniformivEXT != NULL) context.getnUniformiv = (PFNGLGETNUNIFORMIVPROC)context.getnUniformivEXT;
    if (context.getnUniformiv == NULL && context.getnUniformivKHR != NULL) context.getnUniformiv = (PFNGLGETNUNIFORMIVPROC)context.getnUniformivKHR;
    if (context.getnUniformivEXT == NULL && context.getnUniformiv != NULL) context.getnUniformivEXT = (PFNGLGETNUNIFORMIVEXTPROC)context.getnUniformiv;
    if (context.getnUniformivEXT == NULL && context.getnUniformivKHR != NULL) context.getnUniformivEXT = (PFNGLGETNUNIFORMIVEXTPROC)context.getnUniformivKHR;
    if (context.getnUniformivKHR == NULL && context.getnUniformiv != NULL) context.getnUniformivKHR = (PFNGLGETNUNIFORMIVKHRPROC)context.getnUniformiv;
    if (context.getnUniformivKHR == NULL && context.getnUniformivEXT != NULL) context.getnUniformivKHR = (PFNGLGETNUNIFORMIVKHRPROC)context.getnUniformivEXT;
    if (context.getnUniformuiv == NULL && context.getnUniformuivKHR != NULL) context.getnUniformuiv = (PFNGLGETNUNIFORMUIVPROC)context.getnUniformuivKHR;
    if (context.getnUniformuivKHR == NULL && context.getnUniformuiv != NULL) context.getnUniformuivKHR = (PFNGLGETNUNIFORMUIVKHRPROC)context.getnUniformuiv;
    if (context.getObjectLabel == NULL && context.getObjectLabelKHR != NULL) context.getObjectLabel = (PFNGLGETOBJECTLABELPROC)context.getObjectLabelKHR;
    if (context.getObjectLabelKHR == NULL && context.getObjectLabel != NULL) context.getObjectLabelKHR = (PFNGLGETOBJECTLABELKHRPROC)context.getObjectLabel;
    if (context.getObjectPtrLabel == NULL && context.getObjectPtrLabelKHR != NULL) context.getObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC)context.getObjectPtrLabelKHR;
    if (context.getObjectPtrLabelKHR == NULL && context.getObjectPtrLabel != NULL) context.getObjectPtrLabelKHR = (PFNGLGETOBJECTPTRLABELKHRPROC)context.getObjectPtrLabel;
    if (context.getPointerv == NULL && context.getPointervEXT != NULL) context.getPointerv = (PFNGLGETPOINTERVPROC)context.getPointervEXT;
    if (context.getPointerv == NULL && context.getPointervKHR != NULL) context.getPointerv = (PFNGLGETPOINTERVPROC)context.getPointervKHR;
    if (context.getPointervEXT == NULL && context.getPointerv != NULL) context.getPointervEXT = (PFNGLGETPOINTERVEXTPROC)context.getPointerv;
    if (context.getPointervEXT == NULL && context.getPointervKHR != NULL) context.getPointervEXT = (PFNGLGETPOINTERVEXTPROC)context.getPointervKHR;
    if (context.getPointervKHR == NULL && context.getPointerv != NULL) context.getPointervKHR = (PFNGLGETPOINTERVKHRPROC)context.getPointerv;
    if (context.getPointervKHR == NULL && context.getPointervEXT != NULL) context.getPointervKHR = (PFNGLGETPOINTERVKHRPROC)context.getPointervEXT;
    if (context.getProgramBinary == NULL && context.getProgramBinaryOES != NULL) context.getProgramBinary = (PFNGLGETPROGRAMBINARYPROC)context.getProgramBinaryOES;
    if (context.getProgramBinaryOES == NULL && context.getProgramBinary != NULL) context.getProgramBinaryOES = (PFNGLGETPROGRAMBINARYOESPROC)context.getProgramBinary;
    if (context.getQueryiv == NULL && context.getQueryivARB != NULL) context.getQueryiv = (PFNGLGETQUERYIVPROC)context.getQueryivARB;
    if (context.getQueryivARB == NULL && context.getQueryiv != NULL) context.getQueryivARB = (PFNGLGETQUERYIVARBPROC)context.getQueryiv;
    if (context.getQueryObjectiv == NULL && context.getQueryObjectivARB != NULL) context.getQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)context.getQueryObjectivARB;
    if (context.getQueryObjectiv == NULL && context.getQueryObjectivEXT != NULL) context.getQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)context.getQueryObjectivEXT;
    if (context.getQueryObjectivARB == NULL && context.getQueryObjectiv != NULL) context.getQueryObjectivARB = (PFNGLGETQUERYOBJECTIVARBPROC)context.getQueryObjectiv;
    if (context.getQueryObjectivARB == NULL && context.getQueryObjectivEXT != NULL) context.getQueryObjectivARB = (PFNGLGETQUERYOBJECTIVARBPROC)context.getQueryObjectivEXT;
    if (context.getQueryObjectivEXT == NULL && context.getQueryObjectiv != NULL) context.getQueryObjectivEXT = (PFNGLGETQUERYOBJECTIVEXTPROC)context.getQueryObjectiv;
    if (context.getQueryObjectivEXT == NULL && context.getQueryObjectivARB != NULL) context.getQueryObjectivEXT = (PFNGLGETQUERYOBJECTIVEXTPROC)context.getQueryObjectivARB;
    if (context.getQueryObjectuiv == NULL && context.getQueryObjectuivARB != NULL) context.getQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)context.getQueryObjectuivARB;
    if (context.getQueryObjectuivARB == NULL && context.getQueryObjectuiv != NULL) context.getQueryObjectuivARB = (PFNGLGETQUERYOBJECTUIVARBPROC)context.getQueryObjectuiv;
    if (context.getRenderbufferParameteriv == NULL && context.getRenderbufferParameterivEXT != NULL) context.getRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC)context.getRenderbufferParameterivEXT;
    if (context.getRenderbufferParameterivEXT == NULL && context.getRenderbufferParameteriv != NULL) context.getRenderbufferParameterivEXT = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)context.getRenderbufferParameteriv;
    if (context.getSamplerParameterIiv == NULL && context.getSamplerParameterIivEXT != NULL) context.getSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC)context.getSamplerParameterIivEXT;
    if (context.getSamplerParameterIiv == NULL && context.getSamplerParameterIivOES != NULL) context.getSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC)context.getSamplerParameterIivOES;
    if (context.getSamplerParameterIivEXT == NULL && context.getSamplerParameterIiv != NULL) context.getSamplerParameterIivEXT = (PFNGLGETSAMPLERPARAMETERIIVEXTPROC)context.getSamplerParameterIiv;
    if (context.getSamplerParameterIivEXT == NULL && context.getSamplerParameterIivOES != NULL) context.getSamplerParameterIivEXT = (PFNGLGETSAMPLERPARAMETERIIVEXTPROC)context.getSamplerParameterIivOES;
    if (context.getSamplerParameterIivOES == NULL && context.getSamplerParameterIiv != NULL) context.getSamplerParameterIivOES = (PFNGLGETSAMPLERPARAMETERIIVOESPROC)context.getSamplerParameterIiv;
    if (context.getSamplerParameterIivOES == NULL && context.getSamplerParameterIivEXT != NULL) context.getSamplerParameterIivOES = (PFNGLGETSAMPLERPARAMETERIIVOESPROC)context.getSamplerParameterIivEXT;
    if (context.getSamplerParameterIuiv == NULL && context.getSamplerParameterIuivEXT != NULL) context.getSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC)context.getSamplerParameterIuivEXT;
    if (context.getSamplerParameterIuiv == NULL && context.getSamplerParameterIuivOES != NULL) context.getSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC)context.getSamplerParameterIuivOES;
    if (context.getSamplerParameterIuivEXT == NULL && context.getSamplerParameterIuiv != NULL) context.getSamplerParameterIuivEXT = (PFNGLGETSAMPLERPARAMETERIUIVEXTPROC)context.getSamplerParameterIuiv;
    if (context.getSamplerParameterIuivEXT == NULL && context.getSamplerParameterIuivOES != NULL) context.getSamplerParameterIuivEXT = (PFNGLGETSAMPLERPARAMETERIUIVEXTPROC)context.getSamplerParameterIuivOES;
    if (context.getSamplerParameterIuivOES == NULL && context.getSamplerParameterIuiv != NULL) context.getSamplerParameterIuivOES = (PFNGLGETSAMPLERPARAMETERIUIVOESPROC)context.getSamplerParameterIuiv;
    if (context.getSamplerParameterIuivOES == NULL && context.getSamplerParameterIuivEXT != NULL) context.getSamplerParameterIuivOES = (PFNGLGETSAMPLERPARAMETERIUIVOESPROC)context.getSamplerParameterIuivEXT;
    if (context.getShaderSource == NULL && context.getShaderSourceARB != NULL) context.getShaderSource = (PFNGLGETSHADERSOURCEPROC)context.getShaderSourceARB;
    if (context.getShaderSourceARB == NULL && context.getShaderSource != NULL) context.getShaderSourceARB = (PFNGLGETSHADERSOURCEARBPROC)context.getShaderSource;
    if (context.getSynciv == NULL && context.getSyncivAPPLE != NULL) context.getSynciv = (PFNGLGETSYNCIVPROC)context.getSyncivAPPLE;
    if (context.getSyncivAPPLE == NULL && context.getSynciv != NULL) context.getSyncivAPPLE = (PFNGLGETSYNCIVAPPLEPROC)context.getSynciv;
    if (context.getTexParameterIiv == NULL && context.getTexParameterIivEXT != NULL) context.getTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC)context.getTexParameterIivEXT;
    if (context.getTexParameterIiv == NULL && context.getTexParameterIivOES != NULL) context.getTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC)context.getTexParameterIivOES;
    if (context.getTexParameterIivEXT == NULL && context.getTexParameterIiv != NULL) context.getTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC)context.getTexParameterIiv;
    if (context.getTexParameterIivEXT == NULL && context.getTexParameterIivOES != NULL) context.getTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC)context.getTexParameterIivOES;
    if (context.getTexParameterIivOES == NULL && context.getTexParameterIiv != NULL) context.getTexParameterIivOES = (PFNGLGETTEXPARAMETERIIVOESPROC)context.getTexParameterIiv;
    if (context.getTexParameterIivOES == NULL && context.getTexParameterIivEXT != NULL) context.getTexParameterIivOES = (PFNGLGETTEXPARAMETERIIVOESPROC)context.getTexParameterIivEXT;
    if (context.getTexParameterIuiv == NULL && context.getTexParameterIuivEXT != NULL) context.getTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC)context.getTexParameterIuivEXT;
    if (context.getTexParameterIuiv == NULL && context.getTexParameterIuivOES != NULL) context.getTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC)context.getTexParameterIuivOES;
    if (context.getTexParameterIuivEXT == NULL && context.getTexParameterIuiv != NULL) context.getTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC)context.getTexParameterIuiv;
    if (context.getTexParameterIuivEXT == NULL && context.getTexParameterIuivOES != NULL) context.getTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC)context.getTexParameterIuivOES;
    if (context.getTexParameterIuivOES == NULL && context.getTexParameterIuiv != NULL) context.getTexParameterIuivOES = (PFNGLGETTEXPARAMETERIUIVOESPROC)context.getTexParameterIuiv;
    if (context.getTexParameterIuivOES == NULL && context.getTexParameterIuivEXT != NULL) context.getTexParameterIuivOES = (PFNGLGETTEXPARAMETERIUIVOESPROC)context.getTexParameterIuivEXT;
    if (context.getTransformFeedbackVarying == NULL && context.getTransformFeedbackVaryingEXT != NULL) context.getTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)context.getTransformFeedbackVaryingEXT;
    if (context.getTransformFeedbackVaryingEXT == NULL && context.getTransformFeedbackVarying != NULL) context.getTransformFeedbackVaryingEXT = (PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC)context.getTransformFeedbackVarying;
    if (context.getUniformfv == NULL && context.getUniformfvARB != NULL) context.getUniformfv = (PFNGLGETUNIFORMFVPROC)context.getUniformfvARB;
    if (context.getUniformfvARB == NULL && context.getUniformfv != NULL) context.getUniformfvARB = (PFNGLGETUNIFORMFVARBPROC)context.getUniformfv;
    if (context.getUniformiv == NULL && context.getUniformivARB != NULL) context.getUniformiv = (PFNGLGETUNIFORMIVPROC)context.getUniformivARB;
    if (context.getUniformivARB == NULL && context.getUniformiv != NULL) context.getUniformivARB = (PFNGLGETUNIFORMIVARBPROC)context.getUniformiv;
    if (context.getUniformLocation == NULL && context.getUniformLocationARB != NULL) context.getUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)context.getUniformLocationARB;
    if (context.getUniformLocationARB == NULL && context.getUniformLocation != NULL) context.getUniformLocationARB = (PFNGLGETUNIFORMLOCATIONARBPROC)context.getUniformLocation;
    if (context.getUniformuiv == NULL && context.getUniformuivEXT != NULL) context.getUniformuiv = (PFNGLGETUNIFORMUIVPROC)context.getUniformuivEXT;
    if (context.getUniformuivEXT == NULL && context.getUniformuiv != NULL) context.getUniformuivEXT = (PFNGLGETUNIFORMUIVEXTPROC)context.getUniformuiv;
    if (context.getVertexAttribdv == NULL && context.getVertexAttribdvARB != NULL) context.getVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)context.getVertexAttribdvARB;
    if (context.getVertexAttribdv == NULL && context.getVertexAttribdvNV != NULL) context.getVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)context.getVertexAttribdvNV;
    if (context.getVertexAttribdvARB == NULL && context.getVertexAttribdv != NULL) context.getVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC)context.getVertexAttribdv;
    if (context.getVertexAttribdvARB == NULL && context.getVertexAttribdvNV != NULL) context.getVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC)context.getVertexAttribdvNV;
    if (context.getVertexAttribdvNV == NULL && context.getVertexAttribdv != NULL) context.getVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC)context.getVertexAttribdv;
    if (context.getVertexAttribdvNV == NULL && context.getVertexAttribdvARB != NULL) context.getVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC)context.getVertexAttribdvARB;
    if (context.getVertexAttribfv == NULL && context.getVertexAttribfvARB != NULL) context.getVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)context.getVertexAttribfvARB;
    if (context.getVertexAttribfv == NULL && context.getVertexAttribfvNV != NULL) context.getVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)context.getVertexAttribfvNV;
    if (context.getVertexAttribfvARB == NULL && context.getVertexAttribfv != NULL) context.getVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC)context.getVertexAttribfv;
    if (context.getVertexAttribfvARB == NULL && context.getVertexAttribfvNV != NULL) context.getVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC)context.getVertexAttribfvNV;
    if (context.getVertexAttribfvNV == NULL && context.getVertexAttribfv != NULL) context.getVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC)context.getVertexAttribfv;
    if (context.getVertexAttribfvNV == NULL && context.getVertexAttribfvARB != NULL) context.getVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC)context.getVertexAttribfvARB;
    if (context.getVertexAttribIiv == NULL && context.getVertexAttribIivEXT != NULL) context.getVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC)context.getVertexAttribIivEXT;
    if (context.getVertexAttribIivEXT == NULL && context.getVertexAttribIiv != NULL) context.getVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC)context.getVertexAttribIiv;
    if (context.getVertexAttribIuiv == NULL && context.getVertexAttribIuivEXT != NULL) context.getVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC)context.getVertexAttribIuivEXT;
    if (context.getVertexAttribIuivEXT == NULL && context.getVertexAttribIuiv != NULL) context.getVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC)context.getVertexAttribIuiv;
    if (context.getVertexAttribiv == NULL && context.getVertexAttribivARB != NULL) context.getVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)context.getVertexAttribivARB;
    if (context.getVertexAttribiv == NULL && context.getVertexAttribivNV != NULL) context.getVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)context.getVertexAttribivNV;
    if (context.getVertexAttribivARB == NULL && context.getVertexAttribiv != NULL) context.getVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC)context.getVertexAttribiv;
    if (context.getVertexAttribivARB == NULL && context.getVertexAttribivNV != NULL) context.getVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC)context.getVertexAttribivNV;
    if (context.getVertexAttribivNV == NULL && context.getVertexAttribiv != NULL) context.getVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC)context.getVertexAttribiv;
    if (context.getVertexAttribivNV == NULL && context.getVertexAttribivARB != NULL) context.getVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC)context.getVertexAttribivARB;
    if (context.getVertexAttribPointerv == NULL && context.getVertexAttribPointervARB != NULL) context.getVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)context.getVertexAttribPointervARB;
    if (context.getVertexAttribPointerv == NULL && context.getVertexAttribPointervNV != NULL) context.getVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)context.getVertexAttribPointervNV;
    if (context.getVertexAttribPointervARB == NULL && context.getVertexAttribPointerv != NULL) context.getVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)context.getVertexAttribPointerv;
    if (context.getVertexAttribPointervARB == NULL && context.getVertexAttribPointervNV != NULL) context.getVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)context.getVertexAttribPointervNV;
    if (context.getVertexAttribPointervNV == NULL && context.getVertexAttribPointerv != NULL) context.getVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)context.getVertexAttribPointerv;
    if (context.getVertexAttribPointervNV == NULL && context.getVertexAttribPointervARB != NULL) context.getVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)context.getVertexAttribPointervARB;
    if (context.isBuffer == NULL && context.isBufferARB != NULL) context.isBuffer = (PFNGLISBUFFERPROC)context.isBufferARB;
    if (context.isBufferARB == NULL && context.isBuffer != NULL) context.isBufferARB = (PFNGLISBUFFERARBPROC)context.isBuffer;
    if (context.isEnabledi == NULL && context.isEnabledIndexedEXT != NULL) context.isEnabledi = (PFNGLISENABLEDIPROC)context.isEnabledIndexedEXT;
    if (context.isEnabledi == NULL && context.isEnablediEXT != NULL) context.isEnabledi = (PFNGLISENABLEDIPROC)context.isEnablediEXT;
    if (context.isEnabledi == NULL && context.isEnablediNV != NULL) context.isEnabledi = (PFNGLISENABLEDIPROC)context.isEnablediNV;
    if (context.isEnabledi == NULL && context.isEnablediOES != NULL) context.isEnabledi = (PFNGLISENABLEDIPROC)context.isEnablediOES;
    if (context.isEnablediEXT == NULL && context.isEnabledIndexedEXT != NULL) context.isEnablediEXT = (PFNGLISENABLEDIEXTPROC)context.isEnabledIndexedEXT;
    if (context.isEnablediEXT == NULL && context.isEnabledi != NULL) context.isEnablediEXT = (PFNGLISENABLEDIEXTPROC)context.isEnabledi;
    if (context.isEnablediEXT == NULL && context.isEnablediNV != NULL) context.isEnablediEXT = (PFNGLISENABLEDIEXTPROC)context.isEnablediNV;
    if (context.isEnablediEXT == NULL && context.isEnablediOES != NULL) context.isEnablediEXT = (PFNGLISENABLEDIEXTPROC)context.isEnablediOES;
    if (context.isEnabledIndexedEXT == NULL && context.isEnabledi != NULL) context.isEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC)context.isEnabledi;
    if (context.isEnabledIndexedEXT == NULL && context.isEnablediEXT != NULL) context.isEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC)context.isEnablediEXT;
    if (context.isEnabledIndexedEXT == NULL && context.isEnablediNV != NULL) context.isEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC)context.isEnablediNV;
    if (context.isEnabledIndexedEXT == NULL && context.isEnablediOES != NULL) context.isEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC)context.isEnablediOES;
    if (context.isEnablediNV == NULL && context.isEnabledIndexedEXT != NULL) context.isEnablediNV = (PFNGLISENABLEDINVPROC)context.isEnabledIndexedEXT;
    if (context.isEnablediNV == NULL && context.isEnabledi != NULL) context.isEnablediNV = (PFNGLISENABLEDINVPROC)context.isEnabledi;
    if (context.isEnablediNV == NULL && context.isEnablediEXT != NULL) context.isEnablediNV = (PFNGLISENABLEDINVPROC)context.isEnablediEXT;
    if (context.isEnablediNV == NULL && context.isEnablediOES != NULL) context.isEnablediNV = (PFNGLISENABLEDINVPROC)context.isEnablediOES;
    if (context.isEnablediOES == NULL && context.isEnabledIndexedEXT != NULL) context.isEnablediOES = (PFNGLISENABLEDIOESPROC)context.isEnabledIndexedEXT;
    if (context.isEnablediOES == NULL && context.isEnabledi != NULL) context.isEnablediOES = (PFNGLISENABLEDIOESPROC)context.isEnabledi;
    if (context.isEnablediOES == NULL && context.isEnablediEXT != NULL) context.isEnablediOES = (PFNGLISENABLEDIOESPROC)context.isEnablediEXT;
    if (context.isEnablediOES == NULL && context.isEnablediNV != NULL) context.isEnablediOES = (PFNGLISENABLEDIOESPROC)context.isEnablediNV;
    if (context.isFramebuffer == NULL && context.isFramebufferEXT != NULL) context.isFramebuffer = (PFNGLISFRAMEBUFFERPROC)context.isFramebufferEXT;
    if (context.isFramebufferEXT == NULL && context.isFramebuffer != NULL) context.isFramebufferEXT = (PFNGLISFRAMEBUFFEREXTPROC)context.isFramebuffer;
    if (context.isProgramARB == NULL && context.isProgramNV != NULL) context.isProgramARB = (PFNGLISPROGRAMARBPROC)context.isProgramNV;
    if (context.isProgramNV == NULL && context.isProgramARB != NULL) context.isProgramNV = (PFNGLISPROGRAMNVPROC)context.isProgramARB;
    if (context.isQuery == NULL && context.isQueryARB != NULL) context.isQuery = (PFNGLISQUERYPROC)context.isQueryARB;
    if (context.isQueryARB == NULL && context.isQuery != NULL) context.isQueryARB = (PFNGLISQUERYARBPROC)context.isQuery;
    if (context.isRenderbuffer == NULL && context.isRenderbufferEXT != NULL) context.isRenderbuffer = (PFNGLISRENDERBUFFERPROC)context.isRenderbufferEXT;
    if (context.isRenderbufferEXT == NULL && context.isRenderbuffer != NULL) context.isRenderbufferEXT = (PFNGLISRENDERBUFFEREXTPROC)context.isRenderbuffer;
    if (context.isSync == NULL && context.isSyncAPPLE != NULL) context.isSync = (PFNGLISSYNCPROC)context.isSyncAPPLE;
    if (context.isSyncAPPLE == NULL && context.isSync != NULL) context.isSyncAPPLE = (PFNGLISSYNCAPPLEPROC)context.isSync;
    if (context.isVertexArray == NULL && context.isVertexArrayAPPLE != NULL) context.isVertexArray = (PFNGLISVERTEXARRAYPROC)context.isVertexArrayAPPLE;
    if (context.isVertexArray == NULL && context.isVertexArrayOES != NULL) context.isVertexArray = (PFNGLISVERTEXARRAYPROC)context.isVertexArrayOES;
    if (context.isVertexArrayAPPLE == NULL && context.isVertexArray != NULL) context.isVertexArrayAPPLE = (PFNGLISVERTEXARRAYAPPLEPROC)context.isVertexArray;
    if (context.isVertexArrayAPPLE == NULL && context.isVertexArrayOES != NULL) context.isVertexArrayAPPLE = (PFNGLISVERTEXARRAYAPPLEPROC)context.isVertexArrayOES;
    if (context.isVertexArrayOES == NULL && context.isVertexArray != NULL) context.isVertexArrayOES = (PFNGLISVERTEXARRAYOESPROC)context.isVertexArray;
    if (context.isVertexArrayOES == NULL && context.isVertexArrayAPPLE != NULL) context.isVertexArrayOES = (PFNGLISVERTEXARRAYOESPROC)context.isVertexArrayAPPLE;
    if (context.linkProgram == NULL && context.linkProgramARB != NULL) context.linkProgram = (PFNGLLINKPROGRAMPROC)context.linkProgramARB;
    if (context.linkProgramARB == NULL && context.linkProgram != NULL) context.linkProgramARB = (PFNGLLINKPROGRAMARBPROC)context.linkProgram;
    if (context.mapBuffer == NULL && context.mapBufferARB != NULL) context.mapBuffer = (PFNGLMAPBUFFERPROC)context.mapBufferARB;
    if (context.mapBuffer == NULL && context.mapBufferOES != NULL) context.mapBuffer = (PFNGLMAPBUFFERPROC)context.mapBufferOES;
    if (context.mapBufferARB == NULL && context.mapBuffer != NULL) context.mapBufferARB = (PFNGLMAPBUFFERARBPROC)context.mapBuffer;
    if (context.mapBufferARB == NULL && context.mapBufferOES != NULL) context.mapBufferARB = (PFNGLMAPBUFFERARBPROC)context.mapBufferOES;
    if (context.mapBufferOES == NULL && context.mapBuffer != NULL) context.mapBufferOES = (PFNGLMAPBUFFEROESPROC)context.mapBuffer;
    if (context.mapBufferOES == NULL && context.mapBufferARB != NULL) context.mapBufferOES = (PFNGLMAPBUFFEROESPROC)context.mapBufferARB;
    if (context.mapBufferRange == NULL && context.mapBufferRangeEXT != NULL) context.mapBufferRange = (PFNGLMAPBUFFERRANGEPROC)context.mapBufferRangeEXT;
    if (context.mapBufferRangeEXT == NULL && context.mapBufferRange != NULL) context.mapBufferRangeEXT = (PFNGLMAPBUFFERRANGEEXTPROC)context.mapBufferRange;
    if (context.minSampleShading == NULL && context.minSampleShadingOES != NULL) context.minSampleShading = (PFNGLMINSAMPLESHADINGPROC)context.minSampleShadingOES;
    if (context.minSampleShadingOES == NULL && context.minSampleShading != NULL) context.minSampleShadingOES = (PFNGLMINSAMPLESHADINGOESPROC)context.minSampleShading;
    if (context.multiDrawArrays == NULL && context.multiDrawArraysEXT != NULL) context.multiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)context.multiDrawArraysEXT;
    if (context.multiDrawArraysEXT == NULL && context.multiDrawArrays != NULL) context.multiDrawArraysEXT = (PFNGLMULTIDRAWARRAYSEXTPROC)context.multiDrawArrays;
    if (context.multiDrawElements == NULL && context.multiDrawElementsEXT != NULL) context.multiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)context.multiDrawElementsEXT;
    if (context.multiDrawElementsBaseVertex == NULL && context.multiDrawElementsBaseVertexEXT != NULL) context.multiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)context.multiDrawElementsBaseVertexEXT;
    if (context.multiDrawElementsBaseVertexEXT == NULL && context.multiDrawElementsBaseVertex != NULL) context.multiDrawElementsBaseVertexEXT = (PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC)context.multiDrawElementsBaseVertex;
    if (context.multiDrawElementsEXT == NULL && context.multiDrawElements != NULL) context.multiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC)context.multiDrawElements;
    if (context.objectLabel == NULL && context.objectLabelKHR != NULL) context.objectLabel = (PFNGLOBJECTLABELPROC)context.objectLabelKHR;
    if (context.objectLabelKHR == NULL && context.objectLabel != NULL) context.objectLabelKHR = (PFNGLOBJECTLABELKHRPROC)context.objectLabel;
    if (context.objectPtrLabel == NULL && context.objectPtrLabelKHR != NULL) context.objectPtrLabel = (PFNGLOBJECTPTRLABELPROC)context.objectPtrLabelKHR;
    if (context.objectPtrLabelKHR == NULL && context.objectPtrLabel != NULL) context.objectPtrLabelKHR = (PFNGLOBJECTPTRLABELKHRPROC)context.objectPtrLabel;
    if (context.patchParameteri == NULL && context.patchParameteriEXT != NULL) context.patchParameteri = (PFNGLPATCHPARAMETERIPROC)context.patchParameteriEXT;
    if (context.patchParameteri == NULL && context.patchParameteriOES != NULL) context.patchParameteri = (PFNGLPATCHPARAMETERIPROC)context.patchParameteriOES;
    if (context.patchParameteriEXT == NULL && context.patchParameteri != NULL) context.patchParameteriEXT = (PFNGLPATCHPARAMETERIEXTPROC)context.patchParameteri;
    if (context.patchParameteriEXT == NULL && context.patchParameteriOES != NULL) context.patchParameteriEXT = (PFNGLPATCHPARAMETERIEXTPROC)context.patchParameteriOES;
    if (context.patchParameteriOES == NULL && context.patchParameteri != NULL) context.patchParameteriOES = (PFNGLPATCHPARAMETERIOESPROC)context.patchParameteri;
    if (context.patchParameteriOES == NULL && context.patchParameteriEXT != NULL) context.patchParameteriOES = (PFNGLPATCHPARAMETERIOESPROC)context.patchParameteriEXT;
    if (context.pointParameterf == NULL && context.pointParameterfARB != NULL) context.pointParameterf = (PFNGLPOINTPARAMETERFPROC)context.pointParameterfARB;
    if (context.pointParameterf == NULL && context.pointParameterfEXT != NULL) context.pointParameterf = (PFNGLPOINTPARAMETERFPROC)context.pointParameterfEXT;
    if (context.pointParameterf == NULL && context.pointParameterfSGIS != NULL) context.pointParameterf = (PFNGLPOINTPARAMETERFPROC)context.pointParameterfSGIS;
    if (context.pointParameterfARB == NULL && context.pointParameterf != NULL) context.pointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC)context.pointParameterf;
    if (context.pointParameterfARB == NULL && context.pointParameterfEXT != NULL) context.pointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC)context.pointParameterfEXT;
    if (context.pointParameterfARB == NULL && context.pointParameterfSGIS != NULL) context.pointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC)context.pointParameterfSGIS;
    if (context.pointParameterfEXT == NULL && context.pointParameterf != NULL) context.pointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC)context.pointParameterf;
    if (context.pointParameterfEXT == NULL && context.pointParameterfARB != NULL) context.pointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC)context.pointParameterfARB;
    if (context.pointParameterfEXT == NULL && context.pointParameterfSGIS != NULL) context.pointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC)context.pointParameterfSGIS;
    if (context.pointParameterfSGIS == NULL && context.pointParameterf != NULL) context.pointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC)context.pointParameterf;
    if (context.pointParameterfSGIS == NULL && context.pointParameterfARB != NULL) context.pointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC)context.pointParameterfARB;
    if (context.pointParameterfSGIS == NULL && context.pointParameterfEXT != NULL) context.pointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC)context.pointParameterfEXT;
    if (context.pointParameterfv == NULL && context.pointParameterfvARB != NULL) context.pointParameterfv = (PFNGLPOINTPARAMETERFVPROC)context.pointParameterfvARB;
    if (context.pointParameterfv == NULL && context.pointParameterfvEXT != NULL) context.pointParameterfv = (PFNGLPOINTPARAMETERFVPROC)context.pointParameterfvEXT;
    if (context.pointParameterfv == NULL && context.pointParameterfvSGIS != NULL) context.pointParameterfv = (PFNGLPOINTPARAMETERFVPROC)context.pointParameterfvSGIS;
    if (context.pointParameterfvARB == NULL && context.pointParameterfv != NULL) context.pointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC)context.pointParameterfv;
    if (context.pointParameterfvARB == NULL && context.pointParameterfvEXT != NULL) context.pointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC)context.pointParameterfvEXT;
    if (context.pointParameterfvARB == NULL && context.pointParameterfvSGIS != NULL) context.pointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC)context.pointParameterfvSGIS;
    if (context.pointParameterfvEXT == NULL && context.pointParameterfv != NULL) context.pointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC)context.pointParameterfv;
    if (context.pointParameterfvEXT == NULL && context.pointParameterfvARB != NULL) context.pointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC)context.pointParameterfvARB;
    if (context.pointParameterfvEXT == NULL && context.pointParameterfvSGIS != NULL) context.pointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC)context.pointParameterfvSGIS;
    if (context.pointParameterfvSGIS == NULL && context.pointParameterfv != NULL) context.pointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC)context.pointParameterfv;
    if (context.pointParameterfvSGIS == NULL && context.pointParameterfvARB != NULL) context.pointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC)context.pointParameterfvARB;
    if (context.pointParameterfvSGIS == NULL && context.pointParameterfvEXT != NULL) context.pointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC)context.pointParameterfvEXT;
    if (context.pointParameteri == NULL && context.pointParameteriNV != NULL) context.pointParameteri = (PFNGLPOINTPARAMETERIPROC)context.pointParameteriNV;
    if (context.pointParameteriNV == NULL && context.pointParameteri != NULL) context.pointParameteriNV = (PFNGLPOINTPARAMETERINVPROC)context.pointParameteri;
    if (context.pointParameteriv == NULL && context.pointParameterivNV != NULL) context.pointParameteriv = (PFNGLPOINTPARAMETERIVPROC)context.pointParameterivNV;
    if (context.pointParameterivNV == NULL && context.pointParameteriv != NULL) context.pointParameterivNV = (PFNGLPOINTPARAMETERIVNVPROC)context.pointParameteriv;
    if (context.popDebugGroup == NULL && context.popDebugGroupKHR != NULL) context.popDebugGroup = (PFNGLPOPDEBUGGROUPPROC)context.popDebugGroupKHR;
    if (context.popDebugGroupKHR == NULL && context.popDebugGroup != NULL) context.popDebugGroupKHR = (PFNGLPOPDEBUGGROUPKHRPROC)context.popDebugGroup;
    if (context.primitiveBoundingBox == NULL && context.primitiveBoundingBoxEXT != NULL) context.primitiveBoundingBox = (PFNGLPRIMITIVEBOUNDINGBOXPROC)context.primitiveBoundingBoxEXT;
    if (context.primitiveBoundingBox == NULL && context.primitiveBoundingBoxOES != NULL) context.primitiveBoundingBox = (PFNGLPRIMITIVEBOUNDINGBOXPROC)context.primitiveBoundingBoxOES;
    if (context.primitiveBoundingBoxEXT == NULL && context.primitiveBoundingBox != NULL) context.primitiveBoundingBoxEXT = (PFNGLPRIMITIVEBOUNDINGBOXEXTPROC)context.primitiveBoundingBox;
    if (context.primitiveBoundingBoxEXT == NULL && context.primitiveBoundingBoxOES != NULL) context.primitiveBoundingBoxEXT = (PFNGLPRIMITIVEBOUNDINGBOXEXTPROC)context.primitiveBoundingBoxOES;
    if (context.primitiveBoundingBoxOES == NULL && context.primitiveBoundingBox != NULL) context.primitiveBoundingBoxOES = (PFNGLPRIMITIVEBOUNDINGBOXOESPROC)context.primitiveBoundingBox;
    if (context.primitiveBoundingBoxOES == NULL && context.primitiveBoundingBoxEXT != NULL) context.primitiveBoundingBoxOES = (PFNGLPRIMITIVEBOUNDINGBOXOESPROC)context.primitiveBoundingBoxEXT;
    if (context.programBinary == NULL && context.programBinaryOES != NULL) context.programBinary = (PFNGLPROGRAMBINARYPROC)context.programBinaryOES;
    if (context.programBinaryOES == NULL && context.programBinary != NULL) context.programBinaryOES = (PFNGLPROGRAMBINARYOESPROC)context.programBinary;
    if (context.programParameteri == NULL && context.programParameteriARB != NULL) context.programParameteri = (PFNGLPROGRAMPARAMETERIPROC)context.programParameteriARB;
    if (context.programParameteri == NULL && context.programParameteriEXT != NULL) context.programParameteri = (PFNGLPROGRAMPARAMETERIPROC)context.programParameteriEXT;
    if (context.programParameteriARB == NULL && context.programParameteri != NULL) context.programParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC)context.programParameteri;
    if (context.programParameteriARB == NULL && context.programParameteriEXT != NULL) context.programParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC)context.programParameteriEXT;
    if (context.programParameteriEXT == NULL && context.programParameteri != NULL) context.programParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC)context.programParameteri;
    if (context.programParameteriEXT == NULL && context.programParameteriARB != NULL) context.programParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC)context.programParameteriARB;
    if (context.programUniform1f == NULL && context.programUniform1fEXT != NULL) context.programUniform1f = (PFNGLPROGRAMUNIFORM1FPROC)context.programUniform1fEXT;
    if (context.programUniform1fEXT == NULL && context.programUniform1f != NULL) context.programUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC)context.programUniform1f;
    if (context.programUniform1fv == NULL && context.programUniform1fvEXT != NULL) context.programUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC)context.programUniform1fvEXT;
    if (context.programUniform1fvEXT == NULL && context.programUniform1fv != NULL) context.programUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC)context.programUniform1fv;
    if (context.programUniform1i == NULL && context.programUniform1iEXT != NULL) context.programUniform1i = (PFNGLPROGRAMUNIFORM1IPROC)context.programUniform1iEXT;
    if (context.programUniform1iEXT == NULL && context.programUniform1i != NULL) context.programUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC)context.programUniform1i;
    if (context.programUniform1iv == NULL && context.programUniform1ivEXT != NULL) context.programUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC)context.programUniform1ivEXT;
    if (context.programUniform1ivEXT == NULL && context.programUniform1iv != NULL) context.programUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC)context.programUniform1iv;
    if (context.programUniform1ui == NULL && context.programUniform1uiEXT != NULL) context.programUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC)context.programUniform1uiEXT;
    if (context.programUniform1uiEXT == NULL && context.programUniform1ui != NULL) context.programUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC)context.programUniform1ui;
    if (context.programUniform1uiv == NULL && context.programUniform1uivEXT != NULL) context.programUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC)context.programUniform1uivEXT;
    if (context.programUniform1uivEXT == NULL && context.programUniform1uiv != NULL) context.programUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC)context.programUniform1uiv;
    if (context.programUniform2f == NULL && context.programUniform2fEXT != NULL) context.programUniform2f = (PFNGLPROGRAMUNIFORM2FPROC)context.programUniform2fEXT;
    if (context.programUniform2fEXT == NULL && context.programUniform2f != NULL) context.programUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC)context.programUniform2f;
    if (context.programUniform2fv == NULL && context.programUniform2fvEXT != NULL) context.programUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC)context.programUniform2fvEXT;
    if (context.programUniform2fvEXT == NULL && context.programUniform2fv != NULL) context.programUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC)context.programUniform2fv;
    if (context.programUniform2i == NULL && context.programUniform2iEXT != NULL) context.programUniform2i = (PFNGLPROGRAMUNIFORM2IPROC)context.programUniform2iEXT;
    if (context.programUniform2iEXT == NULL && context.programUniform2i != NULL) context.programUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC)context.programUniform2i;
    if (context.programUniform2iv == NULL && context.programUniform2ivEXT != NULL) context.programUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC)context.programUniform2ivEXT;
    if (context.programUniform2ivEXT == NULL && context.programUniform2iv != NULL) context.programUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC)context.programUniform2iv;
    if (context.programUniform2ui == NULL && context.programUniform2uiEXT != NULL) context.programUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC)context.programUniform2uiEXT;
    if (context.programUniform2uiEXT == NULL && context.programUniform2ui != NULL) context.programUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC)context.programUniform2ui;
    if (context.programUniform2uiv == NULL && context.programUniform2uivEXT != NULL) context.programUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC)context.programUniform2uivEXT;
    if (context.programUniform2uivEXT == NULL && context.programUniform2uiv != NULL) context.programUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC)context.programUniform2uiv;
    if (context.programUniform3f == NULL && context.programUniform3fEXT != NULL) context.programUniform3f = (PFNGLPROGRAMUNIFORM3FPROC)context.programUniform3fEXT;
    if (context.programUniform3fEXT == NULL && context.programUniform3f != NULL) context.programUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC)context.programUniform3f;
    if (context.programUniform3fv == NULL && context.programUniform3fvEXT != NULL) context.programUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC)context.programUniform3fvEXT;
    if (context.programUniform3fvEXT == NULL && context.programUniform3fv != NULL) context.programUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC)context.programUniform3fv;
    if (context.programUniform3i == NULL && context.programUniform3iEXT != NULL) context.programUniform3i = (PFNGLPROGRAMUNIFORM3IPROC)context.programUniform3iEXT;
    if (context.programUniform3iEXT == NULL && context.programUniform3i != NULL) context.programUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC)context.programUniform3i;
    if (context.programUniform3iv == NULL && context.programUniform3ivEXT != NULL) context.programUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC)context.programUniform3ivEXT;
    if (context.programUniform3ivEXT == NULL && context.programUniform3iv != NULL) context.programUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC)context.programUniform3iv;
    if (context.programUniform3ui == NULL && context.programUniform3uiEXT != NULL) context.programUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC)context.programUniform3uiEXT;
    if (context.programUniform3uiEXT == NULL && context.programUniform3ui != NULL) context.programUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC)context.programUniform3ui;
    if (context.programUniform3uiv == NULL && context.programUniform3uivEXT != NULL) context.programUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC)context.programUniform3uivEXT;
    if (context.programUniform3uivEXT == NULL && context.programUniform3uiv != NULL) context.programUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC)context.programUniform3uiv;
    if (context.programUniform4f == NULL && context.programUniform4fEXT != NULL) context.programUniform4f = (PFNGLPROGRAMUNIFORM4FPROC)context.programUniform4fEXT;
    if (context.programUniform4fEXT == NULL && context.programUniform4f != NULL) context.programUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC)context.programUniform4f;
    if (context.programUniform4fv == NULL && context.programUniform4fvEXT != NULL) context.programUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC)context.programUniform4fvEXT;
    if (context.programUniform4fvEXT == NULL && context.programUniform4fv != NULL) context.programUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC)context.programUniform4fv;
    if (context.programUniform4i == NULL && context.programUniform4iEXT != NULL) context.programUniform4i = (PFNGLPROGRAMUNIFORM4IPROC)context.programUniform4iEXT;
    if (context.programUniform4iEXT == NULL && context.programUniform4i != NULL) context.programUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC)context.programUniform4i;
    if (context.programUniform4iv == NULL && context.programUniform4ivEXT != NULL) context.programUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC)context.programUniform4ivEXT;
    if (context.programUniform4ivEXT == NULL && context.programUniform4iv != NULL) context.programUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC)context.programUniform4iv;
    if (context.programUniform4ui == NULL && context.programUniform4uiEXT != NULL) context.programUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC)context.programUniform4uiEXT;
    if (context.programUniform4uiEXT == NULL && context.programUniform4ui != NULL) context.programUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC)context.programUniform4ui;
    if (context.programUniform4uiv == NULL && context.programUniform4uivEXT != NULL) context.programUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC)context.programUniform4uivEXT;
    if (context.programUniform4uivEXT == NULL && context.programUniform4uiv != NULL) context.programUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC)context.programUniform4uiv;
    if (context.programUniformMatrix2fv == NULL && context.programUniformMatrix2fvEXT != NULL) context.programUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC)context.programUniformMatrix2fvEXT;
    if (context.programUniformMatrix2fvEXT == NULL && context.programUniformMatrix2fv != NULL) context.programUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC)context.programUniformMatrix2fv;
    if (context.programUniformMatrix2x3fv == NULL && context.programUniformMatrix2x3fvEXT != NULL) context.programUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)context.programUniformMatrix2x3fvEXT;
    if (context.programUniformMatrix2x3fvEXT == NULL && context.programUniformMatrix2x3fv != NULL) context.programUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC)context.programUniformMatrix2x3fv;
    if (context.programUniformMatrix2x4fv == NULL && context.programUniformMatrix2x4fvEXT != NULL) context.programUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)context.programUniformMatrix2x4fvEXT;
    if (context.programUniformMatrix2x4fvEXT == NULL && context.programUniformMatrix2x4fv != NULL) context.programUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC)context.programUniformMatrix2x4fv;
    if (context.programUniformMatrix3fv == NULL && context.programUniformMatrix3fvEXT != NULL) context.programUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC)context.programUniformMatrix3fvEXT;
    if (context.programUniformMatrix3fvEXT == NULL && context.programUniformMatrix3fv != NULL) context.programUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC)context.programUniformMatrix3fv;
    if (context.programUniformMatrix3x2fv == NULL && context.programUniformMatrix3x2fvEXT != NULL) context.programUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)context.programUniformMatrix3x2fvEXT;
    if (context.programUniformMatrix3x2fvEXT == NULL && context.programUniformMatrix3x2fv != NULL) context.programUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC)context.programUniformMatrix3x2fv;
    if (context.programUniformMatrix3x4fv == NULL && context.programUniformMatrix3x4fvEXT != NULL) context.programUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)context.programUniformMatrix3x4fvEXT;
    if (context.programUniformMatrix3x4fvEXT == NULL && context.programUniformMatrix3x4fv != NULL) context.programUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC)context.programUniformMatrix3x4fv;
    if (context.programUniformMatrix4fv == NULL && context.programUniformMatrix4fvEXT != NULL) context.programUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC)context.programUniformMatrix4fvEXT;
    if (context.programUniformMatrix4fvEXT == NULL && context.programUniformMatrix4fv != NULL) context.programUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)context.programUniformMatrix4fv;
    if (context.programUniformMatrix4x2fv == NULL && context.programUniformMatrix4x2fvEXT != NULL) context.programUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)context.programUniformMatrix4x2fvEXT;
    if (context.programUniformMatrix4x2fvEXT == NULL && context.programUniformMatrix4x2fv != NULL) context.programUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC)context.programUniformMatrix4x2fv;
    if (context.programUniformMatrix4x3fv == NULL && context.programUniformMatrix4x3fvEXT != NULL) context.programUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)context.programUniformMatrix4x3fvEXT;
    if (context.programUniformMatrix4x3fvEXT == NULL && context.programUniformMatrix4x3fv != NULL) context.programUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC)context.programUniformMatrix4x3fv;
    if (context.provokingVertex == NULL && context.provokingVertexEXT != NULL) context.provokingVertex = (PFNGLPROVOKINGVERTEXPROC)context.provokingVertexEXT;
    if (context.provokingVertexEXT == NULL && context.provokingVertex != NULL) context.provokingVertexEXT = (PFNGLPROVOKINGVERTEXEXTPROC)context.provokingVertex;
    if (context.pushDebugGroup == NULL && context.pushDebugGroupKHR != NULL) context.pushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC)context.pushDebugGroupKHR;
    if (context.pushDebugGroupKHR == NULL && context.pushDebugGroup != NULL) context.pushDebugGroupKHR = (PFNGLPUSHDEBUGGROUPKHRPROC)context.pushDebugGroup;
    if (context.readnPixels == NULL && context.readnPixelsEXT != NULL) context.readnPixels = (PFNGLREADNPIXELSPROC)context.readnPixelsEXT;
    if (context.readnPixels == NULL && context.readnPixelsKHR != NULL) context.readnPixels = (PFNGLREADNPIXELSPROC)context.readnPixelsKHR;
    if (context.readnPixelsEXT == NULL && context.readnPixels != NULL) context.readnPixelsEXT = (PFNGLREADNPIXELSEXTPROC)context.readnPixels;
    if (context.readnPixelsEXT == NULL && context.readnPixelsKHR != NULL) context.readnPixelsEXT = (PFNGLREADNPIXELSEXTPROC)context.readnPixelsKHR;
    if (context.readnPixelsKHR == NULL && context.readnPixels != NULL) context.readnPixelsKHR = (PFNGLREADNPIXELSKHRPROC)context.readnPixels;
    if (context.readnPixelsKHR == NULL && context.readnPixelsEXT != NULL) context.readnPixelsKHR = (PFNGLREADNPIXELSKHRPROC)context.readnPixelsEXT;
    if (context.renderbufferStorage == NULL && context.renderbufferStorageEXT != NULL) context.renderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)context.renderbufferStorageEXT;
    if (context.renderbufferStorageEXT == NULL && context.renderbufferStorage != NULL) context.renderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC)context.renderbufferStorage;
    if (context.renderbufferStorageMultisample == NULL && context.renderbufferStorageMultisampleEXT != NULL) context.renderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)context.renderbufferStorageMultisampleEXT;
    if (context.renderbufferStorageMultisample == NULL && context.renderbufferStorageMultisampleNV != NULL) context.renderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)context.renderbufferStorageMultisampleNV;
    if (context.renderbufferStorageMultisampleEXT == NULL && context.renderbufferStorageMultisample != NULL) context.renderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)context.renderbufferStorageMultisample;
    if (context.renderbufferStorageMultisampleEXT == NULL && context.renderbufferStorageMultisampleNV != NULL) context.renderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)context.renderbufferStorageMultisampleNV;
    if (context.renderbufferStorageMultisampleNV == NULL && context.renderbufferStorageMultisample != NULL) context.renderbufferStorageMultisampleNV = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC)context.renderbufferStorageMultisample;
    if (context.renderbufferStorageMultisampleNV == NULL && context.renderbufferStorageMultisampleEXT != NULL) context.renderbufferStorageMultisampleNV = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC)context.renderbufferStorageMultisampleEXT;
    if (context.sampleCoverage == NULL && context.sampleCoverageARB != NULL) context.sampleCoverage = (PFNGLSAMPLECOVERAGEPROC)context.sampleCoverageARB;
    if (context.sampleCoverageARB == NULL && context.sampleCoverage != NULL) context.sampleCoverageARB = (PFNGLSAMPLECOVERAGEARBPROC)context.sampleCoverage;
    if (context.samplerParameterIiv == NULL && context.samplerParameterIivEXT != NULL) context.samplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC)context.samplerParameterIivEXT;
    if (context.samplerParameterIiv == NULL && context.samplerParameterIivOES != NULL) context.samplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC)context.samplerParameterIivOES;
    if (context.samplerParameterIivEXT == NULL && context.samplerParameterIiv != NULL) context.samplerParameterIivEXT = (PFNGLSAMPLERPARAMETERIIVEXTPROC)context.samplerParameterIiv;
    if (context.samplerParameterIivEXT == NULL && context.samplerParameterIivOES != NULL) context.samplerParameterIivEXT = (PFNGLSAMPLERPARAMETERIIVEXTPROC)context.samplerParameterIivOES;
    if (context.samplerParameterIivOES == NULL && context.samplerParameterIiv != NULL) context.samplerParameterIivOES = (PFNGLSAMPLERPARAMETERIIVOESPROC)context.samplerParameterIiv;
    if (context.samplerParameterIivOES == NULL && context.samplerParameterIivEXT != NULL) context.samplerParameterIivOES = (PFNGLSAMPLERPARAMETERIIVOESPROC)context.samplerParameterIivEXT;
    if (context.samplerParameterIuiv == NULL && context.samplerParameterIuivEXT != NULL) context.samplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC)context.samplerParameterIuivEXT;
    if (context.samplerParameterIuiv == NULL && context.samplerParameterIuivOES != NULL) context.samplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC)context.samplerParameterIuivOES;
    if (context.samplerParameterIuivEXT == NULL && context.samplerParameterIuiv != NULL) context.samplerParameterIuivEXT = (PFNGLSAMPLERPARAMETERIUIVEXTPROC)context.samplerParameterIuiv;
    if (context.samplerParameterIuivEXT == NULL && context.samplerParameterIuivOES != NULL) context.samplerParameterIuivEXT = (PFNGLSAMPLERPARAMETERIUIVEXTPROC)context.samplerParameterIuivOES;
    if (context.samplerParameterIuivOES == NULL && context.samplerParameterIuiv != NULL) context.samplerParameterIuivOES = (PFNGLSAMPLERPARAMETERIUIVOESPROC)context.samplerParameterIuiv;
    if (context.samplerParameterIuivOES == NULL && context.samplerParameterIuivEXT != NULL) context.samplerParameterIuivOES = (PFNGLSAMPLERPARAMETERIUIVOESPROC)context.samplerParameterIuivEXT;
    if (context.shaderSource == NULL && context.shaderSourceARB != NULL) context.shaderSource = (PFNGLSHADERSOURCEPROC)context.shaderSourceARB;
    if (context.shaderSourceARB == NULL && context.shaderSource != NULL) context.shaderSourceARB = (PFNGLSHADERSOURCEARBPROC)context.shaderSource;
    if (context.stencilOpSeparate == NULL && context.stencilOpSeparateATI != NULL) context.stencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)context.stencilOpSeparateATI;
    if (context.stencilOpSeparateATI == NULL && context.stencilOpSeparate != NULL) context.stencilOpSeparateATI = (PFNGLSTENCILOPSEPARATEATIPROC)context.stencilOpSeparate;
    if (context.texBuffer == NULL && context.texBufferARB != NULL) context.texBuffer = (PFNGLTEXBUFFERPROC)context.texBufferARB;
    if (context.texBuffer == NULL && context.texBufferEXT != NULL) context.texBuffer = (PFNGLTEXBUFFERPROC)context.texBufferEXT;
    if (context.texBuffer == NULL && context.texBufferOES != NULL) context.texBuffer = (PFNGLTEXBUFFERPROC)context.texBufferOES;
    if (context.texBufferARB == NULL && context.texBuffer != NULL) context.texBufferARB = (PFNGLTEXBUFFERARBPROC)context.texBuffer;
    if (context.texBufferARB == NULL && context.texBufferEXT != NULL) context.texBufferARB = (PFNGLTEXBUFFERARBPROC)context.texBufferEXT;
    if (context.texBufferARB == NULL && context.texBufferOES != NULL) context.texBufferARB = (PFNGLTEXBUFFERARBPROC)context.texBufferOES;
    if (context.texBufferEXT == NULL && context.texBuffer != NULL) context.texBufferEXT = (PFNGLTEXBUFFEREXTPROC)context.texBuffer;
    if (context.texBufferEXT == NULL && context.texBufferARB != NULL) context.texBufferEXT = (PFNGLTEXBUFFEREXTPROC)context.texBufferARB;
    if (context.texBufferEXT == NULL && context.texBufferOES != NULL) context.texBufferEXT = (PFNGLTEXBUFFEREXTPROC)context.texBufferOES;
    if (context.texBufferOES == NULL && context.texBuffer != NULL) context.texBufferOES = (PFNGLTEXBUFFEROESPROC)context.texBuffer;
    if (context.texBufferOES == NULL && context.texBufferARB != NULL) context.texBufferOES = (PFNGLTEXBUFFEROESPROC)context.texBufferARB;
    if (context.texBufferOES == NULL && context.texBufferEXT != NULL) context.texBufferOES = (PFNGLTEXBUFFEROESPROC)context.texBufferEXT;
    if (context.texBufferRange == NULL && context.texBufferRangeEXT != NULL) context.texBufferRange = (PFNGLTEXBUFFERRANGEPROC)context.texBufferRangeEXT;
    if (context.texBufferRange == NULL && context.texBufferRangeOES != NULL) context.texBufferRange = (PFNGLTEXBUFFERRANGEPROC)context.texBufferRangeOES;
    if (context.texBufferRangeEXT == NULL && context.texBufferRange != NULL) context.texBufferRangeEXT = (PFNGLTEXBUFFERRANGEEXTPROC)context.texBufferRange;
    if (context.texBufferRangeEXT == NULL && context.texBufferRangeOES != NULL) context.texBufferRangeEXT = (PFNGLTEXBUFFERRANGEEXTPROC)context.texBufferRangeOES;
    if (context.texBufferRangeOES == NULL && context.texBufferRange != NULL) context.texBufferRangeOES = (PFNGLTEXBUFFERRANGEOESPROC)context.texBufferRange;
    if (context.texBufferRangeOES == NULL && context.texBufferRangeEXT != NULL) context.texBufferRangeOES = (PFNGLTEXBUFFERRANGEOESPROC)context.texBufferRangeEXT;
    if (context.texImage3D == NULL && context.texImage3DEXT != NULL) context.texImage3D = (PFNGLTEXIMAGE3DPROC)context.texImage3DEXT;
    if (context.texImage3DEXT == NULL && context.texImage3D != NULL) context.texImage3DEXT = (PFNGLTEXIMAGE3DEXTPROC)context.texImage3D;
    if (context.texParameterIiv == NULL && context.texParameterIivEXT != NULL) context.texParameterIiv = (PFNGLTEXPARAMETERIIVPROC)context.texParameterIivEXT;
    if (context.texParameterIiv == NULL && context.texParameterIivOES != NULL) context.texParameterIiv = (PFNGLTEXPARAMETERIIVPROC)context.texParameterIivOES;
    if (context.texParameterIivEXT == NULL && context.texParameterIiv != NULL) context.texParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC)context.texParameterIiv;
    if (context.texParameterIivEXT == NULL && context.texParameterIivOES != NULL) context.texParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC)context.texParameterIivOES;
    if (context.texParameterIivOES == NULL && context.texParameterIiv != NULL) context.texParameterIivOES = (PFNGLTEXPARAMETERIIVOESPROC)context.texParameterIiv;
    if (context.texParameterIivOES == NULL && context.texParameterIivEXT != NULL) context.texParameterIivOES = (PFNGLTEXPARAMETERIIVOESPROC)context.texParameterIivEXT;
    if (context.texParameterIuiv == NULL && context.texParameterIuivEXT != NULL) context.texParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC)context.texParameterIuivEXT;
    if (context.texParameterIuiv == NULL && context.texParameterIuivOES != NULL) context.texParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC)context.texParameterIuivOES;
    if (context.texParameterIuivEXT == NULL && context.texParameterIuiv != NULL) context.texParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC)context.texParameterIuiv;
    if (context.texParameterIuivEXT == NULL && context.texParameterIuivOES != NULL) context.texParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC)context.texParameterIuivOES;
    if (context.texParameterIuivOES == NULL && context.texParameterIuiv != NULL) context.texParameterIuivOES = (PFNGLTEXPARAMETERIUIVOESPROC)context.texParameterIuiv;
    if (context.texParameterIuivOES == NULL && context.texParameterIuivEXT != NULL) context.texParameterIuivOES = (PFNGLTEXPARAMETERIUIVOESPROC)context.texParameterIuivEXT;
    if (context.texStorage2D == NULL && context.texStorage2DEXT != NULL) context.texStorage2D = (PFNGLTEXSTORAGE2DPROC)context.texStorage2DEXT;
    if (context.texStorage2DEXT == NULL && context.texStorage2D != NULL) context.texStorage2DEXT = (PFNGLTEXSTORAGE2DEXTPROC)context.texStorage2D;
    if (context.texStorage3D == NULL && context.texStorage3DEXT != NULL) context.texStorage3D = (PFNGLTEXSTORAGE3DPROC)context.texStorage3DEXT;
    if (context.texStorage3DEXT == NULL && context.texStorage3D != NULL) context.texStorage3DEXT = (PFNGLTEXSTORAGE3DEXTPROC)context.texStorage3D;
    if (context.texStorage3DMultisample == NULL && context.texStorage3DMultisampleOES != NULL) context.texStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC)context.texStorage3DMultisampleOES;
    if (context.texStorage3DMultisampleOES == NULL && context.texStorage3DMultisample != NULL) context.texStorage3DMultisampleOES = (PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC)context.texStorage3DMultisample;
    if (context.texSubImage1D == NULL && context.texSubImage1DEXT != NULL) context.texSubImage1D = (PFNGLTEXSUBIMAGE1DPROC)context.texSubImage1DEXT;
    if (context.texSubImage1DEXT == NULL && context.texSubImage1D != NULL) context.texSubImage1DEXT = (PFNGLTEXSUBIMAGE1DEXTPROC)context.texSubImage1D;
    if (context.texSubImage2D == NULL && context.texSubImage2DEXT != NULL) context.texSubImage2D = (PFNGLTEXSUBIMAGE2DPROC)context.texSubImage2DEXT;
    if (context.texSubImage2DEXT == NULL && context.texSubImage2D != NULL) context.texSubImage2DEXT = (PFNGLTEXSUBIMAGE2DEXTPROC)context.texSubImage2D;
    if (context.texSubImage3D == NULL && context.texSubImage3DEXT != NULL) context.texSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)context.texSubImage3DEXT;
    if (context.texSubImage3DEXT == NULL && context.texSubImage3D != NULL) context.texSubImage3DEXT = (PFNGLTEXSUBIMAGE3DEXTPROC)context.texSubImage3D;
    if (context.transformFeedbackVaryings == NULL && context.transformFeedbackVaryingsEXT != NULL) context.transformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC)context.transformFeedbackVaryingsEXT;
    if (context.transformFeedbackVaryingsEXT == NULL && context.transformFeedbackVaryings != NULL) context.transformFeedbackVaryingsEXT = (PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC)context.transformFeedbackVaryings;
    if (context.uniform1f == NULL && context.uniform1fARB != NULL) context.uniform1f = (PFNGLUNIFORM1FPROC)context.uniform1fARB;
    if (context.uniform1fARB == NULL && context.uniform1f != NULL) context.uniform1fARB = (PFNGLUNIFORM1FARBPROC)context.uniform1f;
    if (context.uniform1fv == NULL && context.uniform1fvARB != NULL) context.uniform1fv = (PFNGLUNIFORM1FVPROC)context.uniform1fvARB;
    if (context.uniform1fvARB == NULL && context.uniform1fv != NULL) context.uniform1fvARB = (PFNGLUNIFORM1FVARBPROC)context.uniform1fv;
    if (context.uniform1i == NULL && context.uniform1iARB != NULL) context.uniform1i = (PFNGLUNIFORM1IPROC)context.uniform1iARB;
    if (context.uniform1iARB == NULL && context.uniform1i != NULL) context.uniform1iARB = (PFNGLUNIFORM1IARBPROC)context.uniform1i;
    if (context.uniform1iv == NULL && context.uniform1ivARB != NULL) context.uniform1iv = (PFNGLUNIFORM1IVPROC)context.uniform1ivARB;
    if (context.uniform1ivARB == NULL && context.uniform1iv != NULL) context.uniform1ivARB = (PFNGLUNIFORM1IVARBPROC)context.uniform1iv;
    if (context.uniform1ui == NULL && context.uniform1uiEXT != NULL) context.uniform1ui = (PFNGLUNIFORM1UIPROC)context.uniform1uiEXT;
    if (context.uniform1uiEXT == NULL && context.uniform1ui != NULL) context.uniform1uiEXT = (PFNGLUNIFORM1UIEXTPROC)context.uniform1ui;
    if (context.uniform1uiv == NULL && context.uniform1uivEXT != NULL) context.uniform1uiv = (PFNGLUNIFORM1UIVPROC)context.uniform1uivEXT;
    if (context.uniform1uivEXT == NULL && context.uniform1uiv != NULL) context.uniform1uivEXT = (PFNGLUNIFORM1UIVEXTPROC)context.uniform1uiv;
    if (context.uniform2f == NULL && context.uniform2fARB != NULL) context.uniform2f = (PFNGLUNIFORM2FPROC)context.uniform2fARB;
    if (context.uniform2fARB == NULL && context.uniform2f != NULL) context.uniform2fARB = (PFNGLUNIFORM2FARBPROC)context.uniform2f;
    if (context.uniform2fv == NULL && context.uniform2fvARB != NULL) context.uniform2fv = (PFNGLUNIFORM2FVPROC)context.uniform2fvARB;
    if (context.uniform2fvARB == NULL && context.uniform2fv != NULL) context.uniform2fvARB = (PFNGLUNIFORM2FVARBPROC)context.uniform2fv;
    if (context.uniform2i == NULL && context.uniform2iARB != NULL) context.uniform2i = (PFNGLUNIFORM2IPROC)context.uniform2iARB;
    if (context.uniform2iARB == NULL && context.uniform2i != NULL) context.uniform2iARB = (PFNGLUNIFORM2IARBPROC)context.uniform2i;
    if (context.uniform2iv == NULL && context.uniform2ivARB != NULL) context.uniform2iv = (PFNGLUNIFORM2IVPROC)context.uniform2ivARB;
    if (context.uniform2ivARB == NULL && context.uniform2iv != NULL) context.uniform2ivARB = (PFNGLUNIFORM2IVARBPROC)context.uniform2iv;
    if (context.uniform2ui == NULL && context.uniform2uiEXT != NULL) context.uniform2ui = (PFNGLUNIFORM2UIPROC)context.uniform2uiEXT;
    if (context.uniform2uiEXT == NULL && context.uniform2ui != NULL) context.uniform2uiEXT = (PFNGLUNIFORM2UIEXTPROC)context.uniform2ui;
    if (context.uniform2uiv == NULL && context.uniform2uivEXT != NULL) context.uniform2uiv = (PFNGLUNIFORM2UIVPROC)context.uniform2uivEXT;
    if (context.uniform2uivEXT == NULL && context.uniform2uiv != NULL) context.uniform2uivEXT = (PFNGLUNIFORM2UIVEXTPROC)context.uniform2uiv;
    if (context.uniform3f == NULL && context.uniform3fARB != NULL) context.uniform3f = (PFNGLUNIFORM3FPROC)context.uniform3fARB;
    if (context.uniform3fARB == NULL && context.uniform3f != NULL) context.uniform3fARB = (PFNGLUNIFORM3FARBPROC)context.uniform3f;
    if (context.uniform3fv == NULL && context.uniform3fvARB != NULL) context.uniform3fv = (PFNGLUNIFORM3FVPROC)context.uniform3fvARB;
    if (context.uniform3fvARB == NULL && context.uniform3fv != NULL) context.uniform3fvARB = (PFNGLUNIFORM3FVARBPROC)context.uniform3fv;
    if (context.uniform3i == NULL && context.uniform3iARB != NULL) context.uniform3i = (PFNGLUNIFORM3IPROC)context.uniform3iARB;
    if (context.uniform3iARB == NULL && context.uniform3i != NULL) context.uniform3iARB = (PFNGLUNIFORM3IARBPROC)context.uniform3i;
    if (context.uniform3iv == NULL && context.uniform3ivARB != NULL) context.uniform3iv = (PFNGLUNIFORM3IVPROC)context.uniform3ivARB;
    if (context.uniform3ivARB == NULL && context.uniform3iv != NULL) context.uniform3ivARB = (PFNGLUNIFORM3IVARBPROC)context.uniform3iv;
    if (context.uniform3ui == NULL && context.uniform3uiEXT != NULL) context.uniform3ui = (PFNGLUNIFORM3UIPROC)context.uniform3uiEXT;
    if (context.uniform3uiEXT == NULL && context.uniform3ui != NULL) context.uniform3uiEXT = (PFNGLUNIFORM3UIEXTPROC)context.uniform3ui;
    if (context.uniform3uiv == NULL && context.uniform3uivEXT != NULL) context.uniform3uiv = (PFNGLUNIFORM3UIVPROC)context.uniform3uivEXT;
    if (context.uniform3uivEXT == NULL && context.uniform3uiv != NULL) context.uniform3uivEXT = (PFNGLUNIFORM3UIVEXTPROC)context.uniform3uiv;
    if (context.uniform4f == NULL && context.uniform4fARB != NULL) context.uniform4f = (PFNGLUNIFORM4FPROC)context.uniform4fARB;
    if (context.uniform4fARB == NULL && context.uniform4f != NULL) context.uniform4fARB = (PFNGLUNIFORM4FARBPROC)context.uniform4f;
    if (context.uniform4fv == NULL && context.uniform4fvARB != NULL) context.uniform4fv = (PFNGLUNIFORM4FVPROC)context.uniform4fvARB;
    if (context.uniform4fvARB == NULL && context.uniform4fv != NULL) context.uniform4fvARB = (PFNGLUNIFORM4FVARBPROC)context.uniform4fv;
    if (context.uniform4i == NULL && context.uniform4iARB != NULL) context.uniform4i = (PFNGLUNIFORM4IPROC)context.uniform4iARB;
    if (context.uniform4iARB == NULL && context.uniform4i != NULL) context.uniform4iARB = (PFNGLUNIFORM4IARBPROC)context.uniform4i;
    if (context.uniform4iv == NULL && context.uniform4ivARB != NULL) context.uniform4iv = (PFNGLUNIFORM4IVPROC)context.uniform4ivARB;
    if (context.uniform4ivARB == NULL && context.uniform4iv != NULL) context.uniform4ivARB = (PFNGLUNIFORM4IVARBPROC)context.uniform4iv;
    if (context.uniform4ui == NULL && context.uniform4uiEXT != NULL) context.uniform4ui = (PFNGLUNIFORM4UIPROC)context.uniform4uiEXT;
    if (context.uniform4uiEXT == NULL && context.uniform4ui != NULL) context.uniform4uiEXT = (PFNGLUNIFORM4UIEXTPROC)context.uniform4ui;
    if (context.uniform4uiv == NULL && context.uniform4uivEXT != NULL) context.uniform4uiv = (PFNGLUNIFORM4UIVPROC)context.uniform4uivEXT;
    if (context.uniform4uivEXT == NULL && context.uniform4uiv != NULL) context.uniform4uivEXT = (PFNGLUNIFORM4UIVEXTPROC)context.uniform4uiv;
    if (context.uniformMatrix2fv == NULL && context.uniformMatrix2fvARB != NULL) context.uniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)context.uniformMatrix2fvARB;
    if (context.uniformMatrix2fvARB == NULL && context.uniformMatrix2fv != NULL) context.uniformMatrix2fvARB = (PFNGLUNIFORMMATRIX2FVARBPROC)context.uniformMatrix2fv;
    if (context.uniformMatrix2x3fv == NULL && context.uniformMatrix2x3fvNV != NULL) context.uniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC)context.uniformMatrix2x3fvNV;
    if (context.uniformMatrix2x3fvNV == NULL && context.uniformMatrix2x3fv != NULL) context.uniformMatrix2x3fvNV = (PFNGLUNIFORMMATRIX2X3FVNVPROC)context.uniformMatrix2x3fv;
    if (context.uniformMatrix2x4fv == NULL && context.uniformMatrix2x4fvNV != NULL) context.uniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC)context.uniformMatrix2x4fvNV;
    if (context.uniformMatrix2x4fvNV == NULL && context.uniformMatrix2x4fv != NULL) context.uniformMatrix2x4fvNV = (PFNGLUNIFORMMATRIX2X4FVNVPROC)context.uniformMatrix2x4fv;
    if (context.uniformMatrix3fv == NULL && context.uniformMatrix3fvARB != NULL) context.uniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)context.uniformMatrix3fvARB;
    if (context.uniformMatrix3fvARB == NULL && context.uniformMatrix3fv != NULL) context.uniformMatrix3fvARB = (PFNGLUNIFORMMATRIX3FVARBPROC)context.uniformMatrix3fv;
    if (context.uniformMatrix3x2fv == NULL && context.uniformMatrix3x2fvNV != NULL) context.uniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC)context.uniformMatrix3x2fvNV;
    if (context.uniformMatrix3x2fvNV == NULL && context.uniformMatrix3x2fv != NULL) context.uniformMatrix3x2fvNV = (PFNGLUNIFORMMATRIX3X2FVNVPROC)context.uniformMatrix3x2fv;
    if (context.uniformMatrix3x4fv == NULL && context.uniformMatrix3x4fvNV != NULL) context.uniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC)context.uniformMatrix3x4fvNV;
    if (context.uniformMatrix3x4fvNV == NULL && context.uniformMatrix3x4fv != NULL) context.uniformMatrix3x4fvNV = (PFNGLUNIFORMMATRIX3X4FVNVPROC)context.uniformMatrix3x4fv;
    if (context.uniformMatrix4fv == NULL && context.uniformMatrix4fvARB != NULL) context.uniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)context.uniformMatrix4fvARB;
    if (context.uniformMatrix4fvARB == NULL && context.uniformMatrix4fv != NULL) context.uniformMatrix4fvARB = (PFNGLUNIFORMMATRIX4FVARBPROC)context.uniformMatrix4fv;
    if (context.uniformMatrix4x2fv == NULL && context.uniformMatrix4x2fvNV != NULL) context.uniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC)context.uniformMatrix4x2fvNV;
    if (context.uniformMatrix4x2fvNV == NULL && context.uniformMatrix4x2fv != NULL) context.uniformMatrix4x2fvNV = (PFNGLUNIFORMMATRIX4X2FVNVPROC)context.uniformMatrix4x2fv;
    if (context.uniformMatrix4x3fv == NULL && context.uniformMatrix4x3fvNV != NULL) context.uniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC)context.uniformMatrix4x3fvNV;
    if (context.uniformMatrix4x3fvNV == NULL && context.uniformMatrix4x3fv != NULL) context.uniformMatrix4x3fvNV = (PFNGLUNIFORMMATRIX4X3FVNVPROC)context.uniformMatrix4x3fv;
    if (context.unmapBuffer == NULL && context.unmapBufferARB != NULL) context.unmapBuffer = (PFNGLUNMAPBUFFERPROC)context.unmapBufferARB;
    if (context.unmapBuffer == NULL && context.unmapBufferOES != NULL) context.unmapBuffer = (PFNGLUNMAPBUFFERPROC)context.unmapBufferOES;
    if (context.unmapBufferARB == NULL && context.unmapBuffer != NULL) context.unmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)context.unmapBuffer;
    if (context.unmapBufferARB == NULL && context.unmapBufferOES != NULL) context.unmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)context.unmapBufferOES;
    if (context.unmapBufferOES == NULL && context.unmapBuffer != NULL) context.unmapBufferOES = (PFNGLUNMAPBUFFEROESPROC)context.unmapBuffer;
    if (context.unmapBufferOES == NULL && context.unmapBufferARB != NULL) context.unmapBufferOES = (PFNGLUNMAPBUFFEROESPROC)context.unmapBufferARB;
    if (context.useProgram == NULL && context.useProgramObjectARB != NULL) context.useProgram = (PFNGLUSEPROGRAMPROC)context.useProgramObjectARB;
    if (context.useProgramObjectARB == NULL && context.useProgram != NULL) context.useProgramObjectARB = (PFNGLUSEPROGRAMOBJECTARBPROC)context.useProgram;
    if (context.validateProgram == NULL && context.validateProgramARB != NULL) context.validateProgram = (PFNGLVALIDATEPROGRAMPROC)context.validateProgramARB;
    if (context.validateProgramARB == NULL && context.validateProgram != NULL) context.validateProgramARB = (PFNGLVALIDATEPROGRAMARBPROC)context.validateProgram;
    if (context.vertexAttrib1d == NULL && context.vertexAttrib1dARB != NULL) context.vertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)context.vertexAttrib1dARB;
    if (context.vertexAttrib1d == NULL && context.vertexAttrib1dNV != NULL) context.vertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)context.vertexAttrib1dNV;
    if (context.vertexAttrib1dARB == NULL && context.vertexAttrib1d != NULL) context.vertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC)context.vertexAttrib1d;
    if (context.vertexAttrib1dARB == NULL && context.vertexAttrib1dNV != NULL) context.vertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC)context.vertexAttrib1dNV;
    if (context.vertexAttrib1dNV == NULL && context.vertexAttrib1d != NULL) context.vertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC)context.vertexAttrib1d;
    if (context.vertexAttrib1dNV == NULL && context.vertexAttrib1dARB != NULL) context.vertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC)context.vertexAttrib1dARB;
    if (context.vertexAttrib1dv == NULL && context.vertexAttrib1dvARB != NULL) context.vertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)context.vertexAttrib1dvARB;
    if (context.vertexAttrib1dv == NULL && context.vertexAttrib1dvNV != NULL) context.vertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)context.vertexAttrib1dvNV;
    if (context.vertexAttrib1dvARB == NULL && context.vertexAttrib1dv != NULL) context.vertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC)context.vertexAttrib1dv;
    if (context.vertexAttrib1dvARB == NULL && context.vertexAttrib1dvNV != NULL) context.vertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC)context.vertexAttrib1dvNV;
    if (context.vertexAttrib1dvNV == NULL && context.vertexAttrib1dv != NULL) context.vertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC)context.vertexAttrib1dv;
    if (context.vertexAttrib1dvNV == NULL && context.vertexAttrib1dvARB != NULL) context.vertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC)context.vertexAttrib1dvARB;
    if (context.vertexAttrib1f == NULL && context.vertexAttrib1fARB != NULL) context.vertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)context.vertexAttrib1fARB;
    if (context.vertexAttrib1f == NULL && context.vertexAttrib1fNV != NULL) context.vertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)context.vertexAttrib1fNV;
    if (context.vertexAttrib1fARB == NULL && context.vertexAttrib1f != NULL) context.vertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC)context.vertexAttrib1f;
    if (context.vertexAttrib1fARB == NULL && context.vertexAttrib1fNV != NULL) context.vertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC)context.vertexAttrib1fNV;
    if (context.vertexAttrib1fNV == NULL && context.vertexAttrib1f != NULL) context.vertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC)context.vertexAttrib1f;
    if (context.vertexAttrib1fNV == NULL && context.vertexAttrib1fARB != NULL) context.vertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC)context.vertexAttrib1fARB;
    if (context.vertexAttrib1fv == NULL && context.vertexAttrib1fvARB != NULL) context.vertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)context.vertexAttrib1fvARB;
    if (context.vertexAttrib1fv == NULL && context.vertexAttrib1fvNV != NULL) context.vertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)context.vertexAttrib1fvNV;
    if (context.vertexAttrib1fvARB == NULL && context.vertexAttrib1fv != NULL) context.vertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC)context.vertexAttrib1fv;
    if (context.vertexAttrib1fvARB == NULL && context.vertexAttrib1fvNV != NULL) context.vertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC)context.vertexAttrib1fvNV;
    if (context.vertexAttrib1fvNV == NULL && context.vertexAttrib1fv != NULL) context.vertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC)context.vertexAttrib1fv;
    if (context.vertexAttrib1fvNV == NULL && context.vertexAttrib1fvARB != NULL) context.vertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC)context.vertexAttrib1fvARB;
    if (context.vertexAttrib1s == NULL && context.vertexAttrib1sARB != NULL) context.vertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)context.vertexAttrib1sARB;
    if (context.vertexAttrib1s == NULL && context.vertexAttrib1sNV != NULL) context.vertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)context.vertexAttrib1sNV;
    if (context.vertexAttrib1sARB == NULL && context.vertexAttrib1s != NULL) context.vertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC)context.vertexAttrib1s;
    if (context.vertexAttrib1sARB == NULL && context.vertexAttrib1sNV != NULL) context.vertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC)context.vertexAttrib1sNV;
    if (context.vertexAttrib1sNV == NULL && context.vertexAttrib1s != NULL) context.vertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC)context.vertexAttrib1s;
    if (context.vertexAttrib1sNV == NULL && context.vertexAttrib1sARB != NULL) context.vertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC)context.vertexAttrib1sARB;
    if (context.vertexAttrib1sv == NULL && context.vertexAttrib1svARB != NULL) context.vertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)context.vertexAttrib1svARB;
    if (context.vertexAttrib1sv == NULL && context.vertexAttrib1svNV != NULL) context.vertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)context.vertexAttrib1svNV;
    if (context.vertexAttrib1svARB == NULL && context.vertexAttrib1sv != NULL) context.vertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC)context.vertexAttrib1sv;
    if (context.vertexAttrib1svARB == NULL && context.vertexAttrib1svNV != NULL) context.vertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC)context.vertexAttrib1svNV;
    if (context.vertexAttrib1svNV == NULL && context.vertexAttrib1sv != NULL) context.vertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC)context.vertexAttrib1sv;
    if (context.vertexAttrib1svNV == NULL && context.vertexAttrib1svARB != NULL) context.vertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC)context.vertexAttrib1svARB;
    if (context.vertexAttrib2d == NULL && context.vertexAttrib2dARB != NULL) context.vertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)context.vertexAttrib2dARB;
    if (context.vertexAttrib2d == NULL && context.vertexAttrib2dNV != NULL) context.vertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)context.vertexAttrib2dNV;
    if (context.vertexAttrib2dARB == NULL && context.vertexAttrib2d != NULL) context.vertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC)context.vertexAttrib2d;
    if (context.vertexAttrib2dARB == NULL && context.vertexAttrib2dNV != NULL) context.vertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC)context.vertexAttrib2dNV;
    if (context.vertexAttrib2dNV == NULL && context.vertexAttrib2d != NULL) context.vertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC)context.vertexAttrib2d;
    if (context.vertexAttrib2dNV == NULL && context.vertexAttrib2dARB != NULL) context.vertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC)context.vertexAttrib2dARB;
    if (context.vertexAttrib2dv == NULL && context.vertexAttrib2dvARB != NULL) context.vertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)context.vertexAttrib2dvARB;
    if (context.vertexAttrib2dv == NULL && context.vertexAttrib2dvNV != NULL) context.vertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)context.vertexAttrib2dvNV;
    if (context.vertexAttrib2dvARB == NULL && context.vertexAttrib2dv != NULL) context.vertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC)context.vertexAttrib2dv;
    if (context.vertexAttrib2dvARB == NULL && context.vertexAttrib2dvNV != NULL) context.vertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC)context.vertexAttrib2dvNV;
    if (context.vertexAttrib2dvNV == NULL && context.vertexAttrib2dv != NULL) context.vertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC)context.vertexAttrib2dv;
    if (context.vertexAttrib2dvNV == NULL && context.vertexAttrib2dvARB != NULL) context.vertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC)context.vertexAttrib2dvARB;
    if (context.vertexAttrib2f == NULL && context.vertexAttrib2fARB != NULL) context.vertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)context.vertexAttrib2fARB;
    if (context.vertexAttrib2f == NULL && context.vertexAttrib2fNV != NULL) context.vertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)context.vertexAttrib2fNV;
    if (context.vertexAttrib2fARB == NULL && context.vertexAttrib2f != NULL) context.vertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC)context.vertexAttrib2f;
    if (context.vertexAttrib2fARB == NULL && context.vertexAttrib2fNV != NULL) context.vertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC)context.vertexAttrib2fNV;
    if (context.vertexAttrib2fNV == NULL && context.vertexAttrib2f != NULL) context.vertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC)context.vertexAttrib2f;
    if (context.vertexAttrib2fNV == NULL && context.vertexAttrib2fARB != NULL) context.vertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC)context.vertexAttrib2fARB;
    if (context.vertexAttrib2fv == NULL && context.vertexAttrib2fvARB != NULL) context.vertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)context.vertexAttrib2fvARB;
    if (context.vertexAttrib2fv == NULL && context.vertexAttrib2fvNV != NULL) context.vertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)context.vertexAttrib2fvNV;
    if (context.vertexAttrib2fvARB == NULL && context.vertexAttrib2fv != NULL) context.vertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC)context.vertexAttrib2fv;
    if (context.vertexAttrib2fvARB == NULL && context.vertexAttrib2fvNV != NULL) context.vertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC)context.vertexAttrib2fvNV;
    if (context.vertexAttrib2fvNV == NULL && context.vertexAttrib2fv != NULL) context.vertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC)context.vertexAttrib2fv;
    if (context.vertexAttrib2fvNV == NULL && context.vertexAttrib2fvARB != NULL) context.vertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC)context.vertexAttrib2fvARB;
    if (context.vertexAttrib2s == NULL && context.vertexAttrib2sARB != NULL) context.vertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)context.vertexAttrib2sARB;
    if (context.vertexAttrib2s == NULL && context.vertexAttrib2sNV != NULL) context.vertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)context.vertexAttrib2sNV;
    if (context.vertexAttrib2sARB == NULL && context.vertexAttrib2s != NULL) context.vertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC)context.vertexAttrib2s;
    if (context.vertexAttrib2sARB == NULL && context.vertexAttrib2sNV != NULL) context.vertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC)context.vertexAttrib2sNV;
    if (context.vertexAttrib2sNV == NULL && context.vertexAttrib2s != NULL) context.vertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC)context.vertexAttrib2s;
    if (context.vertexAttrib2sNV == NULL && context.vertexAttrib2sARB != NULL) context.vertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC)context.vertexAttrib2sARB;
    if (context.vertexAttrib2sv == NULL && context.vertexAttrib2svARB != NULL) context.vertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)context.vertexAttrib2svARB;
    if (context.vertexAttrib2sv == NULL && context.vertexAttrib2svNV != NULL) context.vertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)context.vertexAttrib2svNV;
    if (context.vertexAttrib2svARB == NULL && context.vertexAttrib2sv != NULL) context.vertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC)context.vertexAttrib2sv;
    if (context.vertexAttrib2svARB == NULL && context.vertexAttrib2svNV != NULL) context.vertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC)context.vertexAttrib2svNV;
    if (context.vertexAttrib2svNV == NULL && context.vertexAttrib2sv != NULL) context.vertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC)context.vertexAttrib2sv;
    if (context.vertexAttrib2svNV == NULL && context.vertexAttrib2svARB != NULL) context.vertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC)context.vertexAttrib2svARB;
    if (context.vertexAttrib3d == NULL && context.vertexAttrib3dARB != NULL) context.vertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)context.vertexAttrib3dARB;
    if (context.vertexAttrib3d == NULL && context.vertexAttrib3dNV != NULL) context.vertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)context.vertexAttrib3dNV;
    if (context.vertexAttrib3dARB == NULL && context.vertexAttrib3d != NULL) context.vertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC)context.vertexAttrib3d;
    if (context.vertexAttrib3dARB == NULL && context.vertexAttrib3dNV != NULL) context.vertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC)context.vertexAttrib3dNV;
    if (context.vertexAttrib3dNV == NULL && context.vertexAttrib3d != NULL) context.vertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC)context.vertexAttrib3d;
    if (context.vertexAttrib3dNV == NULL && context.vertexAttrib3dARB != NULL) context.vertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC)context.vertexAttrib3dARB;
    if (context.vertexAttrib3dv == NULL && context.vertexAttrib3dvARB != NULL) context.vertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)context.vertexAttrib3dvARB;
    if (context.vertexAttrib3dv == NULL && context.vertexAttrib3dvNV != NULL) context.vertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)context.vertexAttrib3dvNV;
    if (context.vertexAttrib3dvARB == NULL && context.vertexAttrib3dv != NULL) context.vertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC)context.vertexAttrib3dv;
    if (context.vertexAttrib3dvARB == NULL && context.vertexAttrib3dvNV != NULL) context.vertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC)context.vertexAttrib3dvNV;
    if (context.vertexAttrib3dvNV == NULL && context.vertexAttrib3dv != NULL) context.vertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC)context.vertexAttrib3dv;
    if (context.vertexAttrib3dvNV == NULL && context.vertexAttrib3dvARB != NULL) context.vertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC)context.vertexAttrib3dvARB;
    if (context.vertexAttrib3f == NULL && context.vertexAttrib3fARB != NULL) context.vertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)context.vertexAttrib3fARB;
    if (context.vertexAttrib3f == NULL && context.vertexAttrib3fNV != NULL) context.vertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)context.vertexAttrib3fNV;
    if (context.vertexAttrib3fARB == NULL && context.vertexAttrib3f != NULL) context.vertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC)context.vertexAttrib3f;
    if (context.vertexAttrib3fARB == NULL && context.vertexAttrib3fNV != NULL) context.vertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC)context.vertexAttrib3fNV;
    if (context.vertexAttrib3fNV == NULL && context.vertexAttrib3f != NULL) context.vertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC)context.vertexAttrib3f;
    if (context.vertexAttrib3fNV == NULL && context.vertexAttrib3fARB != NULL) context.vertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC)context.vertexAttrib3fARB;
    if (context.vertexAttrib3fv == NULL && context.vertexAttrib3fvARB != NULL) context.vertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)context.vertexAttrib3fvARB;
    if (context.vertexAttrib3fv == NULL && context.vertexAttrib3fvNV != NULL) context.vertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)context.vertexAttrib3fvNV;
    if (context.vertexAttrib3fvARB == NULL && context.vertexAttrib3fv != NULL) context.vertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC)context.vertexAttrib3fv;
    if (context.vertexAttrib3fvARB == NULL && context.vertexAttrib3fvNV != NULL) context.vertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC)context.vertexAttrib3fvNV;
    if (context.vertexAttrib3fvNV == NULL && context.vertexAttrib3fv != NULL) context.vertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC)context.vertexAttrib3fv;
    if (context.vertexAttrib3fvNV == NULL && context.vertexAttrib3fvARB != NULL) context.vertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC)context.vertexAttrib3fvARB;
    if (context.vertexAttrib3s == NULL && context.vertexAttrib3sARB != NULL) context.vertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)context.vertexAttrib3sARB;
    if (context.vertexAttrib3s == NULL && context.vertexAttrib3sNV != NULL) context.vertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)context.vertexAttrib3sNV;
    if (context.vertexAttrib3sARB == NULL && context.vertexAttrib3s != NULL) context.vertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC)context.vertexAttrib3s;
    if (context.vertexAttrib3sARB == NULL && context.vertexAttrib3sNV != NULL) context.vertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC)context.vertexAttrib3sNV;
    if (context.vertexAttrib3sNV == NULL && context.vertexAttrib3s != NULL) context.vertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC)context.vertexAttrib3s;
    if (context.vertexAttrib3sNV == NULL && context.vertexAttrib3sARB != NULL) context.vertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC)context.vertexAttrib3sARB;
    if (context.vertexAttrib3sv == NULL && context.vertexAttrib3svARB != NULL) context.vertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)context.vertexAttrib3svARB;
    if (context.vertexAttrib3sv == NULL && context.vertexAttrib3svNV != NULL) context.vertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)context.vertexAttrib3svNV;
    if (context.vertexAttrib3svARB == NULL && context.vertexAttrib3sv != NULL) context.vertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC)context.vertexAttrib3sv;
    if (context.vertexAttrib3svARB == NULL && context.vertexAttrib3svNV != NULL) context.vertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC)context.vertexAttrib3svNV;
    if (context.vertexAttrib3svNV == NULL && context.vertexAttrib3sv != NULL) context.vertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC)context.vertexAttrib3sv;
    if (context.vertexAttrib3svNV == NULL && context.vertexAttrib3svARB != NULL) context.vertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC)context.vertexAttrib3svARB;
    if (context.vertexAttrib4bv == NULL && context.vertexAttrib4bvARB != NULL) context.vertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)context.vertexAttrib4bvARB;
    if (context.vertexAttrib4bvARB == NULL && context.vertexAttrib4bv != NULL) context.vertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC)context.vertexAttrib4bv;
    if (context.vertexAttrib4d == NULL && context.vertexAttrib4dARB != NULL) context.vertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)context.vertexAttrib4dARB;
    if (context.vertexAttrib4d == NULL && context.vertexAttrib4dNV != NULL) context.vertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)context.vertexAttrib4dNV;
    if (context.vertexAttrib4dARB == NULL && context.vertexAttrib4d != NULL) context.vertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC)context.vertexAttrib4d;
    if (context.vertexAttrib4dARB == NULL && context.vertexAttrib4dNV != NULL) context.vertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC)context.vertexAttrib4dNV;
    if (context.vertexAttrib4dNV == NULL && context.vertexAttrib4d != NULL) context.vertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC)context.vertexAttrib4d;
    if (context.vertexAttrib4dNV == NULL && context.vertexAttrib4dARB != NULL) context.vertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC)context.vertexAttrib4dARB;
    if (context.vertexAttrib4dv == NULL && context.vertexAttrib4dvARB != NULL) context.vertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)context.vertexAttrib4dvARB;
    if (context.vertexAttrib4dv == NULL && context.vertexAttrib4dvNV != NULL) context.vertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)context.vertexAttrib4dvNV;
    if (context.vertexAttrib4dvARB == NULL && context.vertexAttrib4dv != NULL) context.vertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC)context.vertexAttrib4dv;
    if (context.vertexAttrib4dvARB == NULL && context.vertexAttrib4dvNV != NULL) context.vertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC)context.vertexAttrib4dvNV;
    if (context.vertexAttrib4dvNV == NULL && context.vertexAttrib4dv != NULL) context.vertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC)context.vertexAttrib4dv;
    if (context.vertexAttrib4dvNV == NULL && context.vertexAttrib4dvARB != NULL) context.vertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC)context.vertexAttrib4dvARB;
    if (context.vertexAttrib4f == NULL && context.vertexAttrib4fARB != NULL) context.vertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)context.vertexAttrib4fARB;
    if (context.vertexAttrib4f == NULL && context.vertexAttrib4fNV != NULL) context.vertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)context.vertexAttrib4fNV;
    if (context.vertexAttrib4fARB == NULL && context.vertexAttrib4f != NULL) context.vertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC)context.vertexAttrib4f;
    if (context.vertexAttrib4fARB == NULL && context.vertexAttrib4fNV != NULL) context.vertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC)context.vertexAttrib4fNV;
    if (context.vertexAttrib4fNV == NULL && context.vertexAttrib4f != NULL) context.vertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC)context.vertexAttrib4f;
    if (context.vertexAttrib4fNV == NULL && context.vertexAttrib4fARB != NULL) context.vertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC)context.vertexAttrib4fARB;
    if (context.vertexAttrib4fv == NULL && context.vertexAttrib4fvARB != NULL) context.vertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)context.vertexAttrib4fvARB;
    if (context.vertexAttrib4fv == NULL && context.vertexAttrib4fvNV != NULL) context.vertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)context.vertexAttrib4fvNV;
    if (context.vertexAttrib4fvARB == NULL && context.vertexAttrib4fv != NULL) context.vertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC)context.vertexAttrib4fv;
    if (context.vertexAttrib4fvARB == NULL && context.vertexAttrib4fvNV != NULL) context.vertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC)context.vertexAttrib4fvNV;
    if (context.vertexAttrib4fvNV == NULL && context.vertexAttrib4fv != NULL) context.vertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC)context.vertexAttrib4fv;
    if (context.vertexAttrib4fvNV == NULL && context.vertexAttrib4fvARB != NULL) context.vertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC)context.vertexAttrib4fvARB;
    if (context.vertexAttrib4iv == NULL && context.vertexAttrib4ivARB != NULL) context.vertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)context.vertexAttrib4ivARB;
    if (context.vertexAttrib4ivARB == NULL && context.vertexAttrib4iv != NULL) context.vertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC)context.vertexAttrib4iv;
    if (context.vertexAttrib4Nbv == NULL && context.vertexAttrib4NbvARB != NULL) context.vertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)context.vertexAttrib4NbvARB;
    if (context.vertexAttrib4NbvARB == NULL && context.vertexAttrib4Nbv != NULL) context.vertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC)context.vertexAttrib4Nbv;
    if (context.vertexAttrib4Niv == NULL && context.vertexAttrib4NivARB != NULL) context.vertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)context.vertexAttrib4NivARB;
    if (context.vertexAttrib4NivARB == NULL && context.vertexAttrib4Niv != NULL) context.vertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC)context.vertexAttrib4Niv;
    if (context.vertexAttrib4Nsv == NULL && context.vertexAttrib4NsvARB != NULL) context.vertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)context.vertexAttrib4NsvARB;
    if (context.vertexAttrib4NsvARB == NULL && context.vertexAttrib4Nsv != NULL) context.vertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC)context.vertexAttrib4Nsv;
    if (context.vertexAttrib4Nub == NULL && context.vertexAttrib4NubARB != NULL) context.vertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)context.vertexAttrib4NubARB;
    if (context.vertexAttrib4Nub == NULL && context.vertexAttrib4ubNV != NULL) context.vertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)context.vertexAttrib4ubNV;
    if (context.vertexAttrib4NubARB == NULL && context.vertexAttrib4Nub != NULL) context.vertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC)context.vertexAttrib4Nub;
    if (context.vertexAttrib4NubARB == NULL && context.vertexAttrib4ubNV != NULL) context.vertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC)context.vertexAttrib4ubNV;
    if (context.vertexAttrib4Nubv == NULL && context.vertexAttrib4NubvARB != NULL) context.vertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)context.vertexAttrib4NubvARB;
    if (context.vertexAttrib4Nubv == NULL && context.vertexAttrib4ubvNV != NULL) context.vertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)context.vertexAttrib4ubvNV;
    if (context.vertexAttrib4NubvARB == NULL && context.vertexAttrib4Nubv != NULL) context.vertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC)context.vertexAttrib4Nubv;
    if (context.vertexAttrib4NubvARB == NULL && context.vertexAttrib4ubvNV != NULL) context.vertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC)context.vertexAttrib4ubvNV;
    if (context.vertexAttrib4Nuiv == NULL && context.vertexAttrib4NuivARB != NULL) context.vertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)context.vertexAttrib4NuivARB;
    if (context.vertexAttrib4NuivARB == NULL && context.vertexAttrib4Nuiv != NULL) context.vertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC)context.vertexAttrib4Nuiv;
    if (context.vertexAttrib4Nusv == NULL && context.vertexAttrib4NusvARB != NULL) context.vertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)context.vertexAttrib4NusvARB;
    if (context.vertexAttrib4NusvARB == NULL && context.vertexAttrib4Nusv != NULL) context.vertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC)context.vertexAttrib4Nusv;
    if (context.vertexAttrib4s == NULL && context.vertexAttrib4sARB != NULL) context.vertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)context.vertexAttrib4sARB;
    if (context.vertexAttrib4s == NULL && context.vertexAttrib4sNV != NULL) context.vertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)context.vertexAttrib4sNV;
    if (context.vertexAttrib4sARB == NULL && context.vertexAttrib4s != NULL) context.vertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC)context.vertexAttrib4s;
    if (context.vertexAttrib4sARB == NULL && context.vertexAttrib4sNV != NULL) context.vertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC)context.vertexAttrib4sNV;
    if (context.vertexAttrib4sNV == NULL && context.vertexAttrib4s != NULL) context.vertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC)context.vertexAttrib4s;
    if (context.vertexAttrib4sNV == NULL && context.vertexAttrib4sARB != NULL) context.vertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC)context.vertexAttrib4sARB;
    if (context.vertexAttrib4sv == NULL && context.vertexAttrib4svARB != NULL) context.vertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)context.vertexAttrib4svARB;
    if (context.vertexAttrib4sv == NULL && context.vertexAttrib4svNV != NULL) context.vertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)context.vertexAttrib4svNV;
    if (context.vertexAttrib4svARB == NULL && context.vertexAttrib4sv != NULL) context.vertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC)context.vertexAttrib4sv;
    if (context.vertexAttrib4svARB == NULL && context.vertexAttrib4svNV != NULL) context.vertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC)context.vertexAttrib4svNV;
    if (context.vertexAttrib4svNV == NULL && context.vertexAttrib4sv != NULL) context.vertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC)context.vertexAttrib4sv;
    if (context.vertexAttrib4svNV == NULL && context.vertexAttrib4svARB != NULL) context.vertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC)context.vertexAttrib4svARB;
    if (context.vertexAttrib4ubNV == NULL && context.vertexAttrib4Nub != NULL) context.vertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC)context.vertexAttrib4Nub;
    if (context.vertexAttrib4ubNV == NULL && context.vertexAttrib4NubARB != NULL) context.vertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC)context.vertexAttrib4NubARB;
    if (context.vertexAttrib4ubv == NULL && context.vertexAttrib4ubvARB != NULL) context.vertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)context.vertexAttrib4ubvARB;
    if (context.vertexAttrib4ubvARB == NULL && context.vertexAttrib4ubv != NULL) context.vertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC)context.vertexAttrib4ubv;
    if (context.vertexAttrib4ubvNV == NULL && context.vertexAttrib4Nubv != NULL) context.vertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC)context.vertexAttrib4Nubv;
    if (context.vertexAttrib4ubvNV == NULL && context.vertexAttrib4NubvARB != NULL) context.vertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC)context.vertexAttrib4NubvARB;
    if (context.vertexAttrib4uiv == NULL && context.vertexAttrib4uivARB != NULL) context.vertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)context.vertexAttrib4uivARB;
    if (context.vertexAttrib4uivARB == NULL && context.vertexAttrib4uiv != NULL) context.vertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC)context.vertexAttrib4uiv;
    if (context.vertexAttrib4usv == NULL && context.vertexAttrib4usvARB != NULL) context.vertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)context.vertexAttrib4usvARB;
    if (context.vertexAttrib4usvARB == NULL && context.vertexAttrib4usv != NULL) context.vertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC)context.vertexAttrib4usv;
    if (context.vertexAttribDivisor == NULL && context.vertexAttribDivisorANGLE != NULL) context.vertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)context.vertexAttribDivisorANGLE;
    if (context.vertexAttribDivisor == NULL && context.vertexAttribDivisorEXT != NULL) context.vertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)context.vertexAttribDivisorEXT;
    if (context.vertexAttribDivisor == NULL && context.vertexAttribDivisorNV != NULL) context.vertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)context.vertexAttribDivisorNV;
    if (context.vertexAttribDivisorANGLE == NULL && context.vertexAttribDivisor != NULL) context.vertexAttribDivisorANGLE = (PFNGLVERTEXATTRIBDIVISORANGLEPROC)context.vertexAttribDivisor;
    if (context.vertexAttribDivisorANGLE == NULL && context.vertexAttribDivisorEXT != NULL) context.vertexAttribDivisorANGLE = (PFNGLVERTEXATTRIBDIVISORANGLEPROC)context.vertexAttribDivisorEXT;
    if (context.vertexAttribDivisorANGLE == NULL && context.vertexAttribDivisorNV != NULL) context.vertexAttribDivisorANGLE = (PFNGLVERTEXATTRIBDIVISORANGLEPROC)context.vertexAttribDivisorNV;
    if (context.vertexAttribDivisorEXT == NULL && context.vertexAttribDivisor != NULL) context.vertexAttribDivisorEXT = (PFNGLVERTEXATTRIBDIVISOREXTPROC)context.vertexAttribDivisor;
    if (context.vertexAttribDivisorEXT == NULL && context.vertexAttribDivisorANGLE != NULL) context.vertexAttribDivisorEXT = (PFNGLVERTEXATTRIBDIVISOREXTPROC)context.vertexAttribDivisorANGLE;
    if (context.vertexAttribDivisorEXT == NULL && context.vertexAttribDivisorNV != NULL) context.vertexAttribDivisorEXT = (PFNGLVERTEXATTRIBDIVISOREXTPROC)context.vertexAttribDivisorNV;
    if (context.vertexAttribDivisorNV == NULL && context.vertexAttribDivisor != NULL) context.vertexAttribDivisorNV = (PFNGLVERTEXATTRIBDIVISORNVPROC)context.vertexAttribDivisor;
    if (context.vertexAttribDivisorNV == NULL && context.vertexAttribDivisorANGLE != NULL) context.vertexAttribDivisorNV = (PFNGLVERTEXATTRIBDIVISORNVPROC)context.vertexAttribDivisorANGLE;
    if (context.vertexAttribDivisorNV == NULL && context.vertexAttribDivisorEXT != NULL) context.vertexAttribDivisorNV = (PFNGLVERTEXATTRIBDIVISORNVPROC)context.vertexAttribDivisorEXT;
    if (context.vertexAttribI1i == NULL && context.vertexAttribI1iEXT != NULL) context.vertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC)context.vertexAttribI1iEXT;
    if (context.vertexAttribI1iEXT == NULL && context.vertexAttribI1i != NULL) context.vertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC)context.vertexAttribI1i;
    if (context.vertexAttribI1iv == NULL && context.vertexAttribI1ivEXT != NULL) context.vertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC)context.vertexAttribI1ivEXT;
    if (context.vertexAttribI1ivEXT == NULL && context.vertexAttribI1iv != NULL) context.vertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC)context.vertexAttribI1iv;
    if (context.vertexAttribI1ui == NULL && context.vertexAttribI1uiEXT != NULL) context.vertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC)context.vertexAttribI1uiEXT;
    if (context.vertexAttribI1uiEXT == NULL && context.vertexAttribI1ui != NULL) context.vertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC)context.vertexAttribI1ui;
    if (context.vertexAttribI1uiv == NULL && context.vertexAttribI1uivEXT != NULL) context.vertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC)context.vertexAttribI1uivEXT;
    if (context.vertexAttribI1uivEXT == NULL && context.vertexAttribI1uiv != NULL) context.vertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC)context.vertexAttribI1uiv;
    if (context.vertexAttribI2i == NULL && context.vertexAttribI2iEXT != NULL) context.vertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC)context.vertexAttribI2iEXT;
    if (context.vertexAttribI2iEXT == NULL && context.vertexAttribI2i != NULL) context.vertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC)context.vertexAttribI2i;
    if (context.vertexAttribI2iv == NULL && context.vertexAttribI2ivEXT != NULL) context.vertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC)context.vertexAttribI2ivEXT;
    if (context.vertexAttribI2ivEXT == NULL && context.vertexAttribI2iv != NULL) context.vertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC)context.vertexAttribI2iv;
    if (context.vertexAttribI2ui == NULL && context.vertexAttribI2uiEXT != NULL) context.vertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC)context.vertexAttribI2uiEXT;
    if (context.vertexAttribI2uiEXT == NULL && context.vertexAttribI2ui != NULL) context.vertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC)context.vertexAttribI2ui;
    if (context.vertexAttribI2uiv == NULL && context.vertexAttribI2uivEXT != NULL) context.vertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC)context.vertexAttribI2uivEXT;
    if (context.vertexAttribI2uivEXT == NULL && context.vertexAttribI2uiv != NULL) context.vertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC)context.vertexAttribI2uiv;
    if (context.vertexAttribI3i == NULL && context.vertexAttribI3iEXT != NULL) context.vertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC)context.vertexAttribI3iEXT;
    if (context.vertexAttribI3iEXT == NULL && context.vertexAttribI3i != NULL) context.vertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC)context.vertexAttribI3i;
    if (context.vertexAttribI3iv == NULL && context.vertexAttribI3ivEXT != NULL) context.vertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC)context.vertexAttribI3ivEXT;
    if (context.vertexAttribI3ivEXT == NULL && context.vertexAttribI3iv != NULL) context.vertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC)context.vertexAttribI3iv;
    if (context.vertexAttribI3ui == NULL && context.vertexAttribI3uiEXT != NULL) context.vertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC)context.vertexAttribI3uiEXT;
    if (context.vertexAttribI3uiEXT == NULL && context.vertexAttribI3ui != NULL) context.vertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC)context.vertexAttribI3ui;
    if (context.vertexAttribI3uiv == NULL && context.vertexAttribI3uivEXT != NULL) context.vertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC)context.vertexAttribI3uivEXT;
    if (context.vertexAttribI3uivEXT == NULL && context.vertexAttribI3uiv != NULL) context.vertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC)context.vertexAttribI3uiv;
    if (context.vertexAttribI4bv == NULL && context.vertexAttribI4bvEXT != NULL) context.vertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC)context.vertexAttribI4bvEXT;
    if (context.vertexAttribI4bvEXT == NULL && context.vertexAttribI4bv != NULL) context.vertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC)context.vertexAttribI4bv;
    if (context.vertexAttribI4i == NULL && context.vertexAttribI4iEXT != NULL) context.vertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC)context.vertexAttribI4iEXT;
    if (context.vertexAttribI4iEXT == NULL && context.vertexAttribI4i != NULL) context.vertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC)context.vertexAttribI4i;
    if (context.vertexAttribI4iv == NULL && context.vertexAttribI4ivEXT != NULL) context.vertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC)context.vertexAttribI4ivEXT;
    if (context.vertexAttribI4ivEXT == NULL && context.vertexAttribI4iv != NULL) context.vertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC)context.vertexAttribI4iv;
    if (context.vertexAttribI4sv == NULL && context.vertexAttribI4svEXT != NULL) context.vertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC)context.vertexAttribI4svEXT;
    if (context.vertexAttribI4svEXT == NULL && context.vertexAttribI4sv != NULL) context.vertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC)context.vertexAttribI4sv;
    if (context.vertexAttribI4ubv == NULL && context.vertexAttribI4ubvEXT != NULL) context.vertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC)context.vertexAttribI4ubvEXT;
    if (context.vertexAttribI4ubvEXT == NULL && context.vertexAttribI4ubv != NULL) context.vertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC)context.vertexAttribI4ubv;
    if (context.vertexAttribI4ui == NULL && context.vertexAttribI4uiEXT != NULL) context.vertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC)context.vertexAttribI4uiEXT;
    if (context.vertexAttribI4uiEXT == NULL && context.vertexAttribI4ui != NULL) context.vertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC)context.vertexAttribI4ui;
    if (context.vertexAttribI4uiv == NULL && context.vertexAttribI4uivEXT != NULL) context.vertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC)context.vertexAttribI4uivEXT;
    if (context.vertexAttribI4uivEXT == NULL && context.vertexAttribI4uiv != NULL) context.vertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC)context.vertexAttribI4uiv;
    if (context.vertexAttribI4usv == NULL && context.vertexAttribI4usvEXT != NULL) context.vertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC)context.vertexAttribI4usvEXT;
    if (context.vertexAttribI4usvEXT == NULL && context.vertexAttribI4usv != NULL) context.vertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC)context.vertexAttribI4usv;
    if (context.vertexAttribIPointer == NULL && context.vertexAttribIPointerEXT != NULL) context.vertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC)context.vertexAttribIPointerEXT;
    if (context.vertexAttribIPointerEXT == NULL && context.vertexAttribIPointer != NULL) context.vertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC)context.vertexAttribIPointer;
    if (context.vertexAttribPointer == NULL && context.vertexAttribPointerARB != NULL) context.vertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)context.vertexAttribPointerARB;
    if (context.vertexAttribPointerARB == NULL && context.vertexAttribPointer != NULL) context.vertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC)context.vertexAttribPointer;
    if (context.waitSync == NULL && context.waitSyncAPPLE != NULL) context.waitSync = (PFNGLWAITSYNCPROC)context.waitSyncAPPLE;
    if (context.waitSyncAPPLE == NULL && context.waitSync != NULL) context.waitSyncAPPLE = (PFNGLWAITSYNCAPPLEPROC)context.waitSync;
}

#if defined(GL_ES_VERSION_3_0) || defined(GL_VERSION_3_0)
#define GLAD_GL_IS_SOME_NEW_VERSION 1
#else
#define GLAD_GL_IS_SOME_NEW_VERSION 0
#endif

static int glad_gl_get_extensions(GL &context, int version, const char **out_exts, unsigned int *out_num_exts_i, char ***out_exts_i) {
#if GLAD_GL_IS_SOME_NEW_VERSION
    if(GLAD_VERSION_MAJOR(version) < 3) {
#else
    (void) version;
    (void) out_num_exts_i;
    (void) out_exts_i;
#endif
        if (context.getString == NULL) {
            return 0;
        }
        *out_exts = (const char *)context.getString(GL_EXTENSIONS);
#if GLAD_GL_IS_SOME_NEW_VERSION
    } else {
        unsigned int index = 0;
        unsigned int num_exts_i = 0;
        char **exts_i = NULL;
        if (context.getStringi == NULL || context.getIntegerv == NULL) {
            return 0;
        }
        context.getIntegerv(GL_NUM_EXTENSIONS, (int*) &num_exts_i);
        if (num_exts_i > 0) {
            exts_i = (char **) malloc(num_exts_i * (sizeof *exts_i));
        }
        if (exts_i == NULL) {
            return 0;
        }
        for(index = 0; index < num_exts_i; index++) {
            const char *gl_str_tmp = (const char*) context.getStringi(GL_EXTENSIONS, index);
            size_t len = strlen(gl_str_tmp) + 1;

            char *local_str = (char*) malloc(len * sizeof(char));
            if(local_str != NULL) {
                memcpy(local_str, gl_str_tmp, len * sizeof(char));
            }

            exts_i[index] = local_str;
        }

        *out_num_exts_i = num_exts_i;
        *out_exts_i = exts_i;
    }
#endif
    return 1;
}
static void glad_gl_free_extensions(char **exts_i, unsigned int num_exts_i) {
    if (exts_i != NULL) {
        unsigned int index;
        for(index = 0; index < num_exts_i; index++) {
            free((void *) (exts_i[index]));
        }
        free((void *)exts_i);
        exts_i = NULL;
    }
}
static int glad_gl_has_extension(int version, const char *exts, unsigned int num_exts_i, char **exts_i, const char *ext) {
    if(GLAD_VERSION_MAJOR(version) < 3 || !GLAD_GL_IS_SOME_NEW_VERSION) {
        const char *extensions;
        const char *loc;
        const char *terminator;
        extensions = exts;
        if(extensions == NULL || ext == NULL) {
            return 0;
        }
        while(1) {
            loc = strstr(extensions, ext);
            if(loc == NULL) {
                return 0;
            }
            terminator = loc + strlen(ext);
            if((loc == extensions || *(loc - 1) == ' ') &&
                (*terminator == ' ' || *terminator == '\0')) {
                return 1;
            }
            extensions = terminator;
        }
    } else {
        unsigned int index;
        for(index = 0; index < num_exts_i; index++) {
            const char *e = exts_i[index];
            if(strcmp(e, ext) == 0) {
                return 1;
            }
        }
    }
    return 0;
}

static GLADapiproc glad_gl_get_proc_from_userptr(void *userptr, const char* name) {
    return (GLAD_GNUC_EXTENSION (GLADapiproc (*)(const char *name)) userptr)(name);
}

static int glad_gl_find_extensions_gl(GL &context, int version) {
    const char *exts = NULL;
    unsigned int num_exts_i = 0;
    char **exts_i = NULL;
    if (!glad_gl_get_extensions(context, version, &exts, &num_exts_i, &exts_i)) return 0;

    context.APPLE_flush_buffer_range = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_APPLE_flush_buffer_range");
    context.APPLE_vertex_array_object = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_APPLE_vertex_array_object");
    context.ARB_color_buffer_float = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_color_buffer_float");
    context.ARB_copy_buffer = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_copy_buffer");
    context.ARB_draw_buffers = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_draw_buffers");
    context.ARB_draw_elements_base_vertex = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_draw_elements_base_vertex");
    context.ARB_draw_instanced = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_draw_instanced");
    context.ARB_framebuffer_object = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_framebuffer_object");
    context.ARB_geometry_shader4 = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_geometry_shader4");
    context.ARB_imaging = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_imaging");
    context.ARB_map_buffer_range = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_map_buffer_range");
    context.ARB_multisample = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_multisample");
    context.ARB_multitexture = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_multitexture");
    context.ARB_occlusion_query = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_occlusion_query");
    context.ARB_point_parameters = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_point_parameters");
    context.ARB_provoking_vertex = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_provoking_vertex");
    context.ARB_shader_objects = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_shader_objects");
    context.ARB_sync = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_sync");
    context.ARB_texture_buffer_object = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_texture_buffer_object");
    context.ARB_texture_compression = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_texture_compression");
    context.ARB_texture_multisample = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_texture_multisample");
    context.ARB_uniform_buffer_object = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_uniform_buffer_object");
    context.ARB_vertex_array_object = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_vertex_array_object");
    context.ARB_vertex_buffer_object = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_vertex_buffer_object");
    context.ARB_vertex_program = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_vertex_program");
    context.ARB_vertex_shader = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_vertex_shader");
    context.ATI_draw_buffers = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ATI_draw_buffers");
    context.ATI_separate_stencil = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ATI_separate_stencil");
    context.EXT_blend_color = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_blend_color");
    context.EXT_blend_equation_separate = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_blend_equation_separate");
    context.EXT_blend_func_separate = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_blend_func_separate");
    context.EXT_blend_minmax = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_blend_minmax");
    context.EXT_copy_texture = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_copy_texture");
    context.EXT_direct_state_access = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_direct_state_access");
    context.EXT_draw_buffers2 = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_draw_buffers2");
    context.EXT_draw_instanced = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_draw_instanced");
    context.EXT_draw_range_elements = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_draw_range_elements");
    context.EXT_framebuffer_blit = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_framebuffer_blit");
    context.EXT_framebuffer_multisample = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_framebuffer_multisample");
    context.EXT_framebuffer_object = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_framebuffer_object");
    context.EXT_gpu_shader4 = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_gpu_shader4");
    context.EXT_multi_draw_arrays = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_multi_draw_arrays");
    context.EXT_point_parameters = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_point_parameters");
    context.EXT_provoking_vertex = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_provoking_vertex");
    context.EXT_subtexture = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_subtexture");
    context.EXT_texture3D = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_texture3D");
    context.EXT_texture_array = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_texture_array");
    context.EXT_texture_buffer_object = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_texture_buffer_object");
    context.EXT_texture_integer = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_texture_integer");
    context.EXT_texture_object = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_texture_object");
    context.EXT_transform_feedback = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_transform_feedback");
    context.EXT_vertex_array = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_vertex_array");
    context.INGR_blend_func_separate = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_INGR_blend_func_separate");
    context.NVX_conditional_render = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NVX_conditional_render");
    context.NV_conditional_render = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_conditional_render");
    context.NV_explicit_multisample = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_explicit_multisample");
    context.NV_geometry_program4 = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_geometry_program4");
    context.NV_point_sprite = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_point_sprite");
    context.NV_transform_feedback = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_transform_feedback");
    context.NV_vertex_program = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_vertex_program");
    context.NV_vertex_program4 = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_vertex_program4");
    context.SGIS_point_parameters = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_SGIS_point_parameters");
    context.EXT_separate_shader_objects = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_separate_shader_objects");
    context.EXT_texture_storage = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_texture_storage");
    context.KHR_blend_equation_advanced = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_KHR_blend_equation_advanced");
    context.KHR_debug = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_KHR_debug");
    context.KHR_robustness = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_KHR_robustness");
    context.NV_blend_equation_advanced = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_blend_equation_advanced");

    glad_gl_free_extensions(exts_i, num_exts_i);

    return 1;
}

static int glad_gl_find_core_gl(GL &context) {
    int i;
    const char* version;
    const char* prefixes[] = {
        "OpenGL ES-CM ",
        "OpenGL ES-CL ",
        "OpenGL ES ",
        "OpenGL SC ",
        NULL
    };
    int major = 0;
    int minor = 0;
    version = (const char*) context.getString(GL_VERSION);
    if (!version) return 0;
    for (i = 0;  prefixes[i];  i++) {
        const size_t length = strlen(prefixes[i]);
        if (strncmp(version, prefixes[i], length) == 0) {
            version += length;
            break;
        }
    }

    GLAD_IMPL_UTIL_SSCANF(version, "%d.%d", &major, &minor);

    context.VERSION_1_0 = (major == 1 && minor >= 0) || major > 1;
    context.VERSION_1_1 = (major == 1 && minor >= 1) || major > 1;
    context.VERSION_1_2 = (major == 1 && minor >= 2) || major > 1;
    context.VERSION_1_3 = (major == 1 && minor >= 3) || major > 1;
    context.VERSION_1_4 = (major == 1 && minor >= 4) || major > 1;
    context.VERSION_1_5 = (major == 1 && minor >= 5) || major > 1;
    context.VERSION_2_0 = (major == 2 && minor >= 0) || major > 2;
    context.VERSION_2_1 = (major == 2 && minor >= 1) || major > 2;
    context.VERSION_3_0 = (major == 3 && minor >= 0) || major > 3;
    context.VERSION_3_1 = (major == 3 && minor >= 1) || major > 3;
    context.VERSION_3_2 = (major == 3 && minor >= 2) || major > 3;

    return GLAD_MAKE_VERSION(major, minor);
}

int gladLoadGLContextUserPtr(GL &context, GLADuserptrloadfunc load, void *userptr) {
    int version;

    context.getString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    if(context.getString == NULL) return 0;
    if(context.getString(GL_VERSION) == NULL) return 0;
    version = glad_gl_find_core_gl(context);

    glad_gl_load_GL_VERSION_1_0(context, load, userptr);
    glad_gl_load_GL_VERSION_1_1(context, load, userptr);
    glad_gl_load_GL_VERSION_1_2(context, load, userptr);
    glad_gl_load_GL_VERSION_1_3(context, load, userptr);
    glad_gl_load_GL_VERSION_1_4(context, load, userptr);
    glad_gl_load_GL_VERSION_1_5(context, load, userptr);
    glad_gl_load_GL_VERSION_2_0(context, load, userptr);
    glad_gl_load_GL_VERSION_2_1(context, load, userptr);
    glad_gl_load_GL_VERSION_3_0(context, load, userptr);
    glad_gl_load_GL_VERSION_3_1(context, load, userptr);
    glad_gl_load_GL_VERSION_3_2(context, load, userptr);

    if (!glad_gl_find_extensions_gl(context, version)) return 0;
    glad_gl_load_GL_APPLE_flush_buffer_range(context, load, userptr);
    glad_gl_load_GL_APPLE_vertex_array_object(context, load, userptr);
    glad_gl_load_GL_ARB_color_buffer_float(context, load, userptr);
    glad_gl_load_GL_ARB_copy_buffer(context, load, userptr);
    glad_gl_load_GL_ARB_draw_buffers(context, load, userptr);
    glad_gl_load_GL_ARB_draw_elements_base_vertex(context, load, userptr);
    glad_gl_load_GL_ARB_draw_instanced(context, load, userptr);
    glad_gl_load_GL_ARB_framebuffer_object(context, load, userptr);
    glad_gl_load_GL_ARB_geometry_shader4(context, load, userptr);
    glad_gl_load_GL_ARB_imaging(context, load, userptr);
    glad_gl_load_GL_ARB_map_buffer_range(context, load, userptr);
    glad_gl_load_GL_ARB_multisample(context, load, userptr);
    glad_gl_load_GL_ARB_multitexture(context, load, userptr);
    glad_gl_load_GL_ARB_occlusion_query(context, load, userptr);
    glad_gl_load_GL_ARB_point_parameters(context, load, userptr);
    glad_gl_load_GL_ARB_provoking_vertex(context, load, userptr);
    glad_gl_load_GL_ARB_shader_objects(context, load, userptr);
    glad_gl_load_GL_ARB_sync(context, load, userptr);
    glad_gl_load_GL_ARB_texture_buffer_object(context, load, userptr);
    glad_gl_load_GL_ARB_texture_compression(context, load, userptr);
    glad_gl_load_GL_ARB_texture_multisample(context, load, userptr);
    glad_gl_load_GL_ARB_uniform_buffer_object(context, load, userptr);
    glad_gl_load_GL_ARB_vertex_array_object(context, load, userptr);
    glad_gl_load_GL_ARB_vertex_buffer_object(context, load, userptr);
    glad_gl_load_GL_ARB_vertex_program(context, load, userptr);
    glad_gl_load_GL_ARB_vertex_shader(context, load, userptr);
    glad_gl_load_GL_ATI_draw_buffers(context, load, userptr);
    glad_gl_load_GL_ATI_separate_stencil(context, load, userptr);
    glad_gl_load_GL_EXT_blend_color(context, load, userptr);
    glad_gl_load_GL_EXT_blend_equation_separate(context, load, userptr);
    glad_gl_load_GL_EXT_blend_func_separate(context, load, userptr);
    glad_gl_load_GL_EXT_blend_minmax(context, load, userptr);
    glad_gl_load_GL_EXT_copy_texture(context, load, userptr);
    glad_gl_load_GL_EXT_direct_state_access(context, load, userptr);
    glad_gl_load_GL_EXT_draw_buffers2(context, load, userptr);
    glad_gl_load_GL_EXT_draw_instanced(context, load, userptr);
    glad_gl_load_GL_EXT_draw_range_elements(context, load, userptr);
    glad_gl_load_GL_EXT_framebuffer_blit(context, load, userptr);
    glad_gl_load_GL_EXT_framebuffer_multisample(context, load, userptr);
    glad_gl_load_GL_EXT_framebuffer_object(context, load, userptr);
    glad_gl_load_GL_EXT_gpu_shader4(context, load, userptr);
    glad_gl_load_GL_EXT_multi_draw_arrays(context, load, userptr);
    glad_gl_load_GL_EXT_point_parameters(context, load, userptr);
    glad_gl_load_GL_EXT_provoking_vertex(context, load, userptr);
    glad_gl_load_GL_EXT_subtexture(context, load, userptr);
    glad_gl_load_GL_EXT_texture3D(context, load, userptr);
    glad_gl_load_GL_EXT_texture_array(context, load, userptr);
    glad_gl_load_GL_EXT_texture_buffer_object(context, load, userptr);
    glad_gl_load_GL_EXT_texture_integer(context, load, userptr);
    glad_gl_load_GL_EXT_texture_object(context, load, userptr);
    glad_gl_load_GL_EXT_transform_feedback(context, load, userptr);
    glad_gl_load_GL_EXT_vertex_array(context, load, userptr);
    glad_gl_load_GL_INGR_blend_func_separate(context, load, userptr);
    glad_gl_load_GL_NVX_conditional_render(context, load, userptr);
    glad_gl_load_GL_NV_conditional_render(context, load, userptr);
    glad_gl_load_GL_NV_explicit_multisample(context, load, userptr);
    glad_gl_load_GL_NV_geometry_program4(context, load, userptr);
    glad_gl_load_GL_NV_point_sprite(context, load, userptr);
    glad_gl_load_GL_NV_transform_feedback(context, load, userptr);
    glad_gl_load_GL_NV_vertex_program(context, load, userptr);
    glad_gl_load_GL_NV_vertex_program4(context, load, userptr);
    glad_gl_load_GL_SGIS_point_parameters(context, load, userptr);
    glad_gl_load_GL_EXT_separate_shader_objects(context, load, userptr);
    glad_gl_load_GL_EXT_texture_storage(context, load, userptr);
    glad_gl_load_GL_KHR_blend_equation_advanced(context, load, userptr);
    glad_gl_load_GL_KHR_debug(context, load, userptr);
    glad_gl_load_GL_KHR_robustness(context, load, userptr);
    glad_gl_load_GL_NV_blend_equation_advanced(context, load, userptr);


    glad_gl_resolve_aliases(context);

    return version;
}


int gladLoadGLContext(GL &context, GLADloadfunc load) {
    return gladLoadGLContextUserPtr(context, glad_gl_get_proc_from_userptr, GLAD_GNUC_EXTENSION (void*) load);
}

static int glad_gl_find_extensions_gles2(GL &context, int version) {
    const char *exts = NULL;
    unsigned int num_exts_i = 0;
    char **exts_i = NULL;
    if (!glad_gl_get_extensions(context, version, &exts, &num_exts_i, &exts_i)) return 0;

    context.EXT_blend_minmax = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_blend_minmax");
    context.EXT_draw_instanced = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_draw_instanced");
    context.EXT_multi_draw_arrays = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_multi_draw_arrays");
    context.NV_conditional_render = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_conditional_render");
    context.ANGLE_instanced_arrays = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ANGLE_instanced_arrays");
    context.APPLE_sync = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_APPLE_sync");
    context.EXT_copy_image = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_copy_image");
    context.EXT_disjoint_timer_query = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_disjoint_timer_query");
    context.EXT_draw_buffers = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_draw_buffers");
    context.EXT_draw_buffers_indexed = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_draw_buffers_indexed");
    context.EXT_draw_elements_base_vertex = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_draw_elements_base_vertex");
    context.EXT_geometry_shader = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_geometry_shader");
    context.EXT_instanced_arrays = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_instanced_arrays");
    context.EXT_map_buffer_range = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_map_buffer_range");
    context.EXT_multisampled_render_to_texture = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_multisampled_render_to_texture");
    context.EXT_primitive_bounding_box = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_primitive_bounding_box");
    context.EXT_robustness = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_robustness");
    context.EXT_separate_shader_objects = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_separate_shader_objects");
    context.EXT_tessellation_shader = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_tessellation_shader");
    context.EXT_texture_border_clamp = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_texture_border_clamp");
    context.EXT_texture_buffer = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_texture_buffer");
    context.EXT_texture_storage = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_texture_storage");
    context.KHR_blend_equation_advanced = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_KHR_blend_equation_advanced");
    context.KHR_debug = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_KHR_debug");
    context.KHR_robustness = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_KHR_robustness");
    context.NV_blend_equation_advanced = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_blend_equation_advanced");
    context.NV_copy_buffer = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_copy_buffer");
    context.NV_draw_instanced = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_draw_instanced");
    context.NV_framebuffer_blit = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_framebuffer_blit");
    context.NV_framebuffer_multisample = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_framebuffer_multisample");
    context.NV_instanced_arrays = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_instanced_arrays");
    context.NV_non_square_matrices = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_non_square_matrices");
    context.NV_viewport_array = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_viewport_array");
    context.OES_copy_image = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_copy_image");
    context.OES_draw_buffers_indexed = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_draw_buffers_indexed");
    context.OES_draw_elements_base_vertex = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_draw_elements_base_vertex");
    context.OES_geometry_shader = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_geometry_shader");
    context.OES_get_program_binary = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_get_program_binary");
    context.OES_mapbuffer = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_mapbuffer");
    context.OES_primitive_bounding_box = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_primitive_bounding_box");
    context.OES_sample_shading = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_sample_shading");
    context.OES_tessellation_shader = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_tessellation_shader");
    context.OES_texture_border_clamp = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_texture_border_clamp");
    context.OES_texture_buffer = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_texture_buffer");
    context.OES_texture_storage_multisample_2d_array = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_texture_storage_multisample_2d_array");
    context.OES_vertex_array_object = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_vertex_array_object");
    context.OES_viewport_array = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_viewport_array");

    glad_gl_free_extensions(exts_i, num_exts_i);

    return 1;
}

static int glad_gl_find_core_gles2(GL &context) {
    int i;
    const char* version;
    const char* prefixes[] = {
        "OpenGL ES-CM ",
        "OpenGL ES-CL ",
        "OpenGL ES ",
        "OpenGL SC ",
        NULL
    };
    int major = 0;
    int minor = 0;
    version = (const char*) context.getString(GL_VERSION);
    if (!version) return 0;
    for (i = 0;  prefixes[i];  i++) {
        const size_t length = strlen(prefixes[i]);
        if (strncmp(version, prefixes[i], length) == 0) {
            version += length;
            break;
        }
    }

    GLAD_IMPL_UTIL_SSCANF(version, "%d.%d", &major, &minor);

    context.ES_VERSION_2_0 = (major == 2 && minor >= 0) || major > 2;
    context.ES_VERSION_3_0 = (major == 3 && minor >= 0) || major > 3;
    context.ES_VERSION_3_1 = (major == 3 && minor >= 1) || major > 3;
    context.ES_VERSION_3_2 = (major == 3 && minor >= 2) || major > 3;

    return GLAD_MAKE_VERSION(major, minor);
}

int gladLoadGLES2ContextUserPtr(GL &context, GLADuserptrloadfunc load, void *userptr) {
    int version;

    context.getString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    if(context.getString == NULL) return 0;
    if(context.getString(GL_VERSION) == NULL) return 0;
    version = glad_gl_find_core_gles2(context);

    glad_gl_load_GL_ES_VERSION_2_0(context, load, userptr);
    glad_gl_load_GL_ES_VERSION_3_0(context, load, userptr);
    glad_gl_load_GL_ES_VERSION_3_1(context, load, userptr);
    glad_gl_load_GL_ES_VERSION_3_2(context, load, userptr);

    if (!glad_gl_find_extensions_gles2(context, version)) return 0;
    glad_gl_load_GL_EXT_blend_minmax(context, load, userptr);
    glad_gl_load_GL_EXT_draw_instanced(context, load, userptr);
    glad_gl_load_GL_EXT_multi_draw_arrays(context, load, userptr);
    glad_gl_load_GL_NV_conditional_render(context, load, userptr);
    glad_gl_load_GL_ANGLE_instanced_arrays(context, load, userptr);
    glad_gl_load_GL_APPLE_sync(context, load, userptr);
    glad_gl_load_GL_EXT_copy_image(context, load, userptr);
    glad_gl_load_GL_EXT_disjoint_timer_query(context, load, userptr);
    glad_gl_load_GL_EXT_draw_buffers(context, load, userptr);
    glad_gl_load_GL_EXT_draw_buffers_indexed(context, load, userptr);
    glad_gl_load_GL_EXT_draw_elements_base_vertex(context, load, userptr);
    glad_gl_load_GL_EXT_geometry_shader(context, load, userptr);
    glad_gl_load_GL_EXT_instanced_arrays(context, load, userptr);
    glad_gl_load_GL_EXT_map_buffer_range(context, load, userptr);
    glad_gl_load_GL_EXT_multisampled_render_to_texture(context, load, userptr);
    glad_gl_load_GL_EXT_primitive_bounding_box(context, load, userptr);
    glad_gl_load_GL_EXT_robustness(context, load, userptr);
    glad_gl_load_GL_EXT_separate_shader_objects(context, load, userptr);
    glad_gl_load_GL_EXT_tessellation_shader(context, load, userptr);
    glad_gl_load_GL_EXT_texture_border_clamp(context, load, userptr);
    glad_gl_load_GL_EXT_texture_buffer(context, load, userptr);
    glad_gl_load_GL_EXT_texture_storage(context, load, userptr);
    glad_gl_load_GL_KHR_blend_equation_advanced(context, load, userptr);
    glad_gl_load_GL_KHR_debug(context, load, userptr);
    glad_gl_load_GL_KHR_robustness(context, load, userptr);
    glad_gl_load_GL_NV_blend_equation_advanced(context, load, userptr);
    glad_gl_load_GL_NV_copy_buffer(context, load, userptr);
    glad_gl_load_GL_NV_draw_instanced(context, load, userptr);
    glad_gl_load_GL_NV_framebuffer_blit(context, load, userptr);
    glad_gl_load_GL_NV_framebuffer_multisample(context, load, userptr);
    glad_gl_load_GL_NV_instanced_arrays(context, load, userptr);
    glad_gl_load_GL_NV_non_square_matrices(context, load, userptr);
    glad_gl_load_GL_NV_viewport_array(context, load, userptr);
    glad_gl_load_GL_OES_copy_image(context, load, userptr);
    glad_gl_load_GL_OES_draw_buffers_indexed(context, load, userptr);
    glad_gl_load_GL_OES_draw_elements_base_vertex(context, load, userptr);
    glad_gl_load_GL_OES_geometry_shader(context, load, userptr);
    glad_gl_load_GL_OES_get_program_binary(context, load, userptr);
    glad_gl_load_GL_OES_mapbuffer(context, load, userptr);
    glad_gl_load_GL_OES_primitive_bounding_box(context, load, userptr);
    glad_gl_load_GL_OES_sample_shading(context, load, userptr);
    glad_gl_load_GL_OES_tessellation_shader(context, load, userptr);
    glad_gl_load_GL_OES_texture_border_clamp(context, load, userptr);
    glad_gl_load_GL_OES_texture_buffer(context, load, userptr);
    glad_gl_load_GL_OES_texture_storage_multisample_2d_array(context, load, userptr);
    glad_gl_load_GL_OES_vertex_array_object(context, load, userptr);
    glad_gl_load_GL_OES_viewport_array(context, load, userptr);


    glad_gl_resolve_aliases(context);

    return version;
}


int gladLoadGLES2Context(GL &context, GLADloadfunc load) {
    return gladLoadGLES2ContextUserPtr(context, glad_gl_get_proc_from_userptr, GLAD_GNUC_EXTENSION (void*) load);
}

}

#endif /* GLAD_GL_IMPLEMENTATION */
